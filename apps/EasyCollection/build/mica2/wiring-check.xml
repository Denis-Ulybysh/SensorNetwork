<nesc xmlns="http://www.tinyos.net/nesC">
  <wiring>
    <wire loc="12:EasyCollectionAppC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x4040ab78"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x403b9700"/></to>
    </wire>
    <wire loc="72:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <from><interface-ref name="Boot" scoped="" ref="0x403b9700"/></from>
      <to><interface-ref name="Boot" scoped="" ref="0x405dd040"/></to>
    </wire>
    <wire loc="13:EasyCollectionAppC.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x404120b0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406040e0"/></to>
    </wire>
    <wire loc="76:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x406040e0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40618930"/></to>
    </wire>
    <wire loc="14:EasyCollectionAppC.nc">
      <from><interface-ref name="RoutingControl" scoped="" ref="0x40418880"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40a83ca0"/></to>
    </wire>
    <wire loc="71:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40a83ca0"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40ab1498"/></to>
    </wire>
    <wire loc="15:EasyCollectionAppC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x4043b298"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40487c88"/></to>
    </wire>
    <wire loc="51:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40487c88"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x405e53e8"/></to>
    </wire>
    <wire loc="16:EasyCollectionAppC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4043f8e0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40d9bf28"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40d9bf28"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="17:EasyCollectionAppC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x4042fb20"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40d9c6a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x40d9c6a8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x41348ae0"/></to>
    </wire>
    <wire loc="18:EasyCollectionAppC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0x40445a58"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0x40ab3a30"/></to>
    </wire>
    <wire loc="83:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0x40ab3a30"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0x40ac8478"/></to>
    </wire>
    <wire loc="19:EasyCollectionAppC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40443d50"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40aa8e98"/>
      <arguments>
        <value cst="I:238">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="20:EasyCollectionAppC.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0x40449630"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0x40aa7c40"/>
      <arguments>
        <value cst="I:238">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="22:EasyCollectionAppC.nc">
      <from><interface-ref name="SerialAMSend" scoped="" ref="0x40462430"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40fae258"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x40fae258"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x413bcc50"/></to>
    </wire>
    <wire loc="23:EasyCollectionAppC.nc">
      <from><interface-ref name="SerialAMControl" scoped="" ref="0x40462ca0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40d8eb90"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40d8eb90"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40de11d0"/></to>
    </wire>
    <wire loc="24:EasyCollectionAppC.nc">
      <from><interface-ref name="SerialAMPacket" scoped="" ref="0x4045c6e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40fad010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40fad010"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40d898c0"/></to>
    </wire>
    <wire loc="25:EasyCollectionAppC.nc">
      <from><interface-ref name="SerialPacket" scoped="" ref="0x4044f698"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40d891d0"/></to>
    </wire>
    <wire loc="65:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40d891d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40db5770"/></to>
    </wire>
    <wire loc="26:EasyCollectionAppC.nc">
      <from><interface-ref name="RadioStrengthControl" scoped="" ref="0x4041c6e8"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x4077edb0"/></to>
    </wire>
    <wire loc="72:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Uart0Init" scoped="" ref="0x40efb110"/></to>
    </wire>
    <wire loc="73:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Uart1Init" scoped="" ref="0x40efabd8"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40e9dab0"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40de4e10"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x412932e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x412a2350"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x41269b70"/></to>
    </wire>
    <wire loc="150:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40d67c38"/></to>
    </wire>
    <wire loc="175:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40b88ae8"/></to>
    </wire>
    <wire loc="218:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40c09260"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliP.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408c6b00"/></to>
    </wire>
    <wire loc="52:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408be548"/></to>
    </wire>
    <wire>
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4117d5e0"/></to>
    </wire>
    <wire loc="93:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40676010"/></to>
    </wire>
    <wire loc="94:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40770208"/></to>
    </wire>
    <wire loc="67:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x405dd3d8"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x4031e010"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="Scheduler" scoped="" ref="0x4031e010"/></from>
      <to><interface-ref name="Scheduler" scoped="" ref="0x40394df0"/></to>
    </wire>
    <wire loc="68:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x405dd9a0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4048fd88"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4048fd88"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x4048d978"/></to>
    </wire>
    <wire loc="71:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <from><interface-ref name="SoftwareInit" scoped="" ref="0x405ddda8"/></from>
      <to><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></to>
    </wire>
    <wire loc="26:/root/Projects/tinyos-main-read-only/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40496ea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40f9e2b0"/></to>
    </wire>
    <wire loc="26:/root/Projects/tinyos-main-read-only/tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40496ea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40a5a700"/></to>
    </wire>
    <wire loc="71:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40496ea0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x407d3d98"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40496740"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x405cca88"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MeasureClock" scoped="" ref="0x40493240"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405cc6d8"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4048dd58"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405f6e48"/></to>
    </wire>
    <wire loc="62:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="MoteInit" scoped="" ref="0x4048dd58"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404984c8"/></to>
    </wire>
    <wire loc="23:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404984c8"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404a44b8"/></to>
    </wire>
    <wire loc="24:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x404984c8"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x4049a498"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x40498898"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x40496ea0"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4049a498"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404d25f8"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PlatformInit" scoped="" ref="0x4049a498"/></from>
      <to><interface-ref name="PlatformInit" scoped="" ref="0x404a8598"/></to>
    </wire>
    <wire loc="26:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SerialIdPin" scoped="" ref="0x4049fa10"/></from>
      <to><interface-ref name="PortA4" scoped="" ref="0x40502a08"/></to>
    </wire>
    <wire loc="141:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA4" scoped="" ref="0x40502a08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40551170"/></to>
    </wire>
    <wire loc="27:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <from><interface-ref name="SubInit" scoped="" ref="0x404a34a8"/></from>
      <to><interface-ref name="SubInit" scoped="" ref="0x40498898"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="CHP_OUT" scoped="" ref="0x404d1428"/></from>
      <to><interface-ref name="PortA6" scoped="" ref="0x40501ea8"/></to>
    </wire>
    <wire loc="143:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA6" scoped="" ref="0x40501ea8"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x405504f0"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PALE" scoped="" ref="0x404d1e10"/></from>
      <to><interface-ref name="PortD4" scoped="" ref="0x4051b210"/></to>
    </wire>
    <wire loc="168:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD4" scoped="" ref="0x4051b210"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40569d68"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PCLK" scoped="" ref="0x404d0820"/></from>
      <to><interface-ref name="PortD6" scoped="" ref="0x4051a670"/></to>
    </wire>
    <wire loc="170:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD6" scoped="" ref="0x4051a670"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40567170"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="PDATA" scoped="" ref="0x404da2e8"/></from>
      <to><interface-ref name="PortD7" scoped="" ref="0x405190a0"/></to>
    </wire>
    <wire loc="171:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD7" scoped="" ref="0x405190a0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40567ac8"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiSck" scoped="" ref="0x404f14f0"/></from>
      <to><interface-ref name="PortB1" scoped="" ref="0x4050dce8"/></to>
    </wire>
    <wire loc="147:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB1" scoped="" ref="0x4050dce8"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4055cd30"/></to>
    </wire>
    <wire loc="62:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMiso" scoped="" ref="0x404f1ef0"/></from>
      <to><interface-ref name="PortB3" scoped="" ref="0x4050a210"/></to>
    </wire>
    <wire loc="149:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB3" scoped="" ref="0x4050a210"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40559030"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="SpiMosi" scoped="" ref="0x404f0908"/></from>
      <to><interface-ref name="PortB2" scoped="" ref="0x4050b750"/></to>
    </wire>
    <wire loc="148:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB2" scoped="" ref="0x4050b750"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4055b6b0"/></to>
    </wire>
    <wire loc="64:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <from><interface-ref name="OC1C" scoped="" ref="0x404eb3c0"/></from>
      <to><interface-ref name="PortB7" scoped="" ref="0x40508c08"/></to>
    </wire>
    <wire loc="153:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB7" scoped="" ref="0x40508c08"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x405576b0"/></to>
    </wire>
    <wire loc="191:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG0" scoped="" ref="0x4051dce8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405a0ee0"/></to>
    </wire>
    <wire loc="165:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD1" scoped="" ref="0x4050f2f0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4056a090"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4056a090"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4107c010"/></to>
    </wire>
    <wire loc="176:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE3" scoped="" ref="0x405178e0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40571d68"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40571d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b8a88"/></to>
    </wire>
    <wire loc="185:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF3" scoped="" ref="0x40520a98"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x405796b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x405796b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410fb7f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x405504f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ff7010"/></to>
    </wire>
    <wire loc="183:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF1" scoped="" ref="0x40521670"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x4057a330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4057a330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410fe3b0"/></to>
    </wire>
    <wire loc="146:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB0" scoped="" ref="0x4050d2f0"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4055c3d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4055c3d8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41007de8"/></to>
    </wire>
    <wire loc="157:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC2" scoped="" ref="0x40514a98"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40562170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40562170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41077d70"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40569d68"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b3010"/></to>
    </wire>
    <wire loc="179:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE6" scoped="" ref="0x40515750"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x4056fac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x4056fac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f09e8"/></to>
    </wire>
    <wire loc="138:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA1" scoped="" ref="0x40504b18"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x405534f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x405534f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410009e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40559030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41039c08"/></to>
    </wire>
    <wire loc="160:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC5" scoped="" ref="0x405128e0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40561e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40561e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41072c08"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40567ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410ae010"/></to>
    </wire>
    <wire loc="188:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF6" scoped="" ref="0x4051e8e0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40576330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40576330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f56c0"/></to>
    </wire>
    <wire loc="194:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG3" scoped="" ref="0x40528dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405a8dd8"/></to>
    </wire>
    <wire loc="174:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE1" scoped="" ref="0x405184b0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40572a80"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40572a80"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410bb6c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40551170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ffb9e8"/></to>
    </wire>
    <wire loc="152:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB6" scoped="" ref="0x40508210"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x40558c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40558c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41034a88"/></to>
    </wire>
    <wire loc="192:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG1" scoped="" ref="0x40529900"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4059d3e8"/></to>
    </wire>
    <wire loc="155:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC0" scoped="" ref="0x40507670"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40564dc8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40564dc8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4103f938"/></to>
    </wire>
    <wire loc="166:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD2" scoped="" ref="0x4050fce8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4056a9e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4056a9e8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4107b9e8"/></to>
    </wire>
    <wire loc="177:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE4" scoped="" ref="0x405162f0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40570790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40570790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b6538"/></to>
    </wire>
    <wire loc="186:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF4" scoped="" ref="0x4051f4b0"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40577030"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40577030"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f9228"/></to>
    </wire>
    <wire loc="144:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA7" scoped="" ref="0x405008e0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40550e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40550e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ff69e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x4055cd30"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4103c7f8"/></to>
    </wire>
    <wire loc="158:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC3" scoped="" ref="0x405134b0"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40562ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40562ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410757f8"/></to>
    </wire>
    <wire loc="169:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD5" scoped="" ref="0x4051bc08"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40568790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40568790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b29e8"/></to>
    </wire>
    <wire loc="180:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE7" scoped="" ref="0x40522210"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4056e4f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x4056e4f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410ee538"/></to>
    </wire>
    <wire loc="139:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA2" scoped="" ref="0x40503590"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40553e48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40553e48"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ffe538"/></to>
    </wire>
    <wire loc="150:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB4" scoped="" ref="0x4050ac08"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x40559988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x40559988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410376c0"/></to>
    </wire>
    <wire loc="161:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC6" scoped="" ref="0x405112f0"/></from>
      <to><interface-ref name="Pin6" scoped="" ref="0x405607d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x405607d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410706c0"/></to>
    </wire>
    <wire loc="189:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF7" scoped="" ref="0x4051d2f0"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x40576c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x40576c88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f30b0"/></to>
    </wire>
    <wire loc="164:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD0" scoped="" ref="0x40510750"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4056b6f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4056b6f8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4107e538"/></to>
    </wire>
    <wire loc="175:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE2" scoped="" ref="0x40518ea8"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x40571410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x40571410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b90b0"/></to>
    </wire>
    <wire loc="184:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF2" scoped="" ref="0x405200a0"/></from>
      <to><interface-ref name="Pin2" scoped="" ref="0x4057ac88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4057ac88"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410fdd70"/></to>
    </wire>
    <wire loc="195:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG4" scoped="" ref="0x40527830"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405a53b0"/></to>
    </wire>
    <wire loc="142:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA5" scoped="" ref="0x405014b0"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40551ac8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40551ac8"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ff9538"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x405576b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41032538"/></to>
    </wire>
    <wire loc="182:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF0" scoped="" ref="0x40522c08"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x4057b9c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x4057b9c0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41100938"/></to>
    </wire>
    <wire loc="156:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC1" scoped="" ref="0x405140a0"/></from>
      <to><interface-ref name="Pin1" scoped="" ref="0x40563790"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin1" scoped="" ref="0x40563790"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410783b0"/></to>
    </wire>
    <wire loc="167:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortD3" scoped="" ref="0x4050e750"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x40569410"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x40569410"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41079538"/></to>
    </wire>
    <wire loc="178:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE5" scoped="" ref="0x40516ce8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x4056f170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x4056f170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f1010"/></to>
    </wire>
    <wire loc="187:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortF5" scoped="" ref="0x4051fea8"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40577988"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40577988"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410f8c08"/></to>
    </wire>
    <wire loc="137:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA0" scoped="" ref="0x40504120"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40554b18"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40554b18"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41001010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin2" scoped="" ref="0x4055b6b0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4103a228"/></to>
    </wire>
    <wire loc="159:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC4" scoped="" ref="0x40513ea8"/></from>
      <to><interface-ref name="Pin4" scoped="" ref="0x405614f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin4" scoped="" ref="0x405614f0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x41073228"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin6" scoped="" ref="0x40567170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410b0538"/></to>
    </wire>
    <wire loc="193:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortG2" scoped="" ref="0x405283d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x405aa8f0"/></to>
    </wire>
    <wire loc="173:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortE0" scoped="" ref="0x40519a98"/></from>
      <to><interface-ref name="Pin0" scoped="" ref="0x40572128"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin0" scoped="" ref="0x40572128"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410bec20"/></to>
    </wire>
    <wire loc="162:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortC7" scoped="" ref="0x40511ce8"/></from>
      <to><interface-ref name="Pin7" scoped="" ref="0x4055f170"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin7" scoped="" ref="0x4055f170"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x4106e0b0"/></to>
    </wire>
    <wire loc="140:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortA3" scoped="" ref="0x40502010"/></from>
      <to><interface-ref name="Pin3" scoped="" ref="0x405527d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin3" scoped="" ref="0x405527d0"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x40ffc010"/></to>
    </wire>
    <wire loc="151:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <from><interface-ref name="PortB5" scoped="" ref="0x40509750"/></from>
      <to><interface-ref name="Pin5" scoped="" ref="0x40558330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pin5" scoped="" ref="0x40558330"/></from>
      <to><interface-ref name="IO" scoped="" ref="0x410350b0"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40392670"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <from><interface-ref name="McuSleep" scoped="" ref="0x40397310"/></from>
      <to><interface-ref name="McuSleep" scoped="" ref="0x4031dbf0"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="McuPowerOverride" scoped="" ref="0x403a68a8"/></from>
      <to><interface-ref name="McuPowerOverride" scoped="" ref="0x4092a010"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x405f6e48"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x405e50a0"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405e4110"/></from>
      <to><interface-ref name="Led0" scoped="" ref="0x405f7030"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led0" scoped="" ref="0x405f7030"/></from>
      <to><interface-ref name="PortA2" scoped="" ref="0x40503590"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405e4af8"/></from>
      <to><interface-ref name="Led1" scoped="" ref="0x405f7a38"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led1" scoped="" ref="0x405f7a38"/></from>
      <to><interface-ref name="PortA1" scoped="" ref="0x40504b18"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405f5580"/></from>
      <to><interface-ref name="Led2" scoped="" ref="0x405f64c0"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <from><interface-ref name="Led2" scoped="" ref="0x405f64c0"/></from>
      <to><interface-ref name="PortA0" scoped="" ref="0x40504120"/></to>
    </wire>
    <wire loc="75:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40618930"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406574d8"/></to>
    </wire>
    <wire loc="78:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x406049b8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40612238"/></to>
    </wire>
    <wire loc="80:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40612238"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40626620"/></to>
    </wire>
    <wire loc="80:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x40603a30"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x406112a8"/></to>
    </wire>
    <wire loc="82:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x406112a8"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x406256a8"/></to>
    </wire>
    <wire loc="81:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40603d88"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40622270"/></to>
    </wire>
    <wire loc="76:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40622270"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x406565d0"/></to>
    </wire>
    <wire loc="85:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x40609c58"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x4061f490"/></to>
    </wire>
    <wire loc="90:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x4061f490"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x40655d00"/></to>
    </wire>
    <wire loc="86:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x40613b30"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x4061a4a0"/></to>
    </wire>
    <wire loc="93:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x4061a4a0"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x40655408"/></to>
    </wire>
    <wire loc="79:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40603398"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40612bf8"/></to>
    </wire>
    <wire loc="81:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40612bf8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40625010"/></to>
    </wire>
    <wire loc="83:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4060f6c0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406229e8"/></to>
    </wire>
    <wire loc="77:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406229e8"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40651a88"/></to>
    </wire>
    <wire loc="82:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40611618"/></to>
    </wire>
    <wire loc="83:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40611618"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40625a18"/></to>
    </wire>
    <wire loc="84:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x406002a8"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x4061eea8"/></to>
    </wire>
    <wire loc="91:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x4061eea8"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x40663748"/></to>
    </wire>
    <wire loc="96:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x406574d8"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406763a8"/></to>
    </wire>
    <wire loc="133:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x40663748"/></from>
      <to><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x406d8ea8"/></to>
    </wire>
    <wire loc="99:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x406565d0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x406db398"/></to>
    </wire>
    <wire loc="132:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x40655d00"/></from>
      <to><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x406d9490"/></to>
    </wire>
    <wire loc="92:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x40628de0"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x40662e88"/></to>
    </wire>
    <wire loc="134:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x40662e88"/></from>
      <to><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x406d5618"/></to>
    </wire>
    <wire loc="103:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LowPowerListening" scoped="" ref="0x40655408"/></from>
      <to><interface-ref name="LowPowerListening" scoped="" ref="0x40675320"/></to>
    </wire>
    <wire loc="104:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40651a88"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406da850"/></to>
    </wire>
    <wire loc="78:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40620e00"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40655040"/></to>
    </wire>
    <wire loc="105:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40655040"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x406dade0"/></to>
    </wire>
    <wire loc="85:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40624768"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40657ac0"/></to>
    </wire>
    <wire loc="97:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40657ac0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x406c8930"/></to>
    </wire>
    <wire loc="86:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40624ed0"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40656278"/></to>
    </wire>
    <wire loc="98:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40656278"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x406db040"/></to>
    </wire>
    <wire loc="87:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x40623be8"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x409b6d48"/></to>
    </wire>
    <wire loc="88:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x406232a0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x406565d0"/></to>
    </wire>
    <wire loc="101:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaControl" scoped="" ref="0x406539b0"/></from>
      <to><interface-ref name="CsmaControl" scoped="" ref="0x406769d0"/></to>
    </wire>
    <wire loc="102:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CsmaBackoff" scoped="" ref="0x406515b0"/></from>
      <to><interface-ref name="CsmaBackoff" scoped="" ref="0x40676e38"/></to>
    </wire>
    <wire loc="107:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x406732c8"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x4077edb0"/></to>
    </wire>
    <wire loc="108:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x4067b5d8"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <from><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x408b9350"/></to>
    </wire>
    <wire loc="109:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x4067c428"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x407705a8"/></to>
    </wire>
    <wire loc="110:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="WakeupTimer" scoped="" ref="0x4067bb68"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x407b8c88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x407b8c88"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="111:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadio" scoped="" ref="0x4067f4c8"/></from>
      <to><interface-ref name="ByteRadio" scoped="" ref="0x406dba90"/></to>
    </wire>
    <wire loc="112:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioInit" scoped="" ref="0x406759f0"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x406c8188"/></to>
    </wire>
    <wire loc="113:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ByteRadioControl" scoped="" ref="0x40675e38"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x406c8508"/></to>
    </wire>
    <wire loc="115:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Control" scoped="" ref="0x406d5ca8"/></from>
      <to><interface-ref name="CC1000Control" scoped="" ref="0x4077edb0"/></to>
    </wire>
    <wire loc="116:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x406d4bf0"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x407b7bc0"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000Spi" scoped="" ref="0x407b7bc0"/></from>
      <to><interface-ref name="HplCC1000Spi" scoped="" ref="0x404ed918"/></to>
    </wire>
    <wire loc="117:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="amAddress" scoped="" ref="0x406d2c00"/></from>
      <to><function-ref name="amAddress" scoped="" ref="0x409b6d48"/></to>
    </wire>
    <wire loc="118:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiRx" scoped="" ref="0x406d3d88"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x40769a08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="119:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC1000Squelch" scoped="" ref="0x406d3720"/></from>
      <to><interface-ref name="CC1000Squelch" scoped="" ref="0x407705a8"/></to>
    </wire>
    <wire loc="121:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiNoiseFloor" scoped="" ref="0x406780c0"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x40769a08"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="122:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiCheckChannel" scoped="" ref="0x40678e50"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x40769a08"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="123:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="RssiPulseCheck" scoped="" ref="0x40688c08"/></from>
      <to><interface-ref name="Rssi" scoped="" ref="0x40769a08"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="124:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><function-ref name="cancelRssi" scoped="" ref="0x40687a40"/></from>
      <to><function-ref name="cancel" scoped="" ref="0x40768808"/></to>
    </wire>
    <wire loc="125:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x40679010"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x409bbe60"/></to>
    </wire>
    <wire loc="127:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="ActualRssi" scoped="" ref="0x40766308"/></from>
      <to><interface-ref name="RssiAdc" scoped="" ref="0x4076b7f0"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiAdc" scoped="" ref="0x4076b7f0"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x407cbaf8"/></to>
    </wire>
    <wire loc="128:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x40763a50"/></from>
      <to><interface-ref name="RssiResource" scoped="" ref="0x407b74a8"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="RssiResource" scoped="" ref="0x407b74a8"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x407cb3d0"/></to>
    </wire>
    <wire loc="129:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="CC" scoped="" ref="0x4077dd28"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x407ce6f0"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="HplCC1000" scoped="" ref="0x407ce6f0"/></from>
      <to><interface-ref name="HplCC1000" scoped="" ref="0x404dc400"/></to>
    </wire>
    <wire loc="130:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="BusyWait" scoped="" ref="0x4077c520"/></from>
      <to><interface-ref name="BusyWait" scoped="" ref="0x409bbe60"/></to>
    </wire>
    <wire loc="137:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x409c60a0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409e6170"/></to>
    </wire>
    <wire loc="33:/root/Projects/tinyos-main-read-only/tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x409e6170"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409e37f0"/></to>
    </wire>
    <wire loc="138:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LocalTime32khz" scoped="" ref="0x406e5c58"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x409c76b8"/></to>
    </wire>
    <wire loc="142:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <from><interface-ref name="LocalTimeMilli" scoped="" ref="0x406e76d8"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x408dd600"/></to>
    </wire>
    <wire loc="65:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="LocalTime" scoped="" ref="0x408dd600"/></from>
      <to><interface-ref name="LocalTime" scoped="" ref="0x409a6a88"/></to>
    </wire>
    <wire loc="119:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="setWakeupTask" scoped="" ref="0x40684630"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="186:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="startStopDone" scoped="" ref="0x4069e350"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="304:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="sleepCheck" scoped="" ref="0x406a6010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="327:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <from><interface-ref name="adjustSquelch" scoped="" ref="0x406a3970"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="417:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketSent" scoped="" ref="0x4071a558"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="594:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <from><interface-ref name="signalPacketReceived" scoped="" ref="0x4073e998"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:5">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="ReadNow" scoped="" ref="0x407cbaf8"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x407c34c8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x407cb3d0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x407d7d08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x408a7780"/></from>
      <to><interface-ref name="RssiConfig" scoped="" ref="0x404dbde8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x407d8470"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x408a7780"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x407d3178"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x408a7c58"/></to>
    </wire>
    <wire loc="30:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Read" scoped="" ref="0x407d9520"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x4087d560"/></to>
    </wire>
    <wire loc="31:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="ReadNow" scoped="" ref="0x407c34c8"/></from>
      <to><interface-ref name="ReadNow" scoped="" ref="0x4087b178"/></to>
    </wire>
    <wire loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x408abea0"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x407d8ca8"/></to>
    </wire>
    <wire loc="33:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcConfig" scoped="" ref="0x408956b0"/></from>
      <to><interface-ref name="Atm128AdcConfig" scoped="" ref="0x407d8470"/></to>
    </wire>
    <wire loc="35:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Service" scoped="" ref="0x408ab280"/></from>
      <to><interface-ref name="Read" scoped="" ref="0x4087c1d8"/></to>
    </wire>
    <wire loc="36:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4087bde8"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407d0740"/></to>
    </wire>
    <wire loc="68:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407d0740"/></from>
      <to><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407e16a8"/></to>
    </wire>
    <wire loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x407e6970"/></from>
      <to><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x407e1c30"/></to>
    </wire>
    <wire loc="66:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Resource" scoped="" ref="0x407d7d08"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x40806910"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Resource" scoped="" ref="0x40806910"/></from>
      <to><interface-ref name="Resource" scoped="" ref="0x4117ca78"/></to>
    </wire>
    <wire loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x40874010"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x407d3178"/></to>
    </wire>
    <wire loc="73:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x407f2498"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x407d2a10"/></to>
    </wire>
    <wire loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="HplAtm128Adc" scoped="" ref="0x407d2a10"/></from>
      <to><interface-ref name="HplAtm128Adc" scoped="" ref="0x408086d8"/></to>
    </wire>
    <wire loc="74:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x407e2968"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x40496740"/></to>
    </wire>
    <wire loc="76:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x408739f0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x407e1218"/></to>
    </wire>
    <wire loc="77:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40872150"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40875470"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40875470"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4117b5f0"/></to>
    </wire>
    <wire loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40805b38"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x403a98c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceRequested" scoped="" ref="0x40875068"/></from>
      <to><interface-ref name="ResourceRequested" scoped="" ref="0x4117b1e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x40875b08"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x4117bc88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceConfigure" scoped="" ref="0x4117a218"/></from>
      <to><interface-ref name="ResourceConfigure" scoped="" ref="0x40874010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Queue" scoped="" ref="0x4117a640"/></from>
      <to><interface-ref name="RoundRobinQueue" scoped="" ref="0x4117d918"/></to>
    </wire>
    <wire>
      <from><interface-ref name="grantedTask" scoped="" ref="0x41179890"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:6">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AsyncStdControl" scoped="" ref="0x411a03b0"/></from>
      <to><interface-ref name="AsyncStdControl" scoped="" ref="0x408739f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="PowerDownCleanup" scoped="" ref="0x411a07a8"/></from>
      <to><interface-ref name="PowerDownCleanup" scoped="" ref="0x40873de8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x411a0ac0"/></from>
      <to><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40872150"/></to>
    </wire>
    <wire>
      <from><interface-ref name="ArbiterInfo" scoped="" ref="0x4119e230"/></from>
      <to><interface-ref name="ArbiterInfo" scoped="" ref="0x408727e8"/></to>
    </wire>
    <wire loc="103:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <from><interface-ref name="acquiredData" scoped="" ref="0x4088de90"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:7">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <from><interface-ref name="SeedInit" scoped="" ref="0x408bdbd8"/></from>
      <to><interface-ref name="SeedInit" scoped="" ref="0x408bea68"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x4076a970"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408be548"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliP.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c32d0"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerMilli" scoped="" ref="0x408c32d0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40993f00"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408c6b00"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408dccd8"/></to>
    </wire>
    <wire loc="35:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="Init" scoped="" ref="0x408dccd8"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x408ebc78"/></to>
    </wire>
    <wire loc="62:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="TimerFrom" scoped="" ref="0x409ab338"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4096ef08"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Alarm" scoped="" ref="0x40977248"/></from>
      <to><interface-ref name="AlarmMilli32" scoped="" ref="0x408d34e8"/></to>
    </wire>
    <wire loc="36:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="AlarmMilli32" scoped="" ref="0x408d34e8"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x409720c0"/></to>
    </wire>
    <wire loc="66:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x409c5448"/></from>
      <to><interface-ref name="CounterMilli32" scoped="" ref="0x408cfe20"/></to>
    </wire>
    <wire loc="37:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <from><interface-ref name="CounterMilli32" scoped="" ref="0x408cfe20"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40971b70"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Counter" scoped="" ref="0x40971b70"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x411d08f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Init" scoped="" ref="0x408ebc78"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x411d3a20"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Alarm" scoped="" ref="0x409720c0"/></from>
      <to><interface-ref name="Alarm" scoped="" ref="0x411d3e58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x411ceac0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x4091ecc0"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x4091ecc0"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409327f0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x411ccc80"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40936010"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40936010"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x4092eaf0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Compare" scoped="" ref="0x411ca580"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x40936970"/></to>
    </wire>
    <wire loc="62:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40936970"/></from>
      <to><interface-ref name="Compare" scoped="" ref="0x4092d4f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="TimerAsync" scoped="" ref="0x411c8010"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x409344f8"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <from><interface-ref name="TimerAsync" scoped="" ref="0x409344f8"/></from>
      <to><interface-ref name="TimerAsync" scoped="" ref="0x4092a470"/></to>
    </wire>
    <wire>
      <from><interface-ref name="fired" scoped="" ref="0x40976bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:8">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="updateFromTimer" scoped="" ref="0x409a8560"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:9">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/Counter32khz32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40a64ae8"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x409e5b60"/></to>
    </wire>
    <wire loc="31:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x409e5b60"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40a4f320"/></to>
    </wire>
    <wire loc="32:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterOne16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40a4e568"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409e04d8"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x409e04d8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409eeb18"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x409f6360"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x409e9e78"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x409d9190"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x409e8b88"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x409f03d0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x40a07a80"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x409f03d0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x40a056a0"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x409f03d0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x40a02340"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <from><interface-ref name="Timer0Ctrl" scoped="" ref="0x40a01e98"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40936010"/></to>
    </wire>
    <wire loc="27:/root/Projects/tinyos-main-read-only/tos/platforms/mica/InitOneP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40a5aae8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x409e04d8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40a735c8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="149:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0x40ac8478"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0x40d69d80"/></to>
    </wire>
    <wire loc="78:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0x40aa02d8"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0x40acce98"/></to>
    </wire>
    <wire loc="121:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionPacket" scoped="" ref="0x40acce98"/></from>
      <to><interface-ref name="CollectionPacket" scoped="" ref="0x40b85ba8"/></to>
    </wire>
    <wire loc="75:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0x40aa7c40"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0x40acc400"/></to>
    </wire>
    <wire loc="118:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Intercept" scoped="" ref="0x40acc400"/></from>
      <to><interface-ref name="Intercept" scoped="" ref="0x40b851e8"/></to>
    </wire>
    <wire loc="77:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40aa6010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40acc758"/></to>
    </wire>
    <wire loc="119:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40acc758"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40b85510"/></to>
    </wire>
    <wire loc="74:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x40aa7598"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x40acdd38"/></to>
    </wire>
    <wire loc="117:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Snoop" scoped="" ref="0x40acdd38"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x40b86de8"/></to>
    </wire>
    <wire loc="72:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40aa8488"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40ab1bc8"/></to>
    </wire>
    <wire loc="114:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40ab1bc8"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40b862c8"/></to>
    </wire>
    <wire loc="81:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0x40ab5c00"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0x40aca758"/></to>
    </wire>
    <wire loc="165:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0x40aca758"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0x40d68310"/></to>
    </wire>
    <wire loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40aa8e98"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40acd688"/></to>
    </wire>
    <wire loc="116:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40acd688"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40b86a08"/></to>
    </wire>
    <wire loc="82:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0x40ab35c8"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0x40ac8010"/></to>
    </wire>
    <wire loc="123:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0x40ac8010"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0x40b83470"/></to>
    </wire>
    <wire loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0x40abb7a0"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0x40acb6c0"/></to>
    </wire>
    <wire loc="122:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpPacket" scoped="" ref="0x40acb6c0"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0x40b843f0"/></to>
    </wire>
    <wire loc="115:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40ab1498"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40b88e00"/></to>
    </wire>
    <wire loc="147:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40ab1498"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40d68ee8"/></to>
    </wire>
    <wire loc="148:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40ab1498"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40be1720"/></to>
    </wire>
    <wire loc="85:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0x40ac8d18"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0x40ab4b08"/></to>
    </wire>
    <wire loc="86:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0x40ac71e8"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0x40aad710"/></to>
    </wire>
    <wire loc="190:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0x40ac2420"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0x40be06f8"/></to>
    </wire>
    <wire loc="120:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionId" scoped="" ref="0x40b9dc00"/></from>
      <to><interface-ref name="CollectionId" scoped="" ref="0x40ac8d18"/></to>
    </wire>
    <wire loc="127:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="QEntryPool" scoped="" ref="0x40b7cbf0"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0x40ba43e0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pool" scoped="" ref="0x40ba43e0"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0x412a26f8"/></to>
    </wire>
    <wire loc="128:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="MessagePool" scoped="" ref="0x40ba1140"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0x40b93010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Pool" scoped="" ref="0x40b93010"/></from>
      <to><interface-ref name="Pool" scoped="" ref="0x41269f18"/></to>
    </wire>
    <wire loc="131:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SendQueue" scoped="" ref="0x40b7d070"/></from>
      <to><interface-ref name="Queue" scoped="" ref="0x40bc9748"/></to>
    </wire>
    <wire loc="134:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SentCache" scoped="" ref="0x40ba0668"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0x40bb72f8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Cache" scoped="" ref="0x40bb72f8"/></from>
      <to><interface-ref name="Cache" scoped="" ref="0x412936b0"/></to>
    </wire>
    <wire loc="139:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0x40b807f0"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0x40be06f8"/></to>
    </wire>
    <wire loc="151:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconSend" scoped="" ref="0x40d66010"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40be1ba8"/></to>
    </wire>
    <wire loc="152:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconReceive" scoped="" ref="0x40d666c8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40be0358"/></to>
    </wire>
    <wire loc="153:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkEstimator" scoped="" ref="0x40d669e0"/></from>
      <to><interface-ref name="LinkEstimator" scoped="" ref="0x40be06f8"/></to>
    </wire>
    <wire loc="155:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CompareBit" scoped="" ref="0x40d5ecc0"/></from>
      <to><interface-ref name="CompareBit" scoped="" ref="0x40c04098"/></to>
    </wire>
    <wire loc="157:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40d655b0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire loc="158:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x40d64250"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406040e0"/></to>
    </wire>
    <wire loc="159:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="BeaconTimer" scoped="" ref="0x40d648b8"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40befd00"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40befd00"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="160:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RouteTimer" scoped="" ref="0x40d61b48"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40bebc38"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40bebc38"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:3">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="161:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0x40d5e230"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0x40ac71e8"/></to>
    </wire>
    <wire loc="162:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CollectionDebug" scoped="" ref="0x40b9bc48"/></from>
      <to><interface-ref name="CollectionDebug" scoped="" ref="0x40ac71e8"/></to>
    </wire>
    <wire loc="163:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpInfo" scoped="" ref="0x40b9ea28"/></from>
      <to><interface-ref name="CtpInfo" scoped="" ref="0x40d68310"/></to>
    </wire>
    <wire loc="164:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="CtpCongestion" scoped="" ref="0x40d5e8c8"/></from>
      <to><interface-ref name="CtpCongestion" scoped="" ref="0x40b83470"/></to>
    </wire>
    <wire loc="169:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RetxmitTimer" scoped="" ref="0x40b82598"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40d576a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Timer" scoped="" ref="0x40d576a8"/></from>
      <to><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/>
      <arguments>
        <value cst="I:4">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="172:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40d5fd98"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></to>
    </wire>
    <wire loc="173:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40b9b850"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></to>
    </wire>
    <wire loc="176:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40b838b8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40be5938"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x40be5938"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x412be6f0"/></to>
    </wire>
    <wire loc="177:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40b9e3d8"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40cc3d30"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x40cc3d30"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40603398"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="178:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubSnoop" scoped="" ref="0x40b9e710"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40cbd758"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x40cbd758"/></from>
      <to><interface-ref name="Snoop" scoped="" ref="0x40603a30"/>
      <arguments>
        <value cst="I:113">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="179:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x40b7e8e8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40c61010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40c61010"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x412bed88"/></to>
    </wire>
    <wire loc="180:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RootControl" scoped="" ref="0x40b9d690"/></from>
      <to><interface-ref name="RootControl" scoped="" ref="0x40d69d80"/></to>
    </wire>
    <wire loc="181:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0x40b7e310"/></from>
      <to><interface-ref name="Routing" scoped="" ref="0x40d697c8"/></to>
    </wire>
    <wire loc="182:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="RadioControl" scoped="" ref="0x40b99330"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x406040e0"/></to>
    </wire>
    <wire loc="183:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b82010"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x40cc5330"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x40cc5330"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x412bc170"/></to>
    </wire>
    <wire loc="184:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40b9c040"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40c616a8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40c616a8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x412bd4d0"/></to>
    </wire>
    <wire loc="185:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40b9cc18"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40487c88"/></to>
    </wire>
    <wire loc="192:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="Random" scoped="" ref="0x40c067c0"/></from>
      <to><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></to>
    </wire>
    <wire loc="194:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40c04430"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40d82a58"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x40d82a58"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x41316010"/></to>
    </wire>
    <wire loc="195:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40c06098"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40d7ea48"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Receive" scoped="" ref="0x40d7ea48"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40603398"/>
      <arguments>
        <value cst="I:112">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="196:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubPacket" scoped="" ref="0x40c07910"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40d81150"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40d81150"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x413166a8"/></to>
    </wire>
    <wire loc="197:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="SubAMPacket" scoped="" ref="0x40c04bb0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40d817e8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40d817e8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x41316d40"/></to>
    </wire>
    <wire loc="213:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <from><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40c06468"/></from>
      <to><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40620e00"/></to>
    </wire>
    <wire>
      <from><interface-ref name="sendTask" scoped="" ref="0x40b99928"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:10">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CtpPacket" scoped="" ref="0x412914d0"/></from>
      <to><interface-ref name="CtpPacket" scoped="" ref="0x40acb6c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x412be6f0"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x412badb8"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x412bed88"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x412bd4d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x412bc170"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4060f6c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x412b7500"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c77a08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x412b7b98"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40c77a08"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40ca3908"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40ca20a8"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x406049b8"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40ca2750"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40ca13f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x40ca1ac8"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:12">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x40ca1f00"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:11">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40cc2070"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40cc2708"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40cbda70"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40cbc150"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="updateRouteTask" scoped="" ref="0x40d5c468"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:13">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="sendBeaconTask" scoped="" ref="0x40d5c030"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:14">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMSend" scoped="" ref="0x41316010"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x41310728"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x413166a8"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x41316d40"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x40d7f410"/></from>
      <to><interface-ref name="Acks" scoped="" ref="0x41315950"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x41315950"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4060f6c0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x41310df0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40c77a08"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x4130f4d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40d7ed60"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40603d88"/></to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x40d7d4d0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40d9cd40"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x41346230"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x41346230"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40aa6010"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x41348ae0"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40aa8488"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CollectionId" scoped="" ref="0x40ab4b08"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CollectionId" scoped="" ref="0x41343328"/></to>
    </wire>
    <wire loc="67:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SplitControl" scoped="" ref="0x40de11d0"/></from>
      <to><interface-ref name="SplitControl" scoped="" ref="0x40dd81d0"/></to>
    </wire>
    <wire loc="63:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40d8a478"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40db6108"/></to>
    </wire>
    <wire loc="64:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40d8ae38"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40db6848"/></to>
    </wire>
    <wire loc="67:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40d885b0"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40db5e08"/></to>
    </wire>
    <wire loc="66:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40d898c0"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40db6b70"/></to>
    </wire>
    <wire loc="69:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Init" scoped="" ref="0x40de4e10"/></from>
      <to><interface-ref name="Init" scoped="" ref="0x40ddede8"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40ddaca8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40d88ae8"/></to>
    </wire>
    <wire loc="69:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubSend" scoped="" ref="0x40de5360"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40ddf100"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="70:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SubReceive" scoped="" ref="0x40de5a18"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40de1a90"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="72:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <from><interface-ref name="SerialPacketInfo" scoped="" ref="0x40dda7a0"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="Info" scoped="" ref="0x40f90568"/></to>
    </wire>
    <wire loc="64:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40ddf100"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40e8e108"/></to>
    </wire>
    <wire loc="65:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Receive" scoped="" ref="0x40de1a90"/></from>
      <to><interface-ref name="Receive" scoped="" ref="0x40e5ed10"/></to>
    </wire>
    <wire loc="66:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="PacketInfo" scoped="" ref="0x40e8e898"/></from>
      <to><interface-ref name="SerialPacketInfo" scoped="" ref="0x40dda7a0"/></to>
    </wire>
    <wire loc="70:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40dd25e0"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40ddaca8"/></to>
    </wire>
    <wire loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40e8d8c8"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40ddaca8"/></to>
    </wire>
    <wire loc="72:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="Leds" scoped="" ref="0x40eb2978"/></from>
      <to><interface-ref name="Leds" scoped="" ref="0x40ddaca8"/></to>
    </wire>
    <wire loc="74:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40e8ed80"/></from>
      <to><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40dd1a80"/></to>
    </wire>
    <wire loc="75:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SendBytePacket" scoped="" ref="0x40e8d310"/></from>
      <to><interface-ref name="SendBytePacket" scoped="" ref="0x40dd3960"/></to>
    </wire>
    <wire loc="77:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialFrameComm" scoped="" ref="0x40e00c80"/></from>
      <to><interface-ref name="SerialFrameComm" scoped="" ref="0x40e8ad48"/></to>
    </wire>
    <wire loc="78:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="SerialControl" scoped="" ref="0x40dd0340"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40e89940"/></to>
    </wire>
    <wire loc="48:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40e89940"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40ea3658"/></to>
    </wire>
    <wire loc="80:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40eb20f0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40e89dc0"/></to>
    </wire>
    <wire loc="49:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40e89dc0"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40e9f010"/></to>
    </wire>
    <wire loc="332:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="stopDoneTask" scoped="" ref="0x40e33350"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:17">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="191:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="RunTx" scoped="" ref="0x40def788"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:15">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="322:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="startDoneTask" scoped="" ref="0x40e04bd0"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:16">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="341:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <from><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40e31010"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:18">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="receiveTask" scoped="" ref="0x40e8b510"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:20">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="signalSendDone" scoped="" ref="0x40e8b948"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:19">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire loc="50:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40ea1c28"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40ea3ac8"/></to>
    </wire>
    <wire loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartByte" scoped="" ref="0x40ea3ac8"/></from>
      <to><interface-ref name="UartByte" scoped="" ref="0x40e9c250"/></to>
    </wire>
    <wire loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="UartStream" scoped="" ref="0x40e9f010"/></from>
      <to><interface-ref name="UartStream" scoped="" ref="0x40e9c668"/></to>
    </wire>
    <wire loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="StdControl" scoped="" ref="0x40ea3658"/></from>
      <to><interface-ref name="StdControl" scoped="" ref="0x40e9dde8"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40e9fa88"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40ea0e98"/></to>
    </wire>
    <wire loc="33:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40ea0e98"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40f95980"/></to>
    </wire>
    <wire loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40edd450"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40e9fa88"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartTxControl" scoped="" ref="0x40e9cf00"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x40f01e38"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0TxControl" scoped="" ref="0x40f01e38"/></from>
      <to><interface-ref name="Uart0TxControl" scoped="" ref="0x40efb560"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUartRxControl" scoped="" ref="0x40ede350"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x40f00388"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart0RxControl" scoped="" ref="0x40f00388"/></from>
      <to><interface-ref name="Uart0RxControl" scoped="" ref="0x40efba90"/></to>
    </wire>
    <wire loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <from><interface-ref name="HplUart" scoped="" ref="0x40ede788"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40f00880"/></to>
    </wire>
    <wire loc="62:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart0" scoped="" ref="0x40f00880"/></from>
      <to><interface-ref name="HplUart0" scoped="" ref="0x40efa010"/></to>
    </wire>
    <wire loc="66:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="HplUart1" scoped="" ref="0x40efff10"/></from>
      <to><interface-ref name="HplUart1" scoped="" ref="0x40ef9b08"/></to>
    </wire>
    <wire loc="64:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1TxControl" scoped="" ref="0x40eff508"/></from>
      <to><interface-ref name="Uart1TxControl" scoped="" ref="0x40ef90c0"/></to>
    </wire>
    <wire loc="65:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Uart1RxControl" scoped="" ref="0x40effa18"/></from>
      <to><interface-ref name="Uart1RxControl" scoped="" ref="0x40ef95f0"/></to>
    </wire>
    <wire loc="68:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="Atm128Calibrate" scoped="" ref="0x40ef7748"/></from>
      <to><interface-ref name="Atm128Calibrate" scoped="" ref="0x40496740"/></to>
    </wire>
    <wire loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <from><interface-ref name="McuPowerState" scoped="" ref="0x40ef7e88"/></from>
      <to><interface-ref name="McuPowerState" scoped="" ref="0x403a98c0"/></to>
    </wire>
    <wire loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterMicro32C.nc">
      <from><interface-ref name="CounterFrom" scoped="" ref="0x40f94bd0"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40f2b900"/></to>
    </wire>
    <wire loc="31:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Counter" scoped="" ref="0x40f2b900"/></from>
      <to><interface-ref name="Counter" scoped="" ref="0x40fa1980"/></to>
    </wire>
    <wire loc="32:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterThree16C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40fa0b40"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40f24240"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40f24240"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40f516f0"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="TimerCtrl" scoped="" ref="0x40f21530"/></from>
      <to><interface-ref name="TimerCtrl" scoped="" ref="0x40f4ca18"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Capture" scoped="" ref="0x40f20258"/></from>
      <to><interface-ref name="Capture" scoped="" ref="0x40f4b7a8"/></to>
    </wire>
    <wire loc="59:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40f543f8"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareA" scoped="" ref="0x40f496c8"/></to>
    </wire>
    <wire loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40f543f8"/>
      <arguments>
        <value cst="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareB" scoped="" ref="0x40f46340"/></to>
    </wire>
    <wire loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <from><interface-ref name="Compare" scoped="" ref="0x40f543f8"/>
      <arguments>
        <value cst="I:2">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </from>
      <to><interface-ref name="CompareC" scoped="" ref="0x40f45f28"/></to>
    </wire>
    <wire loc="27:/root/Projects/tinyos-main-read-only/tos/platforms/mica/InitThreeP.nc">
      <from><interface-ref name="Timer" scoped="" ref="0x40f9e698"/></from>
      <to><interface-ref name="Timer" scoped="" ref="0x40f24240"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Packet" scoped="" ref="0x40fae8f0"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40d891d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Acks" scoped="" ref="0x40fadc08"/></from>
      <to><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40d885b0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="Send" scoped="" ref="0x413b8340"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40fb6010"/>
      <arguments>
        <value cst="I:0">
          <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="AMPacket" scoped="" ref="0x413b89d8"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40d898c0"/></to>
    </wire>
    <wire loc="54:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Send" scoped="" ref="0x40fb6010"/></from>
      <to><interface-ref name="Send" scoped="" ref="0x40fb4728"/></to>
    </wire>
    <wire loc="55:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMSend" scoped="" ref="0x40fb4e98"/></from>
      <to><interface-ref name="AMSend" scoped="" ref="0x40d8a478"/></to>
    </wire>
    <wire loc="56:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="AMPacket" scoped="" ref="0x40fb3580"/></from>
      <to><interface-ref name="AMPacket" scoped="" ref="0x40d898c0"/></to>
    </wire>
    <wire loc="57:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <from><interface-ref name="Packet" scoped="" ref="0x40fb2230"/></from>
      <to><interface-ref name="Packet" scoped="" ref="0x40d891d0"/></to>
    </wire>
    <wire>
      <from><interface-ref name="errorTask" scoped="" ref="0x40fb2908"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:22">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
    <wire>
      <from><interface-ref name="CancelTask" scoped="" ref="0x40fb2d40"/></from>
      <to><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/>
      <arguments>
        <value cst="I:21">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </value>
      </arguments>
      </to>
    </wire>
  </wiring>
  <components>
    <component qname="EasyCollectionC" loc="4:EasyCollectionC.nc">
      <module/>
    </component>
    <component qname="MainC" loc="56:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
        <short>&#10; MainC is the system interface the TinyOS boot sequence.</short>
        <long>&#10; MainC is the system interface the TinyOS boot sequence. It wires the&#10; boot sequence implementation to the scheduler and hardware resources.&#10;&#10; @author Philip Levis&#10; @date   August 6 2005&#10; @see    TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformC" loc="44:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
        <short>&#10; Initialisation component for mica-family platforms.</short>
        <long>&#10; Initialisation component for mica-family platforms. See TEP107. Each &#10; mica-family member must also provide a MotePlatformC with initialisation&#10; specific to that member.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="PlatformP" loc="42:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformP.nc" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformP.nc">
        <short>&#10; Internal platform boot code.</short>
        <long>&#10; Internal platform boot code.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="MotePlatformC" loc="15:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="MotePlatformP" loc="15:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformP.nc" safe="">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformP.nc">
        <short>&#10; The portion of a mica-family initialisation that is mote-specific.</short>
        <long>&#10; The portion of a mica-family initialisation that is mote-specific.&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000InitP" loc="47:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
        <short>&#10; Hardware initialisation for the CC1000 radio.</short>
        <long>&#10; Hardware initialisation for the CC1000 radio. This component is always&#10; included even if the radio is not used.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000P" loc="52:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc" safe="">
      <module/>
    </component>
    <component qname="HplCC1000SpiP" loc="51:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc" safe="">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
        <short>&#10; Low-level functions to access the CC1000 bus.</short>
        <long>&#10; Low-level functions to access the CC1000 bus. Built using the mica2&#10; hardware SPI.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
        <short>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.</short>
        <long>&#10; Provide GeneralIO interfaces for all of the ATmega128's pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA" loc="40(HplAtm128GeneralIOC.PortA):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:59">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:58">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:57">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit0" loc="41(HplAtm128GeneralIOC.PortA.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit1" loc="41(HplAtm128GeneralIOC.PortA.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit2" loc="41(HplAtm128GeneralIOC.PortA.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit3" loc="41(HplAtm128GeneralIOC.PortA.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit4" loc="41(HplAtm128GeneralIOC.PortA.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit5" loc="41(HplAtm128GeneralIOC.PortA.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit6" loc="41(HplAtm128GeneralIOC.PortA.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortA.Bit7" loc="41(HplAtm128GeneralIOC.PortA.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB" loc="40(HplAtm128GeneralIOC.PortB):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:56">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:55">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:54">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit0" loc="41(HplAtm128GeneralIOC.PortB.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit1" loc="41(HplAtm128GeneralIOC.PortB.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit2" loc="41(HplAtm128GeneralIOC.PortB.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit3" loc="41(HplAtm128GeneralIOC.PortB.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit4" loc="41(HplAtm128GeneralIOC.PortB.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit5" loc="41(HplAtm128GeneralIOC.PortB.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="13">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit6" loc="41(HplAtm128GeneralIOC.PortB.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="14">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortB.Bit7" loc="41(HplAtm128GeneralIOC.PortB.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="15">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC" loc="40(HplAtm128GeneralIOC.PortC):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:53">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:52">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:51">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit0" loc="41(HplAtm128GeneralIOC.PortC.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="16">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit1" loc="41(HplAtm128GeneralIOC.PortC.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="17">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit2" loc="41(HplAtm128GeneralIOC.PortC.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="18">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit3" loc="41(HplAtm128GeneralIOC.PortC.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="19">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit4" loc="41(HplAtm128GeneralIOC.PortC.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="20">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit5" loc="41(HplAtm128GeneralIOC.PortC.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="21">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit6" loc="41(HplAtm128GeneralIOC.PortC.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="22">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortC.Bit7" loc="41(HplAtm128GeneralIOC.PortC.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="23">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD" loc="40(HplAtm128GeneralIOC.PortD):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:50">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:49">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:48">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit0" loc="41(HplAtm128GeneralIOC.PortD.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="24">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit1" loc="41(HplAtm128GeneralIOC.PortD.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="25">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit2" loc="41(HplAtm128GeneralIOC.PortD.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="26">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit3" loc="41(HplAtm128GeneralIOC.PortD.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="27">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit4" loc="41(HplAtm128GeneralIOC.PortD.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="28">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit5" loc="41(HplAtm128GeneralIOC.PortD.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="29">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit6" loc="41(HplAtm128GeneralIOC.PortD.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="30">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortD.Bit7" loc="41(HplAtm128GeneralIOC.PortD.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="31">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE" loc="40(HplAtm128GeneralIOC.PortE):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:35">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:34">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:33">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit0" loc="41(HplAtm128GeneralIOC.PortE.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="32">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit1" loc="41(HplAtm128GeneralIOC.PortE.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="33">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit2" loc="41(HplAtm128GeneralIOC.PortE.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="34">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit3" loc="41(HplAtm128GeneralIOC.PortE.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="35">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit4" loc="41(HplAtm128GeneralIOC.PortE.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="36">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit5" loc="41(HplAtm128GeneralIOC.PortE.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="37">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit6" loc="41(HplAtm128GeneralIOC.PortE.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="38">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortE.Bit7" loc="41(HplAtm128GeneralIOC.PortE.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="39">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF" loc="40(HplAtm128GeneralIOC.PortF):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOPortP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit0" loc="41(HplAtm128GeneralIOC.PortF.Bit0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="40">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit1" loc="41(HplAtm128GeneralIOC.PortF.Bit1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="41">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit2" loc="41(HplAtm128GeneralIOC.PortF.Bit2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="42">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit3" loc="41(HplAtm128GeneralIOC.PortF.Bit3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="43">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit4" loc="41(HplAtm128GeneralIOC.PortF.Bit4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="44">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit5" loc="41(HplAtm128GeneralIOC.PortF.Bit5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="45">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit6" loc="41(HplAtm128GeneralIOC.PortF.Bit6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="46">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.PortF.Bit7" loc="41(HplAtm128GeneralIOC.PortF.Bit7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="47">
        <component-ref qname="HplAtm128GeneralIOPinP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F0" loc="42(HplAtm128GeneralIOC.F0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F1" loc="42(HplAtm128GeneralIOC.F1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F2" loc="42(HplAtm128GeneralIOC.F2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F3" loc="42(HplAtm128GeneralIOC.F3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F4" loc="42(HplAtm128GeneralIOC.F4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F5" loc="42(HplAtm128GeneralIOC.F5):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:5">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F6" loc="42(HplAtm128GeneralIOC.F6):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="6">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.F7" loc="42(HplAtm128GeneralIOC.F7):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="7">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:98">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:97">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:32">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:7">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G0" loc="42(HplAtm128GeneralIOC.G0):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="8">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G1" loc="42(HplAtm128GeneralIOC.G1):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="9">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G2" loc="42(HplAtm128GeneralIOC.G2):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="10">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G3" loc="42(HplAtm128GeneralIOC.G3):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="11">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOC.G4" loc="42(HplAtm128GeneralIOC.G4):/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <instance number="12">
        <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
        <arguments>
          <value cst="I:101">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:100">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:99">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="MeasureClockC" loc="22:/root/Projects/tinyos-main-read-only/tos/platforms/mica/MeasureClockC.nc" safe="">
      <documentation loc="14:/root/Projects/tinyos-main-read-only/tos/platforms/mica/MeasureClockC.nc">
        <short>&#10; Measure cpu clock frequency at boot time.</short>
        <long>&#10; Measure cpu clock frequency at boot time. Provides an Atm128Calibrate&#10; interface so that other components can adjust their calibration as&#10; needed.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="RealMainP" loc="56:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc" safe="">
      <documentation loc="49:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc">
        <short>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.</short>
        <long>&#10; RealMain implements the TinyOS boot sequence, as documented in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 17 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="TinySchedulerC" loc="46:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
        <short>&#10; The TinyOS scheduler.</short>
        <long>&#10; The TinyOS scheduler. It provides two interfaces: Scheduler,&#10; for TinyOS to initialize and run tasks, and TaskBasic, the simplext&#10; class of TinyOS tasks (reserved always at-most-once posting,&#10; FIFO, parameter-free). For details and information on how to&#10; replace the scheduler, refer to TEP 106.&#10;&#10; @author  Phil Levis&#10; @date    August 7 2005&#10; @see     TEP 106: Tasks and Schedulers&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SchedulerBasicP" loc="54:/root/Projects/tinyos-main-read-only/tos/system/SchedulerBasicP.nc" safe="">
      <module/>
    </component>
    <component qname="McuSleepC" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/McuSleepC.nc" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/McuSleepC.nc">
        <short>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128.</short>
        <long>&#10; Implementation of TEP 112 (Microcontroller Power Management) for&#10; the Atmega128. Power state calculation code copied from Rob&#10; Szewczyk's 1.x code in HPLPowerManagementM.nc.&#10;&#10; &#60;pre>&#10;  $Id: McuSleepC.nc,v 1.11 2010-06-29 22:07:43 scipio Exp $&#10; &#60;/pre>&#10;&#10; @author Philip Levis&#10; @author Robert Szewczyk&#10; @date   October 26, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="LedsC" loc="45:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
        <short>&#10;&#10; The basic TinyOS LEDs abstraction.</short>
        <long>&#10;&#10; The basic TinyOS LEDs abstraction.&#10;&#10; @author Phil Buonadonna&#10; @author David Gay&#10; @author Philip Levis&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="LedsP" loc="44:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc" safe="">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
        <short>&#10; The implementation of the standard 3 LED mote abstraction.</short>
        <long>&#10; The implementation of the standard 3 LED mote abstraction.&#10;&#10; @author Joe Polastre&#10; @author Philip Levis&#10;&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformLedsC" loc="42:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
        <short>&#10; Platform-specific LED interface.</short>
        <long>&#10; Platform-specific LED interface.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="ActiveMessageC" loc="57:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <documentation loc="49:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
        <short>&#10; The Active Message layer on the mica2 platform.</short>
        <long>&#10; The Active Message layer on the mica2 platform. This is a naming wrapper&#10; around the CC1000 Active Message layer.&#10;&#10; @author Philip Levis&#10; @date June 19 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageC" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
        <short>&#10;&#10; The Active Message layer for the CC1000 radio.</short>
        <long>&#10;&#10; The Active Message layer for the CC1000 radio. This configuration&#10; just layers the AM dispatch (CC1000ActiveMessageM) on top of the&#10; underlying CC1000 radio packet (CC1000CsmaRadioC), which is&#10; inherently an AM packet (acknowledgements based on AM destination&#10; addr and group).&#10; &#10; @author Philip Levis&#10; @author Marco Langerwisch (Packet timestamping)&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000ActiveMessageP" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc" safe="">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
        <short>&#10; Implementation component for CC1000ActiveMessageC.</short>
        <long>&#10; Implementation component for CC1000ActiveMessageC.&#10;&#10; @author Philip Levis&#10; @date June 19 2006&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
        <short>&#10; A low-power-listening CC1000 radio stack.</short>
        <long>&#10; A low-power-listening CC1000 radio stack.&#10;&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). &#10;&#10; CC1000RssiP (RSSI sharing), CC1000SquelchP (noise-floor estimation)&#10; and CC1000ControlP (radio configuration) provide supporting roles.&#10;&#10; This code has some degree of platform-independence, via the HplCC1000,&#10; RssiAdc and HplCC1000Spi interfaces which must be provided by the&#10; platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Joe Polastre&#10; @author David Gay&#10; @author Marco Langerwisch (Packet timestamping)&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CC1000CsmaP" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc" safe="">
      <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the CSMA and low-power listening logic. Actual&#10; packet transmission and reception is in SendReceive.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SendReceiveP" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc" safe="">
      <documentation loc="46:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
        <short>&#10; A rewrite of the low-power-listening CC1000 radio stack.</short>
        <long>&#10; A rewrite of the low-power-listening CC1000 radio stack.&#10; This file contains the send and receive logic for the CC1000 radio.&#10; It does not do any media-access control. It requests the channel&#10; via the ready-to-send event (rts) and starts transmission on reception&#10; of the clear-to-send command (cts). It listens for packets if the&#10; listen() command is called, and stops listening when off() is called.&#10; &#60;p>&#10; This code has some degree of platform-independence, via the&#10; CC1000Control, RSSIADC and SpiByteFifo interfaces which must be provided&#10; by the platform. However, these interfaces may still reflect some&#10; particularities of the mica2 hardware implementation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10; @author Marco Langerwisch (Packet timestamping)&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000RssiP" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000RssiP.nc" safe="">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000RssiP.nc">
        <short>&#10;   RSSI fun.</short>
        <long>&#10;   RSSI fun. It's used for lots of things, and a request to read it&#10;   for one purpose may have to be discarded if conditions change. For&#10;   example, if we've initiated a noise-floor measure, but start &#10;   receiving a packet, we have to:&#60;ul>&#10;   &#60;li>cancel the noise-floor measure (we don't know if the value will&#10;     reflect the received packet or the previous idle state)&#10;   &#60;li>start an RSSI measurement so that we can report signal strength&#10;     to the application&#10;   &#60;/ul>&#60;p>&#10;   This module hides the complexities of cancellation from the rest of&#10;   the stack.&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000SquelchP" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SquelchP.nc" safe="">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SquelchP.nc">
        <short>&#10; Clear threshold estimation based on RSSI measurements.</short>
        <long>&#10; Clear threshold estimation based on RSSI measurements.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author Joe Polastre&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000ControlP" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ControlP.nc" safe="">
      <documentation loc="43:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ControlP.nc">
        <short>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.</short>
        <long>&#10; This module provides the CONTROL functionality for the Chipcon1000&#10; series radio.  It exports a custom interface to control CC1000&#10; operation.&#10;&#10; @author Philip Buonadonna&#10; @author Jaein Jeong&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplCC1000C" loc="46:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
        <short>&#10; HPL for the CC1000 radio, for the mica2 platform.</short>
        <long>&#10; HPL for the CC1000 radio, for the mica2 platform.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplCC1000C.RssiChannel" loc="21(HplCC1000C.RssiChannel):/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AdcReadNowClientC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="WireAdcP" loc="16:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
        <short>&#10; Support component for AdcReadClientC and AdcReadNowClientC.</short>
        <long>&#10; Support component for AdcReadClientC and AdcReadNowClientC.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcC" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <documentation loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
        <short>&#10; HAL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HAL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128AdcP" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc" safe="">
      <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
        <short>&#10; Internal component of the Atmega128 A/D HAL.</short>
        <long>&#10; Internal component of the Atmega128 A/D HAL.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10; @author Phil Buonadonna&#10; @author Hu Siquan &#60;husq@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HplAtm128AdcC" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcC.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128AdcP" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcP.nc" safe="">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcP.nc">
        <short>&#10; HPL for the Atmega128 A/D conversion susbsystem.</short>
        <long>&#10; HPL for the Atmega128 A/D conversion susbsystem.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter" loc="89(Atm128AdcC.AdcArbiter):/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="RoundRobinArbiterC"/>
        <arguments>
          <value cst="S:atm128adc.resource">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="char" size="I:1" alignment="I:1"></type-int>
            </type-pointer>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Queue" loc="42(Atm128AdcC.AdcArbiter.Queue):/root/Projects/tinyos-main-read-only/tos/system/RoundRobinResourceQueueC.nc">
      <instance number="0">
        <component-ref qname="RoundRobinResourceQueueC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.AdcArbiter.Arbiter" loc="52(Atm128AdcC.AdcArbiter.Arbiter):/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <documentation loc="30:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbiterP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Atm128AdcC.PM" loc="67(Atm128AdcC.PM):/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncStdControlPowerManagerC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="Atm128AdcC.PM.PowerManager" loc="58(Atm128AdcC.PM.PowerManager):/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AsyncPowerManagerP"/>
      </instance>
      <module/>
    </component>
    <component qname="AdcP" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc" safe="">
      <documentation loc="39:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
        <short>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.</short>
        <long>&#10; Convert ATmega128 HAL A/D interface to the HIL interfaces.&#10; @author David Gay&#10; @author Jan Hauer &#60;hauer@tkn.tu-berlin.de>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="WireAdcP.ArbitrateRead" loc="23(WireAdcP.ArbitrateRead):/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="ArbitratedReadC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="RandomC" loc="43:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
        <short>&#10; The standard TinyOS random number generator.</short>
        <long>&#10; The standard TinyOS random number generator. If your system requires a &#10; specific random number generator, it should wire to that component&#10; directly. &#10;&#10; @author  Barbara Hohlt &#10; @author  Phil Levis &#10; @date    March 1 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="RandomMlcgC" loc="45:/root/Projects/tinyos-main-read-only/tos/system/RandomMlcgC.nc" safe="">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/system/RandomMlcgC.nc">
        <short> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.</short>
        <long> This code is a fast implementation of the Park-Miller Minimal Standard &#10;  Generator for pseudo-random numbers.  It uses the 32 bit multiplicative &#10;  linear congruential generator, &#10;&#10;&#9;&#9;S' = (A x S) mod (2^31 - 1) &#10;&#10;  for A = 16807.&#10;&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.TimerMilliC" loc="44(CC1000CsmaRadioC.TimerMilliC):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="TimerMilliP" loc="48:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliP.nc">
        <short>&#10; Components should never wire to this component.</short>
        <long>&#10; Components should never wire to this component. This is the&#10; underlying configuration of virtualized millisecond timers. &#10; It auto-wires wires the timer&#10; implementation (TimerC) to the boot sequence and exports the&#10; various Timer interfaces.&#10;&#10; @author Philip Levis&#10; @author Cory Sharp&#10; @date   May 16 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HilTimerMilliC" loc="44:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
        <short>&#10; Millisecond timer for the mica family (see TEP102).</short>
        <long>&#10; Millisecond timer for the mica family (see TEP102). The &#34;millisecond&#34;&#10; timer system is built on hardware timer 0, running at 1024Hz.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP" loc="25:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
        <short>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.</short>
        <long>&#10; Configure hardware timer 0 for use as the mica family's millisecond&#10; timer.  This component does not follow the TEP102 HAL guidelines as&#10; there is only one compare register for timer 0, which is used to&#10; implement HilTimerMilliC. Hence it isn't useful to expose an&#10; AlarmMilliC or CounterMillIC component.&#10; &#10; @author David Gay &#60;dgay@intel-research.net>&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <value cst="I:3">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP" loc="23(AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128AlarmAsyncP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x408d1970"/></type-var>
          <value cst="U:">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128Timer0AsyncC" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
        <short>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..</short>
        <long>&#10; Simple wrapper around the actual timer implementation that automatically&#10; wires it to McuSleepC for low-power calculations..&#10;&#10; @author Philip Levis&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer0AsyncP" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
        <short>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode.</short>
        <long>&#10; HPL interface to Atmega128 timer 0 in ASYNC mode. This is a specialised&#10; HPL component that assumes that timer 0 is used in ASYNC mode and&#10; includes some workarounds for some of the weirdnesses (delayed overflow&#10; interrupt) of that mode.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="HilTimerMilliC.AlarmToTimerC" loc="46(HilTimerMilliC.AlarmToTimerC):/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AlarmToTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.VirtualizeTimerC" loc="46(HilTimerMilliC.VirtualizeTimerC):/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="VirtualizeTimerC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HilTimerMilliC.CounterToLocalTimeC" loc="46(HilTimerMilliC.CounterToLocalTimeC):/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="ActiveMessageAddressC" loc="52:/root/Projects/tinyos-main-read-only/tos/system/ActiveMessageAddressC.nc" safe="">
      <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/system/ActiveMessageAddressC.nc">
        <short>&#10; Component that stores the node's active message address and group ID.</short>
        <long>&#10; Component that stores the node's active message address and group ID.&#10;&#10; @author Philip Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="BusyWaitMicroC" loc="49:/root/Projects/tinyos-main-read-only/tos/platforms/mica/BusyWaitMicroC.nc" safe="">
      <documentation loc="40:/root/Projects/tinyos-main-read-only/tos/platforms/mica/BusyWaitMicroC.nc">
        <short>&#10; Busy wait component as per TEP102.</short>
        <long>&#10; Busy wait component as per TEP102. Supports waiting for at least some&#10; number of microseconds. This functionality should be used sparingly,&#10; when the overhead of posting a Timer or Alarm is greater than simply&#10; busy waiting.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="Counter32khz32C" loc="22:/root/Projects/tinyos-main-read-only/tos/platforms/mica/Counter32khz32C.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/platforms/mica/Counter32khz32C.nc">
        <short>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterOne16C" loc="22:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterOne16C.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterOne16C.nc">
        <short>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit 32kHz Counter component as per TEP102 HAL guidelines. The mica&#10; family 32kHz clock is built on hardware timer 1, and actually runs at&#10; CPU frequency / 256. You can use the MeasureClockC.cyclesPerJiffy()&#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1C" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
        <short>&#10; HPL interface to Atmega128 timer 1.</short>
        <long>&#10; HPL interface to Atmega128 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer1P" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
        <short>&#10; Internal component of the HPL interface to Atmega128 timer 1.</short>
        <long>&#10; Internal component of the HPL interface to Atmega128 timer 1.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitOneP.InitOne" loc="44(InitOneP.InitOne):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterOne16C.NCounter" loc="42(CounterOne16C.NCounter):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="TOne" ref="0x4038fbe0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="Counter32khz32C.Transform32" loc="54(Counter32khz32C.Transform32):/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="TOne" ref="0x4038fbe0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_one_overflow_t" ref="0x4038e148"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.CounterToLocalTimeC" loc="46(CC1000CsmaRadioC.CounterToLocalTimeC):/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="CounterToLocalTimeC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CC1000CsmaRadioC.DummyTimer" loc="44(CC1000CsmaRadioC.DummyTimer):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CollectionC" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CtpP" loc="77:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <documentation loc="66:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
        <short>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.</short>
        <long>&#10; A data collection service that uses a tree routing protocol&#10; to deliver data to collection roots, following TEP 119.&#10;&#10; @author Rodrigo Fonseca&#10; @author Omprakash Gnawali&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CtpP.Forwarder" loc="107(CtpP.Forwarder):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <instance number="0">
        <component-ref qname="CtpForwardingEngineP"/>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.MessagePoolP" loc="41(CtpP.MessagePoolP):/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
            <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.MessagePoolP.PoolP" loc="53(CtpP.MessagePoolP.PoolP):/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40b948f0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.QEntryPoolP" loc="41(CtpP.QEntryPoolP):/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolC"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
          </type-tag>
          <value cst="I:12">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.QEntryPoolP.PoolP" loc="53(CtpP.QEntryPoolP.PoolP):/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="PoolP"/>
        <arguments>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40b948f0"/></type-var>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SendQueueP" loc="42(CtpP.SendQueueP):/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="QueueC"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
            </type-tag>
          </type-pointer>
          <value cst="I:13">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.SentCacheP" loc="38(CtpP.SentCacheP):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheC"/>
        <arguments>
          <value cst="I:4">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SentCacheP.CacheP" loc="43(CtpP.SentCacheP.CacheP):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="LruCtpMsgCacheP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RoutingBeaconTimer" loc="44(CtpP.RoutingBeaconTimer):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.RouteUpdateTimer" loc="44(CtpP.RouteUpdateTimer):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="3">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="LinkEstimatorP" loc="42:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <module/>
    </component>
    <component qname="CtpP.AMSenderC" loc="47(CtpP.AMSenderC):/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC" loc="47(CtpP.AMSenderC.SenderC):/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSenderC.SenderC.AMQueueEntryP" loc="43(CtpP.AMSenderC.SenderC.AMQueueEntryP):/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="AMQueueP" loc="42:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
        <short>&#10; The fair-share send queue for AM radio communication.</short>
        <long>&#10; The fair-share send queue for AM radio communication.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="AMQueueP.AMQueueImplP" loc="45(AMQueueP.AMQueueImplP):/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.AMReceiverC" loc="43(CtpP.AMReceiverC):/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.AMSnooperC" loc="44(CtpP.AMSnooperC):/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="AMSnooperC"/>
        <arguments>
          <value cst="I:113">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.Router" loc="107(CtpP.Router):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <documentation loc="38:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CtpRoutingEngineP"/>
        <arguments>
          <value cst="I:10">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:128">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <value cst="I:512000">
            <type-int cname="long" size="I:4" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.RetxmitTimer" loc="44(CtpP.RetxmitTimer):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="4">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl" loc="47(CtpP.SendControl):/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMSenderC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC" loc="47(CtpP.SendControl.SenderC):/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="DirectAMSenderC"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="CtpP.SendControl.SenderC.AMQueueEntryP" loc="43(CtpP.SendControl.SenderC.AMQueueEntryP):/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CtpP.ReceiveControl" loc="43(CtpP.ReceiveControl):/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMReceiverC"/>
        <arguments>
          <value cst="I:112">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="EasyCollectionAppC.CollectionSenderC" loc="43(EasyCollectionAppC.CollectionSenderC):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionSenderC"/>
        <arguments>
          <value cst="I:238">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="EasyCollectionAppC.CollectionSenderC.CollectionSenderP" loc="34(EasyCollectionAppC.CollectionSenderC.CollectionSenderP):/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc">
      <instance number="0">
        <component-ref qname="CollectionSenderP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
            </type-int>
          </value>
          <value cst="U:">
            <type-int cname="unsigned int" unsigned="" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="EasyCollectionAppC.CollectionSenderC.CollectionSenderP.CollectionIdP" loc="45(EasyCollectionAppC.CollectionSenderC.CollectionSenderP.CollectionIdP):/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="CollectionIdP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="EasyCollectionAppC.TimerMilliC" loc="44(EasyCollectionAppC.TimerMilliC):/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <instance number="5">
        <component-ref qname="TimerMilliC"/>
      </instance>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialActiveMessageC.AM" loc="45(SerialActiveMessageC.AM):/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialActiveMessageP"/>
      </instance>
      <module/>
    </component>
    <component qname="SerialDispatcherC" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
        <short>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component.</short>
        <long>&#10; This component provides functionality to send many different kinds&#10; of serial packets on top of a general packet sending component. It&#10; achieves this by knowing where the different packets in a message_t&#10; exist through the SerialPacketInfo interface.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialP" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <module/>
    </component>
    <component qname="SerialDispatcherC.SerialDispatcherP" loc="48(SerialDispatcherC.SerialDispatcherP):/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialDispatcherP"/>
      </instance>
      <module/>
    </component>
    <component qname="HdlcTranslateC" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/HdlcTranslateC.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="PlatformSerialC" loc="38:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:42 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C" loc="38:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:02 $&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="Atm128Uart0C.UartP" loc="46(Atm128Uart0C.UartP):/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="Atm128UartP"/>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128UartC" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <documentation loc="38:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
        <short>&#10; HPL for the Atmega 128 serial ports.</short>
        <long>&#10; HPL for the Atmega 128 serial ports.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128UartP" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
        <short> &#10; Private component of the Atmega128 serial port HPL.</short>
        <long> &#10; Private component of the Atmega128 serial port HPL.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="CounterMicro32C" loc="22:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterMicro32C.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterMicro32C.nc">
        <short>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 32-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="CounterThree16C" loc="22:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterThree16C.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterThree16C.nc">
        <short>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines.</short>
        <long>&#10; 16-bit microsecond Counter component as per TEP102 HAL guidelines. The&#10; mica family microsecond clock is built on hardware timer 3, and actually&#10; runs at CPU frequency / 8. You can use the MeasureClockC.cyclesPerJiffy() &#10; command to figure out the exact frequency.&#10;&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3C" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
        <short>&#10; HPL interface to Atmega128 timer 2.</short>
        <long>&#10; HPL interface to Atmega128 timer 2.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="HplAtm128Timer3P" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
        <short>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.</short>
        <long>&#10; Internal componentr of the HPL interface to Atmega128 timer 3.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="InitThreeP.InitThree" loc="44(InitThreeP.InitThree):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128TimerInitC"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <value cst="I:2">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterThree16C.NCounter" loc="42(CounterThree16C.NCounter):/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="Atm128CounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TThree" ref="0x4038fe08"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="CounterMicro32C.Transform32" loc="54(CounterMicro32C.Transform32):/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="TransformCounterC"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TThree" ref="0x4038fe08"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <value cst="I:0">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="counter_three_overflow_t" ref="0x4038e440"/></typename>
          </type-int>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialPacketInfoActiveMessageP" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <module/>
    </component>
    <component qname="EasyCollectionAppC.SerialAMSenderC" loc="47(EasyCollectionAppC.SerialAMSenderC):/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <instance number="0">
        <component-ref qname="SerialAMSenderC"/>
        <arguments>
          <value cst="I:6">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <configuration/>
    </component>
    <component qname="EasyCollectionAppC.SerialAMSenderC.AMQueueEntryP" loc="43(EasyCollectionAppC.SerialAMSenderC.AMQueueEntryP):/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="2">
        <component-ref qname="AMQueueEntryP"/>
        <arguments>
          <value cst="U:">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="SerialAMQueueP" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <configuration/>
    </component>
    <component qname="SerialAMQueueP.AMQueueImplP" loc="45(SerialAMQueueP.AMQueueImplP):/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <instance number="1">
        <component-ref qname="AMQueueImplP"/>
        <arguments>
          <value cst="I:1">
            <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          </value>
        </arguments>
      </instance>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOPortP" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc" abstract="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
        <short>&#10; Generic component to expose a full 8-bit port of GPIO pins.</short>
        <long>&#10; Generic component to expose a full 8-bit port of GPIO pins.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40525698" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x405258b0" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40525ac8" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
          <component-ref qname="HplAtm128GeneralIOPortP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="HplAtm128GeneralIOPinP" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
        <short>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates).</short>
        <long>&#10; Generic pin access for pins mapped into I/O space (for which the sbi, cbi&#10; instructions give atomic updates). This can be used for ports A-E.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x4052baf0" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x4052bd18" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40536010" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40536200" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
          <component-ref qname="HplAtm128GeneralIOPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="HplAtm128GeneralIOSlowPinP" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
        <short>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used).</short>
        <long>&#10; Generic pin access for pins not mapped into I/O space (for which the&#10; sbi, cbi instructions cannot be used). This can be used for ports F-G.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;dgay@intel-research.net>&#10;</long>
      </documentation>
      <parameters>
        <constant name="port_addr" ref="0x40583d70" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="ddr_addr" ref="0x40580010" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="pin_addr" ref="0x40580238" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="bit" ref="0x40580428" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
          <component-ref qname="HplAtm128GeneralIOSlowPinP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AdcReadNowClientC" loc="21:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc" abstract="">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
        <short>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.</short>
        <long>&#10; Provide, as per TEP101, Resource-based access to the Atmega128 ADC via a&#10; ReadNow interface.  Users of this component must link it to an&#10; implementation of Atm128AdcConfig which provides the ADC parameters&#10; (channel, etc).&#10; &#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinArbiterC" loc="89:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc" abstract="">
      <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ArbiterInfo, and ResourceDefaultOwner&#10; interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource in&#10; a Round Robin fashion.  An array is used to keep track of which users have &#10; put in requests for the resource.  Upon the release of the resource by one&#10; of these users, the array is checked and the next user (in Round Robin order)&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the resource is granted to the default &#10; user.  If a new request is made, the default user will release the resource, &#10; and it will be granted to the requesting cleint.&#10;&#10; @param &#60;b>resourceName&#60;/b> -- The name of the Resource being shared&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10;</long>
      </documentation>
      <parameters>
        <constant name="resourceName" ref="0x4080af00" loc="89:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
          <component-ref qname="RoundRobinArbiterC"/>
          <type-pointer size="I:2" alignment="I:1">
            <type-int cname="char" size="I:1" alignment="I:1"></type-int>
          </type-pointer>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="RoundRobinResourceQueueC" loc="42:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinResourceQueueC.nc" abstract="" safe="">
      <parameters>
        <constant name="size" ref="0x408435b0" loc="42:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinResourceQueueC.nc">
          <component-ref qname="RoundRobinResourceQueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="ArbiterP" loc="52:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc" abstract="" safe="">
      <documentation loc="30:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
        <short>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.</short>
        <long>&#10; Please refer to TEP 108 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This component provides the Resource, ResourceRequested, ArbiterInfo, &#10; and ResourceDefaultOwner interfaces and uses the ResourceConfigure interface as&#10; described in TEP 108.  It provides arbitration to a shared resource.&#10; A Queue is used to keep track of which users have put&#10; in requests for the resource.  Upon the release of the resource by one&#10; of these users, the queue is checked and the next user&#10; that has a pending request will ge granted control of the resource.  If&#10; there are no pending requests, then the user of the ResourceDefaultOwner&#10; interface gains access to the resource, and holds onto it until&#10; another user makes a request.&#10;&#10; @param &#60;b>default_owner_id&#60;/b> -- The id of the default owner of this &#10;        resource&#10; &#10; @author Kevin Klues (klues@tkn.tu-berlin.de)&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="default_owner_id" ref="0x4082acc0" loc="52:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
          <component-ref qname="ArbiterP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AsyncStdControlPowerManagerC" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc" abstract="">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#60;br>&#60;br>&#10;&#10; Powerdown of the device is done through the &#60;code>AsyncStdControl&#60;/code>&#10; interface, so this component can only be used with those devices that&#10; provide that interface.&#60;br>&#60;br>&#10;&#10; For devices providing either the &#60;code>StdControl&#60;/code> or&#10; &#60;code>SplitControl&#60;/code> interfaces, please use either the&#10; &#60;code>StdControlPowerManagerC&#60;/code> component or the&#10; &#60;code>SplitControlPowerManagerC&#60;/code> component respectively.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="AsyncPowerManagerP" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc" abstract="" safe="">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
        <short>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.</short>
        <long>&#10; Please refer to TEP 115 for more information about this component and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the internal implementation of the standard power management&#10; policy for managing the power states of non-virtualized devices.&#10; Non-virtualized devices are shared using a parameterized Resource&#10; interface, and are powered down according to some policy whenever there&#10; are no more pending requests to that Resource.  The policy implemented&#10; by this component is to power down a device as soon as it becomes free.&#10; Such a policy is useful whenever a device has a negligible wake-up&#10; latency.  There is no cost associated with waiting for the device to&#10; power up, so it can be powered on and off as often as possible.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="ArbitratedReadC" loc="23:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc" abstract="" safe="">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
        <short>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.</short>
        <long>&#10; Implement arbitrated access to a Read interface, based on an&#10; underlying arbitrated Resource interface.&#10;&#10; Note that this code does not deal with unexpected events: it assumes&#10; that all events it receives are in response to commands that it&#10; made. See tos/chips/atm128/adc for an example of using ArbitratedReadC &#10; in a safe way.&#10;&#10; @param width_t Width of the underlying Read interface.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="width_t" ref="0x4087e950" loc="23:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
          <component-ref qname="ArbitratedReadC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="width_t" scoped="" ref="0x4087e950"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TimerMilliC" loc="44:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
        <short>&#10; The virtualized millisecond timer abstraction.</short>
        <long>&#10; The virtualized millisecond timer abstraction. Instantiating this &#10; component gives an independent millisecond granularity timer.&#10;&#10; @author Philip Levis&#10; @date   January 16 2006&#10; @see    TEP 102: Timers&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncC" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc" abstract="">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x408d1970" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x408d1970"/></type-var>
        </typedef>
        <constant name="divider" ref="0x408d1b30" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
          <component-ref qname="Atm128AlarmAsyncC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="Atm128AlarmAsyncP" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc" abstract="" safe="">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
        <short>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode.</short>
        <long>&#10; Build a 32-bit alarm and counter from the atmega128's 8-bit timer 0&#10; in asynchronous mode. Attempting to use the generic Atm128AlarmC&#10; component and the generic timer components runs into problems&#10; apparently related to letting timer 0 overflow.&#10; &#10; So, instead, this version (inspired by the 1.x code and a remark from&#10; Martin Turon) directly builds a 32-bit alarm and counter on top of timer 0&#10; and never lets timer 0 overflow.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision" ref="0x408e6c48" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision" scoped="" ref="0x408e6c48"/></type-var>
        </typedef>
        <constant name="divider" ref="0x408e6e08" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
          <component-ref qname="Atm128AlarmAsyncP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AlarmToTimerC" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc" abstract="" safe="">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
        <short>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.</short>
        <long>&#10; AlarmToTimerC converts a 32-bit Alarm to a Timer.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the Alarm and&#10; Timer being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408dbac8" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
          <component-ref qname="AlarmToTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408dbac8"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="VirtualizeTimerC" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
        <short>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.</short>
        <long>&#10; VirtualizeTimerC uses a single Timer to create up to 255 virtual timers.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of the Timer being &#10;   virtualized.&#10; @param max_timers Number of virtual timers to create.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x40991010" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x40991010"/></type-var>
        </typedef>
        <constant name="max_timers" ref="0x409911f0" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
          <component-ref qname="VirtualizeTimerC"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CounterToLocalTimeC" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc" abstract="" safe="">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
        <short>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.</short>
        <long>&#10; CounterToLocalTimeC converts a 32-bit LocalTime to a Counter.  &#10;&#10; &#60;p>See TEP102 for more details.&#10; @param precision_tag A type indicating the precision of the LocalTime and&#10; Counter being converted.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x409a7900" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
          <component-ref qname="CounterToLocalTimeC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x409a7900"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128TimerInitC" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
        <short>&#10; Initialise an Atmega128 timer to a particular prescaler.</short>
        <long>&#10; Initialise an Atmega128 timer to a particular prescaler. Expected to be&#10; used at boot time.&#10; @param timer_size Integer type of the timer&#10; @param prescaler Desired prescaler value&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author David Gay &#60;david.e.gay@intel.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x40a5bde8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a5bde8"/></type-var>
        </typedef>
        <constant name="prescaler" ref="0x40a58030" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
          <component-ref qname="Atm128TimerInitC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128CounterC" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
        <short>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.</short>
        <long>&#10; Build a TEP102 Counter from an Atmega128 hardware timer.&#10; @param frequency_tag The frequency tag for this Counter&#10; @param timer_size The width of this Counter&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="frequency_tag" ref="0x40a5c9c8" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="frequency_tag" scoped="" ref="0x40a5c9c8"/></type-var>
        </typedef>
        <typedef name="timer_size" ref="0x40a5ce10" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
          <component-ref qname="Atm128CounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x40a5ce10"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="TransformCounterC" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc" abstract="" safe="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
        <short>&#10; TransformCounterC decreases precision and/or widens an Counter.</short>
        <long>&#10; TransformCounterC decreases precision and/or widens an Counter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param to_precision_tag A type indicating the precision of the transformed&#10;   Counter.&#10; @param to_size_type The type for the width of the transformed Counter.&#10; @param from_precision_tag A type indicating the precision of the original&#10;   Counter.&#10; @param from_size_type The type for the width of the original Counter.&#10; @param bit_shift_right Original time units will be 2 to the power &#10;   &#60;code>bit_shift_right&#60;/code> larger than transformed time units.&#10; @param upper_count_type A type large enough to store the upper bits --&#10;   those needed above from_size_type after its shift right to fill&#10;   to_size_type.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="to_precision_tag" ref="0x409e4d68" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_precision_tag" scoped="" ref="0x409e4d68"/></type-var>
        </typedef>
        <typedef name="to_size_type" ref="0x40a631d8" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="to_size_type" scoped="" ref="0x40a631d8"/></type-var>
        </typedef>
        <typedef name="from_precision_tag" ref="0x40a63440" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_precision_tag" scoped="" ref="0x40a63440"/></type-var>
        </typedef>
        <typedef name="from_size_type" ref="0x40a638b0" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="from_size_type" scoped="" ref="0x40a638b0"/></type-var>
        </typedef>
        <constant name="bit_shift_right" ref="0x40a63b18" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <typedef name="upper_count_type" ref="0x40a62010" loc="60:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
          <component-ref qname="TransformCounterC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="upper_count_type" scoped="" ref="0x40a62010"/></type-var>
        </typedef>
      </parameters>
      <module/>
    </component>
    <component qname="CtpForwardingEngineP" loc="107:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc" abstract="">
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="PoolC" loc="41:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
        <short>&#10;  A general dynamic memory pool component.</short>
        <long>&#10;  A general dynamic memory pool component.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2006-12-12 18:23:47 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x40b948f0" loc="41:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40b948f0"/></type-var>
        </typedef>
        <constant name="POOL_SIZE" ref="0x40b94b10" loc="41:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
          <component-ref qname="PoolC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="PoolP" loc="53:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc" abstract="">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
        <short>&#10;  Implementation of a general dynamic memory pool component.</short>
        <long>&#10;  Implementation of a general dynamic memory pool component.&#10;  Note that the allocation/deallocation policies are &#10;  different than traditional dynamic allocators such as&#10;  malloc or slab allocators. When initialized, the Pool&#10;  contains &#60;code>size&#60;/code> items of type &#60;code>pool_t&#60;/code>.&#10;  These elements can be removed from the pool for use with &#10;  &#60;code>Pool.get&#60;/code>, and new elements can be placed in&#10;  the pool with &#60;code>Pool.put&#60;/code>. The pool allows &#10;  components to &#60;code>put&#60;/code> elements besides those which&#10;  were obtained with &#60;code>get&#60;/code>. The pool can never have&#10;  more than &#60;code>size&#60;/code> elements in it.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2010-01-20 19:59:07 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="pool_t" ref="0x40b90eb0" loc="53:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="pool_t" scoped="" ref="0x40b90eb0"/></type-var>
        </typedef>
        <constant name="size" ref="0x40bb40b8" loc="53:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
          <component-ref qname="PoolP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="QueueC" loc="42:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
        <short>&#10;  A general FIFO queue component, whose queue has a bounded size.</short>
        <long>&#10;  A general FIFO queue component, whose queue has a bounded size.&#10;&#10;  @author Philip Levis&#10;  @author Geoffrey Mainland&#10;  @date   $Date: 2009-06-25 18:37:24 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="queue_t" ref="0x40bca870" loc="42:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="queue_t" scoped="" ref="0x40bca870"/></type-var>
        </typedef>
        <constant name="QUEUE_SIZE" ref="0x40bcaa98" loc="42:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
          <component-ref qname="QueueC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="LruCtpMsgCacheC" loc="38:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc" abstract="">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc">
        <short>&#10; An LRU cache CTP packet instances, where insertion represents use.</short>
        <long>&#10; An LRU cache CTP packet instances, where insertion represents use.&#10;&#10; @author Philip Levis&#10;</long>
      </documentation>
      <parameters>
        <constant name="CACHE_SIZE" ref="0x40bdf010" loc="38:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc">
          <component-ref qname="LruCtpMsgCacheC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="LruCtpMsgCacheP" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc" abstract="">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
        <short>&#10; An LRU cache that stores the signature of a CTP packet instance.</short>
        <long>&#10; An LRU cache that stores the signature of a CTP packet instance.&#10; An insert operation indicates &#34;use&#34;.  Inserting an element not in&#10; the cache will replace the oldest, and inserting an element already&#10; in the cache will refresh its age.&#10;&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <constant name="size" ref="0x40bdda78" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
          <component-ref qname="LruCtpMsgCacheP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMSenderC" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40c60308" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
          <component-ref qname="AMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="DirectAMSenderC" loc="47:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
        <short>&#10; The virtualized active message send abstraction.</short>
        <long>&#10; The virtualized active message send abstraction. Each instantiation&#10; of AMSenderC has its own queue of depth one. Therefore, it does not&#10; have to contend with other AMSenderC instantiations for queue space.&#10; The underlying implementation schedules the packets in these queues&#10; using some form of fair-share queueing.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40c89df8" loc="47:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
          <component-ref qname="DirectAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMQueueEntryP" loc="43:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc" abstract="" safe="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
        <short>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.</short>
        <long>&#10; Internal AM component that fills in needed packet fields for the &#10; AMSend -> Send transformation.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40c84858" loc="43:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
          <component-ref qname="AMQueueEntryP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMQueueImplP" loc="45:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc" abstract="" safe="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
        <short>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion.</short>
        <long>&#10; An AM send queue that provides a Service Instance pattern for&#10; formatted packets and calls an underlying AMSend in a round-robin&#10; fashion. Used to share L2 bandwidth between different communication&#10; clients.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10;</long>
      </documentation>
      <parameters>
        <constant name="numClients" ref="0x40c9d010" loc="45:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
          <component-ref qname="AMQueueImplP"/>
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="AMReceiverC" loc="43:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
        <short>&#10; The virtualized AM reception abstraction.</short>
        <long>&#10; The virtualized AM reception abstraction.&#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="amId" ref="0x40cc4620" loc="43:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
          <component-ref qname="AMReceiverC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="AMSnooperC" loc="44:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc" abstract="">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
        <short>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node.</short>
        <long>&#10; The virtualization of snooping on overheard packets that are not&#10; destined to this node. &#10;&#10; @author Philip Levis&#10; @date   Jan 16 2006&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40cbb010" loc="44:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
          <component-ref qname="AMSnooperC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CtpRoutingEngineP" loc="107:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc" abstract="">
      <documentation loc="38:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
        <short> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.</short>
        <long> &#10;  The TreeRoutingEngine is responsible for computing the routes for&#10;  collection.  It builds a set of trees rooted at specific nodes (roots) and&#10;  maintains these trees using information provided by the link estimator on&#10;  the quality of one hop links.&#10; &#10;  &#60;p>Each node is part of only one tree at any given time, but there is no&#10;  difference from the node's point of view of which tree it is part. In other&#10;  words, a message is sent towards &#60;i>a&#60;/i> root, but which one is not&#10;  specified. It is assumed that the roots will work together to have all data&#10;  aggregated later if need be.  The tree routing engine's responsibility is&#10;  for each node to find the path with the least number of transmissions to&#10;  any one root.&#10;&#10;  &#60;p>The tree is proactively maintained by periodic beacons sent by each&#10;  node. These beacons are jittered in time to prevent synchronizations in the&#10;  network. All nodes maintain the same &#60;i>average&#60;/i> beacon sending rate&#10;  (defined by BEACON_INTERVAL +- 50%). The beacon contains the node's parent,&#10;  the current hopcount, and the cumulative path quality metric. The metric is&#10;  defined as the parent's metric plus the bidirectional quality of the link&#10;  between the current node and its parent.  The metric represents the&#10;  expected number of transmissions along the path to the root, and is 0 by&#10;  definition at the root.&#10; &#10;  &#60;p>Every time a node receives an update from a neighbor it records the&#10;  information if the node is part of the neighbor table. The neighbor table&#10;  keeps the best candidates for being parents i.e., the nodes with the best&#10;  path metric. The neighbor table does not store the full path metric,&#10;  though. It stores the parent's path metric, and the link quality to the&#10;  parent is only added when the information is needed: (i) when choosing a&#10;  parent and (ii) when choosing a route. The nodes in the neighbor table are&#10;  a subset of the nodes in the link estimator table, as a node is not&#10;  admitted in the neighbor table with an estimate of infinity.&#10; &#10;  &#60;p>There are two uses for the neighbor table, as mentioned above. The first&#10;  one is to select a parent. The parent is just the neighbor with the best&#10;  path metric. It serves to define the node's own path metric and hopcount,&#10;  and the set of child-parent links is what defines the tree. In a sense the&#10;  tree is defined to form a coherent propagation substrate for the path&#10;  metrics. The parent is (re)-selected periodically, immediately before a&#10;  node sends its own beacon, in the updateRouteTask.&#10;  &#10;  &#60;p>The second use is to actually choose a next hop towards any root at&#10;  message forwarding time.  This need not be the current parent, even though&#10;  it is currently implemented as such.&#10;&#10;  &#60;p>The operation of the routing engine has two main tasks and one main&#10;  event: updateRouteTask is called periodically and chooses a new parent;&#10;  sendBeaconTask broadcasts the current route information to the neighbors.&#10;  The main event is the receiving of a neighbor's beacon, which updates the&#10;  neighbor table.&#10;  &#10;  &#60;p> The interface with the ForwardingEngine occurs through the nextHop()&#10;  call.&#10; &#10;  &#60;p> Any node can become a root, and routed messages from a subset of the&#10;  network will be routed towards it. The RootControl interface allows&#10;  setting, unsetting, and querying the root state of a node. By convention,&#10;  when a node is root its hopcount and metric are 0, and the parent is&#10;  itself. A root always has a valid route, to itself.&#10;&#10;  @author Rodrigo Fonseca&#10;  @author Philip Levis (added trickle-like updates)&#10;  Acknowledgment: based on MintRoute, MultiHopLQI, BVR tree construction, Berkeley's MTree&#10;                           &#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;  @see Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="routingTableSize" ref="0x40cde030" loc="107:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
        <constant name="minInterval" ref="0x40cde270" loc="107:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </constant>
        <constant name="maxInterval" ref="0x40cde4b0" loc="107:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
          <component-ref qname="CtpRoutingEngineP"/>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="CollectionSenderC" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc" abstract="">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
        <short>&#10; The virtualized collection sender abstraction.</short>
        <long>&#10; The virtualized collection sender abstraction.&#10;&#10; @author Kyle Jamieson&#10; @author Philip Levis&#10; @date April 25 2006&#10; @see TinyOS Net2-WG&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0x40d9db60" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
          <component-ref qname="CollectionSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionSenderP" loc="34:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc" abstract="">
      <parameters>
        <constant name="collectid" ref="0x40d996a8" loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
          </type-int>
        </constant>
        <constant name="clientid" ref="0x40d998c0" loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc">
          <component-ref qname="CollectionSenderP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
    <component qname="CollectionIdP" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc" abstract="">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <parameters>
        <constant name="collectid" ref="0x40d93378" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc">
          <component-ref qname="CollectionIdP"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
          </type-int>
        </constant>
      </parameters>
      <module/>
    </component>
    <component qname="SerialActiveMessageP" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc" abstract="">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialDispatcherP" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc" abstract="">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="Atm128UartP" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc" abstract="" safe="">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @author Philip Levis &#60;pal@cs.stanford.edu> (maintainer)&#10; @version $Revision: 1.7 $ $Date: 2008-06-23 20:25:15 $&#10;&#10; Modification @ 11/27 (pal): Folded in Alec's reimplementation&#10; from the -devel branch. Fixed bug in RX interrupts, where&#10; they were not enabled on start. Possibly due to alternative&#10; ARC TEP113 implementation that uses UartStream?&#10;</long>
      </documentation>
      <parameters>
      </parameters>
      <module/>
    </component>
    <component qname="SerialAMSenderC" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc" abstract="">
      <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/Serial.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Buonadonna&#10; @author Lewis Girod&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <parameters>
        <constant name="AMId" ref="0x40fc09c0" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
          <component-ref qname="SerialAMSenderC"/>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
        </constant>
      </parameters>
      <configuration/>
    </component>
  </components>
  <interfaces>
    <interface provided="0" name="RootControl" ref="0x40445a58" loc="13:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0x40445a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0x40445c30"/>
        <function-ref name="setRoot" scoped="" ref="0x40445d10"/>
        <function-ref name="unsetRoot" scoped="" ref="0x40445df0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Boot" ref="0x4040ab78" loc="5:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x4040ab78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x4040ad50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Intercept" ref="0x40449630" loc="15:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0x40449630"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x40449808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x404120b0" loc="6:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x404120b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40412288"/>
        <function-ref name="stopDone" scoped="" ref="0x40412368"/>
        <function-ref name="start" scoped="" ref="0x40412448"/>
        <function-ref name="stop" scoped="" ref="0x40412528"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x4042fb20" loc="10:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x4042fb20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4042fcf8"/>
        <function-ref name="getPayload" scoped="" ref="0x4042fdd8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4042feb8"/>
        <function-ref name="cancel" scoped="" ref="0x4040f010"/>
        <function-ref name="sendDone" scoped="" ref="0x4040f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialAMControl" ref="0x40462ca0" loc="20:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialAMControl" scoped="" ref="0x40462ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40462e78"/>
        <function-ref name="stopDone" scoped="" ref="0x40442010"/>
        <function-ref name="start" scoped="" ref="0x404420f0"/>
        <function-ref name="stop" scoped="" ref="0x404421d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioStrengthControl" ref="0x4041c6e8" loc="8:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioStrengthControl" scoped="" ref="0x4041c6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x4041c8c0"/>
        <function-ref name="biasOn" scoped="" ref="0x4041c9a0"/>
        <function-ref name="getRFPower" scoped="" ref="0x4041ca80"/>
        <function-ref name="tuneManual" scoped="" ref="0x4041cb60"/>
        <function-ref name="selectLock" scoped="" ref="0x4041cc40"/>
        <function-ref name="init" scoped="" ref="0x4041cd20"/>
        <function-ref name="getLock" scoped="" ref="0x4041ce00"/>
        <function-ref name="coreOn" scoped="" ref="0x4041cee0"/>
        <function-ref name="txMode" scoped="" ref="0x40411010"/>
        <function-ref name="getLOStatus" scoped="" ref="0x404110f0"/>
        <function-ref name="rxMode" scoped="" ref="0x404111d0"/>
        <function-ref name="off" scoped="" ref="0x404112b0"/>
        <function-ref name="setRFPower" scoped="" ref="0x40411390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RoutingControl" ref="0x40418880" loc="7:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoutingControl" scoped="" ref="0x40418880"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40418a58"/>
        <function-ref name="stop" scoped="" ref="0x40418b38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Receive" ref="0x40443d50" loc="14:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40443d50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40443f28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacket" ref="0x4044f698" loc="17:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacket" scoped="" ref="0x4044f698"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x4044f870"/>
        <function-ref name="payloadLength" scoped="" ref="0x4044f950"/>
        <function-ref name="getPayload" scoped="" ref="0x4044fa30"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4044fb10"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x4044fbf0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4043b298" loc="11:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4043b298"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4043b470"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4043b550"/>
        <function-ref name="led1On" scoped="" ref="0x4043b630"/>
        <function-ref name="led1Toggle" scoped="" ref="0x4043b710"/>
        <function-ref name="led2Toggle" scoped="" ref="0x4043b7f0"/>
        <function-ref name="get" scoped="" ref="0x4043b8d0"/>
        <function-ref name="led1Off" scoped="" ref="0x4043b9b0"/>
        <function-ref name="led2Off" scoped="" ref="0x4043bd30"/>
        <function-ref name="set" scoped="" ref="0x4043ba90"/>
        <function-ref name="led0On" scoped="" ref="0x4043bb70"/>
        <function-ref name="led2On" scoped="" ref="0x4043bc50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialAMSend" ref="0x40462430" loc="19:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialAMSend" scoped="" ref="0x40462430"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40462688"/>
        <function-ref name="getPayload" scoped="" ref="0x40462768"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40462848"/>
        <function-ref name="cancel" scoped="" ref="0x40462928"/>
        <function-ref name="sendDone" scoped="" ref="0x40462a08"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialAMPacket" ref="0x4045c6e8" loc="18:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialAMPacket" scoped="" ref="0x4045c6e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4045c8c0"/>
        <function-ref name="source" scoped="" ref="0x4045c9a0"/>
        <function-ref name="address" scoped="" ref="0x4045ca80"/>
        <function-ref name="destination" scoped="" ref="0x4045cb60"/>
        <function-ref name="setSource" scoped="" ref="0x4045cc40"/>
        <function-ref name="setDestination" scoped="" ref="0x4045cd20"/>
        <function-ref name="type" scoped="" ref="0x4045ce00"/>
        <function-ref name="setType" scoped="" ref="0x4045cee0"/>
        <function-ref name="isForMe" scoped="" ref="0x40444010"/>
        <function-ref name="setGroup" scoped="" ref="0x404440f0"/>
        <function-ref name="localGroup" scoped="" ref="0x404441d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x4043f8e0" loc="12:EasyCollectionC.nc">
      <component-ref qname="EasyCollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4043f8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4043e3d8"/>
        <function-ref name="fired" scoped="" ref="0x4042e678"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4042ed80"/>
        <function-ref name="isOneShot" scoped="" ref="0x4042eb28"/>
        <function-ref name="getdt" scoped="" ref="0x4043e888"/>
        <function-ref name="gett0" scoped="" ref="0x4043e630"/>
        <function-ref name="isRunning" scoped="" ref="0x4042e8d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4043ff08"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4043e0b8"/>
        <function-ref name="startOneShot" scoped="" ref="0x4042e1a0"/>
        <function-ref name="stop" scoped="" ref="0x4042e420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x4048f480" loc="58:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x4048f480"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048f658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x403b9700" loc="57:/root/Projects/tinyos-main-read-only/tos/system/MainC.nc">
      <component-ref qname="MainC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x403b9700"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x403b98d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x40496ea0" loc="52:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x40496ea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048d0c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4048fd88" loc="46:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4048fd88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x40496740" loc="50:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformC.nc">
      <component-ref qname="PlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40496740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40496918"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x404969f8"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40496ad8"/>
        <function-ref name="actualMicro" scoped="" ref="0x40496bb8"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40496c98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MoteInit" ref="0x4048dd58" loc="45:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MoteInit" scoped="" ref="0x4048dd58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40493010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4048d978" loc="44:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4048d978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4048db50"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MeasureClock" ref="0x40493240" loc="46:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformP.nc">
      <component-ref qname="PlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MeasureClock" scoped="" ref="0x40493240"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40493418"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x40498898" loc="18:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x40498898"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40498a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404984c8" loc="17:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformC.nc">
      <component-ref qname="MotePlatformC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404984c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404986a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubInit" ref="0x404a34a8" loc="19:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubInit" scoped="" ref="0x404a34a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a3680"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialIdPin" ref="0x4049fa10" loc="18:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialIdPin" scoped="" ref="0x4049fa10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4049fbe8"/>
        <function-ref name="isInput" scoped="" ref="0x4049fcc8"/>
        <function-ref name="toggle" scoped="" ref="0x4049fda8"/>
        <function-ref name="isOutput" scoped="" ref="0x4049fe88"/>
        <function-ref name="get" scoped="" ref="0x404a3010"/>
        <function-ref name="makeOutput" scoped="" ref="0x404a30f0"/>
        <function-ref name="set" scoped="" ref="0x404a31d0"/>
        <function-ref name="clr" scoped="" ref="0x404a32b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404a44b8" loc="17:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/MotePlatformP.nc">
      <component-ref qname="MotePlatformP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404a44b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a4690"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x4049a498" loc="48:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000InitP.nc">
      <component-ref qname="HplCC1000InitP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x4049a498"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4049a670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PCLK" ref="0x404d0820" loc="62:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PCLK" scoped="" ref="0x404d0820"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d09f8"/>
        <function-ref name="isInput" scoped="" ref="0x404d0ad8"/>
        <function-ref name="toggle" scoped="" ref="0x404d0bb8"/>
        <function-ref name="isOutput" scoped="" ref="0x404d0c98"/>
        <function-ref name="get" scoped="" ref="0x404d0d78"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d0e58"/>
        <function-ref name="set" scoped="" ref="0x404da010"/>
        <function-ref name="clr" scoped="" ref="0x404da0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CHP_OUT" ref="0x404d1428" loc="60:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CHP_OUT" scoped="" ref="0x404d1428"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d1600"/>
        <function-ref name="isInput" scoped="" ref="0x404d16e0"/>
        <function-ref name="toggle" scoped="" ref="0x404d17c0"/>
        <function-ref name="isOutput" scoped="" ref="0x404d18a0"/>
        <function-ref name="get" scoped="" ref="0x404d1980"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d1a60"/>
        <function-ref name="set" scoped="" ref="0x404d1b40"/>
        <function-ref name="clr" scoped="" ref="0x404d1c20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiConfig" ref="0x404dbde8" loc="56:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiConfig" scoped="" ref="0x404dbde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x404d1010"/>
        <function-ref name="getChannel" scoped="" ref="0x404d10f0"/>
        <function-ref name="getPrescaler" scoped="" ref="0x404d11d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PALE" ref="0x404d1e10" loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PALE" scoped="" ref="0x404d1e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404d0010"/>
        <function-ref name="isInput" scoped="" ref="0x404d00f0"/>
        <function-ref name="toggle" scoped="" ref="0x404d01d0"/>
        <function-ref name="isOutput" scoped="" ref="0x404d02b0"/>
        <function-ref name="get" scoped="" ref="0x404d0390"/>
        <function-ref name="makeOutput" scoped="" ref="0x404d0470"/>
        <function-ref name="set" scoped="" ref="0x404d0550"/>
        <function-ref name="clr" scoped="" ref="0x404d0630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404d25f8" loc="54:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404d25f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404d27d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PDATA" ref="0x404da2e8" loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PDATA" scoped="" ref="0x404da2e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404da4c0"/>
        <function-ref name="isInput" scoped="" ref="0x404da5a0"/>
        <function-ref name="toggle" scoped="" ref="0x404da680"/>
        <function-ref name="isOutput" scoped="" ref="0x404da760"/>
        <function-ref name="get" scoped="" ref="0x404da840"/>
        <function-ref name="makeOutput" scoped="" ref="0x404da920"/>
        <function-ref name="set" scoped="" ref="0x404daa00"/>
        <function-ref name="clr" scoped="" ref="0x404daae0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x404dc400" loc="55:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000P.nc">
      <component-ref qname="HplCC1000P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x404dc400"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404dc5d8"/>
        <function-ref name="read" scoped="" ref="0x404dc6b8"/>
        <function-ref name="write" scoped="" ref="0x404dc798"/>
        <function-ref name="getLOCK" scoped="" ref="0x404dc878"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x404ed918" loc="53:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x404ed918"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x404edaf0"/>
        <function-ref name="initSlave" scoped="" ref="0x404edbd0"/>
        <function-ref name="disableIntr" scoped="" ref="0x404edcb0"/>
        <function-ref name="writeByte" scoped="" ref="0x404edd90"/>
        <function-ref name="enableIntr" scoped="" ref="0x404ede70"/>
        <function-ref name="txMode" scoped="" ref="0x404f1010"/>
        <function-ref name="readByte" scoped="" ref="0x404f10f0"/>
        <function-ref name="rxMode" scoped="" ref="0x404f11d0"/>
        <function-ref name="dataReady" scoped="" ref="0x404f12b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiSck" ref="0x404f14f0" loc="56:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiSck" scoped="" ref="0x404f14f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f16c8"/>
        <function-ref name="isInput" scoped="" ref="0x404f17a8"/>
        <function-ref name="toggle" scoped="" ref="0x404f1888"/>
        <function-ref name="isOutput" scoped="" ref="0x404f1968"/>
        <function-ref name="get" scoped="" ref="0x404f1a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f1b28"/>
        <function-ref name="set" scoped="" ref="0x404f1c08"/>
        <function-ref name="clr" scoped="" ref="0x404f1ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PlatformInit" ref="0x404a8598" loc="52:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x404a8598"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x404a8770"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMiso" ref="0x404f1ef0" loc="57:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMiso" scoped="" ref="0x404f1ef0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f00e0"/>
        <function-ref name="isInput" scoped="" ref="0x404f01c0"/>
        <function-ref name="toggle" scoped="" ref="0x404f02a0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f0380"/>
        <function-ref name="get" scoped="" ref="0x404f0460"/>
        <function-ref name="makeOutput" scoped="" ref="0x404f0540"/>
        <function-ref name="set" scoped="" ref="0x404f0620"/>
        <function-ref name="clr" scoped="" ref="0x404f0700"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SpiMosi" ref="0x404f0908" loc="58:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SpiMosi" scoped="" ref="0x404f0908"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404f0ae0"/>
        <function-ref name="isInput" scoped="" ref="0x404f0bc0"/>
        <function-ref name="toggle" scoped="" ref="0x404f0ca0"/>
        <function-ref name="isOutput" scoped="" ref="0x404f0d80"/>
        <function-ref name="get" scoped="" ref="0x404f0e60"/>
        <function-ref name="makeOutput" scoped="" ref="0x404eb010"/>
        <function-ref name="set" scoped="" ref="0x404eb0f0"/>
        <function-ref name="clr" scoped="" ref="0x404eb1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="OC1C" ref="0x404eb3c0" loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000SpiP.nc">
      <component-ref qname="HplCC1000SpiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="OC1C" scoped="" ref="0x404eb3c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x404eb598"/>
        <function-ref name="isInput" scoped="" ref="0x404eb678"/>
        <function-ref name="toggle" scoped="" ref="0x404eb758"/>
        <function-ref name="isOutput" scoped="" ref="0x404eb838"/>
        <function-ref name="get" scoped="" ref="0x404eb918"/>
        <function-ref name="makeOutput" scoped="" ref="0x404eb9f8"/>
        <function-ref name="set" scoped="" ref="0x404ebad8"/>
        <function-ref name="clr" scoped="" ref="0x404ebbb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG0" ref="0x4051dce8" loc="100:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG0" scoped="" ref="0x4051dce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405290e0"/>
        <function-ref name="isInput" scoped="" ref="0x405291c0"/>
        <function-ref name="toggle" scoped="" ref="0x405292a0"/>
        <function-ref name="isOutput" scoped="" ref="0x40529380"/>
        <function-ref name="get" scoped="" ref="0x40529460"/>
        <function-ref name="makeOutput" scoped="" ref="0x40529540"/>
        <function-ref name="set" scoped="" ref="0x40529620"/>
        <function-ref name="clr" scoped="" ref="0x40529700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD1" ref="0x4050f2f0" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD1" scoped="" ref="0x4050f2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050f4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4050f5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4050f688"/>
        <function-ref name="isOutput" scoped="" ref="0x4050f768"/>
        <function-ref name="get" scoped="" ref="0x4050f848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050f928"/>
        <function-ref name="set" scoped="" ref="0x4050fa08"/>
        <function-ref name="clr" scoped="" ref="0x4050fae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE3" ref="0x405178e0" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE3" scoped="" ref="0x405178e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40517ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40517b98"/>
        <function-ref name="toggle" scoped="" ref="0x40517c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40517d58"/>
        <function-ref name="get" scoped="" ref="0x40517e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40517f18"/>
        <function-ref name="set" scoped="" ref="0x40516010"/>
        <function-ref name="clr" scoped="" ref="0x405160f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF3" ref="0x40520a98" loc="94:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF3" scoped="" ref="0x40520a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40520c70"/>
        <function-ref name="isInput" scoped="" ref="0x40520d50"/>
        <function-ref name="toggle" scoped="" ref="0x40520e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40520f10"/>
        <function-ref name="get" scoped="" ref="0x4051f010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051f0f0"/>
        <function-ref name="set" scoped="" ref="0x4051f1d0"/>
        <function-ref name="clr" scoped="" ref="0x4051f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA6" ref="0x40501ea8" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA6" scoped="" ref="0x40501ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405000c0"/>
        <function-ref name="isInput" scoped="" ref="0x405001a0"/>
        <function-ref name="toggle" scoped="" ref="0x40500280"/>
        <function-ref name="isOutput" scoped="" ref="0x40500360"/>
        <function-ref name="get" scoped="" ref="0x40500440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500520"/>
        <function-ref name="set" scoped="" ref="0x40500600"/>
        <function-ref name="clr" scoped="" ref="0x405006e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF1" ref="0x40521670" loc="92:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF1" scoped="" ref="0x40521670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40521848"/>
        <function-ref name="isInput" scoped="" ref="0x40521928"/>
        <function-ref name="toggle" scoped="" ref="0x40521a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40521ae8"/>
        <function-ref name="get" scoped="" ref="0x40521bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40521ca8"/>
        <function-ref name="set" scoped="" ref="0x40521d88"/>
        <function-ref name="clr" scoped="" ref="0x40521e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB0" ref="0x4050d2f0" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB0" scoped="" ref="0x4050d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050d4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4050d5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4050d688"/>
        <function-ref name="isOutput" scoped="" ref="0x4050d768"/>
        <function-ref name="get" scoped="" ref="0x4050d848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050d928"/>
        <function-ref name="set" scoped="" ref="0x4050da08"/>
        <function-ref name="clr" scoped="" ref="0x4050dae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC2" ref="0x40514a98" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC2" scoped="" ref="0x40514a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40514c70"/>
        <function-ref name="isInput" scoped="" ref="0x40514d50"/>
        <function-ref name="toggle" scoped="" ref="0x40514e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40514f10"/>
        <function-ref name="get" scoped="" ref="0x40513010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405130f0"/>
        <function-ref name="set" scoped="" ref="0x405131d0"/>
        <function-ref name="clr" scoped="" ref="0x405132b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD4" ref="0x4051b210" loc="77:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD4" scoped="" ref="0x4051b210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051b3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4051b4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4051b5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4051b688"/>
        <function-ref name="get" scoped="" ref="0x4051b768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051b848"/>
        <function-ref name="set" scoped="" ref="0x4051b928"/>
        <function-ref name="clr" scoped="" ref="0x4051ba08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE6" ref="0x40515750" loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE6" scoped="" ref="0x40515750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40515928"/>
        <function-ref name="isInput" scoped="" ref="0x40515a08"/>
        <function-ref name="toggle" scoped="" ref="0x40515ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40515bc8"/>
        <function-ref name="get" scoped="" ref="0x40515ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40515d88"/>
        <function-ref name="set" scoped="" ref="0x40515e68"/>
        <function-ref name="clr" scoped="" ref="0x40522010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA1" ref="0x40504b18" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA1" scoped="" ref="0x40504b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40504cf0"/>
        <function-ref name="isInput" scoped="" ref="0x40504dd0"/>
        <function-ref name="toggle" scoped="" ref="0x40504eb0"/>
        <function-ref name="isOutput" scoped="" ref="0x40503010"/>
        <function-ref name="get" scoped="" ref="0x405030f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405031d0"/>
        <function-ref name="set" scoped="" ref="0x405032b0"/>
        <function-ref name="clr" scoped="" ref="0x40503390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB3" ref="0x4050a210" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB3" scoped="" ref="0x4050a210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050a3e8"/>
        <function-ref name="isInput" scoped="" ref="0x4050a4c8"/>
        <function-ref name="toggle" scoped="" ref="0x4050a5a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4050a688"/>
        <function-ref name="get" scoped="" ref="0x4050a768"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050a848"/>
        <function-ref name="set" scoped="" ref="0x4050a928"/>
        <function-ref name="clr" scoped="" ref="0x4050aa08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC5" ref="0x405128e0" loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC5" scoped="" ref="0x405128e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40512ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40512b98"/>
        <function-ref name="toggle" scoped="" ref="0x40512c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40512d58"/>
        <function-ref name="get" scoped="" ref="0x40512e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40512f18"/>
        <function-ref name="set" scoped="" ref="0x40511010"/>
        <function-ref name="clr" scoped="" ref="0x405110f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD7" ref="0x405190a0" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD7" scoped="" ref="0x405190a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40519278"/>
        <function-ref name="isInput" scoped="" ref="0x40519358"/>
        <function-ref name="toggle" scoped="" ref="0x40519438"/>
        <function-ref name="isOutput" scoped="" ref="0x40519518"/>
        <function-ref name="get" scoped="" ref="0x405195f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405196d8"/>
        <function-ref name="set" scoped="" ref="0x405197b8"/>
        <function-ref name="clr" scoped="" ref="0x40519898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF6" ref="0x4051e8e0" loc="97:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF6" scoped="" ref="0x4051e8e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051eab8"/>
        <function-ref name="isInput" scoped="" ref="0x4051eb98"/>
        <function-ref name="toggle" scoped="" ref="0x4051ec78"/>
        <function-ref name="isOutput" scoped="" ref="0x4051ed58"/>
        <function-ref name="get" scoped="" ref="0x4051ee38"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051ef18"/>
        <function-ref name="set" scoped="" ref="0x4051d010"/>
        <function-ref name="clr" scoped="" ref="0x4051d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG3" ref="0x40528dc8" loc="103:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG3" scoped="" ref="0x40528dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40527010"/>
        <function-ref name="isInput" scoped="" ref="0x405270f0"/>
        <function-ref name="toggle" scoped="" ref="0x405271d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405272b0"/>
        <function-ref name="get" scoped="" ref="0x40527390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40527470"/>
        <function-ref name="set" scoped="" ref="0x40527550"/>
        <function-ref name="clr" scoped="" ref="0x40527630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE1" ref="0x405184b0" loc="83:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE1" scoped="" ref="0x405184b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40518688"/>
        <function-ref name="isInput" scoped="" ref="0x40518768"/>
        <function-ref name="toggle" scoped="" ref="0x40518848"/>
        <function-ref name="isOutput" scoped="" ref="0x40518928"/>
        <function-ref name="get" scoped="" ref="0x40518a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40518ae8"/>
        <function-ref name="set" scoped="" ref="0x40518bc8"/>
        <function-ref name="clr" scoped="" ref="0x40518ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA4" ref="0x40502a08" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA4" scoped="" ref="0x40502a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40502be0"/>
        <function-ref name="isInput" scoped="" ref="0x40502cc0"/>
        <function-ref name="toggle" scoped="" ref="0x40502da0"/>
        <function-ref name="isOutput" scoped="" ref="0x40502e80"/>
        <function-ref name="get" scoped="" ref="0x40501010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405010f0"/>
        <function-ref name="set" scoped="" ref="0x405011d0"/>
        <function-ref name="clr" scoped="" ref="0x405012b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB6" ref="0x40508210" loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB6" scoped="" ref="0x40508210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405083e8"/>
        <function-ref name="isInput" scoped="" ref="0x405084c8"/>
        <function-ref name="toggle" scoped="" ref="0x405085a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40508688"/>
        <function-ref name="get" scoped="" ref="0x40508768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40508848"/>
        <function-ref name="set" scoped="" ref="0x40508928"/>
        <function-ref name="clr" scoped="" ref="0x40508a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG1" ref="0x40529900" loc="101:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG1" scoped="" ref="0x40529900"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40529ad8"/>
        <function-ref name="isInput" scoped="" ref="0x40529bb8"/>
        <function-ref name="toggle" scoped="" ref="0x40529c98"/>
        <function-ref name="isOutput" scoped="" ref="0x40529d78"/>
        <function-ref name="get" scoped="" ref="0x40529e58"/>
        <function-ref name="makeOutput" scoped="" ref="0x40528010"/>
        <function-ref name="set" scoped="" ref="0x405280f0"/>
        <function-ref name="clr" scoped="" ref="0x405281d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC0" ref="0x40507670" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC0" scoped="" ref="0x40507670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40507848"/>
        <function-ref name="isInput" scoped="" ref="0x40507928"/>
        <function-ref name="toggle" scoped="" ref="0x40507a08"/>
        <function-ref name="isOutput" scoped="" ref="0x40507ae8"/>
        <function-ref name="get" scoped="" ref="0x40507bc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40507ca8"/>
        <function-ref name="set" scoped="" ref="0x40507d88"/>
        <function-ref name="clr" scoped="" ref="0x40507e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD2" ref="0x4050fce8" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD2" scoped="" ref="0x4050fce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050fec0"/>
        <function-ref name="isInput" scoped="" ref="0x4050e010"/>
        <function-ref name="toggle" scoped="" ref="0x4050e0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4050e1d0"/>
        <function-ref name="get" scoped="" ref="0x4050e2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050e390"/>
        <function-ref name="set" scoped="" ref="0x4050e470"/>
        <function-ref name="clr" scoped="" ref="0x4050e550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE4" ref="0x405162f0" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE4" scoped="" ref="0x405162f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405164c8"/>
        <function-ref name="isInput" scoped="" ref="0x405165a8"/>
        <function-ref name="toggle" scoped="" ref="0x40516688"/>
        <function-ref name="isOutput" scoped="" ref="0x40516768"/>
        <function-ref name="get" scoped="" ref="0x40516848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40516928"/>
        <function-ref name="set" scoped="" ref="0x40516a08"/>
        <function-ref name="clr" scoped="" ref="0x40516ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF4" ref="0x4051f4b0" loc="95:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF4" scoped="" ref="0x4051f4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051f688"/>
        <function-ref name="isInput" scoped="" ref="0x4051f768"/>
        <function-ref name="toggle" scoped="" ref="0x4051f848"/>
        <function-ref name="isOutput" scoped="" ref="0x4051f928"/>
        <function-ref name="get" scoped="" ref="0x4051fa08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051fae8"/>
        <function-ref name="set" scoped="" ref="0x4051fbc8"/>
        <function-ref name="clr" scoped="" ref="0x4051fca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA7" ref="0x405008e0" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA7" scoped="" ref="0x405008e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40500ab8"/>
        <function-ref name="isInput" scoped="" ref="0x40500b98"/>
        <function-ref name="toggle" scoped="" ref="0x40500c78"/>
        <function-ref name="isOutput" scoped="" ref="0x40500d58"/>
        <function-ref name="get" scoped="" ref="0x40500e38"/>
        <function-ref name="makeOutput" scoped="" ref="0x40500f18"/>
        <function-ref name="set" scoped="" ref="0x4050d010"/>
        <function-ref name="clr" scoped="" ref="0x4050d0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB1" ref="0x4050dce8" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB1" scoped="" ref="0x4050dce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050dec0"/>
        <function-ref name="isInput" scoped="" ref="0x4050b010"/>
        <function-ref name="toggle" scoped="" ref="0x4050b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4050b1d0"/>
        <function-ref name="get" scoped="" ref="0x4050b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050b390"/>
        <function-ref name="set" scoped="" ref="0x4050b470"/>
        <function-ref name="clr" scoped="" ref="0x4050b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC3" ref="0x405134b0" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC3" scoped="" ref="0x405134b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40513688"/>
        <function-ref name="isInput" scoped="" ref="0x40513768"/>
        <function-ref name="toggle" scoped="" ref="0x40513848"/>
        <function-ref name="isOutput" scoped="" ref="0x40513928"/>
        <function-ref name="get" scoped="" ref="0x40513a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40513ae8"/>
        <function-ref name="set" scoped="" ref="0x40513bc8"/>
        <function-ref name="clr" scoped="" ref="0x40513ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD5" ref="0x4051bc08" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD5" scoped="" ref="0x4051bc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051bde0"/>
        <function-ref name="isInput" scoped="" ref="0x4051bec0"/>
        <function-ref name="toggle" scoped="" ref="0x4051a010"/>
        <function-ref name="isOutput" scoped="" ref="0x4051a0f0"/>
        <function-ref name="get" scoped="" ref="0x4051a1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051a2b0"/>
        <function-ref name="set" scoped="" ref="0x4051a390"/>
        <function-ref name="clr" scoped="" ref="0x4051a470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE7" ref="0x40522210" loc="89:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE7" scoped="" ref="0x40522210"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405223e8"/>
        <function-ref name="isInput" scoped="" ref="0x405224c8"/>
        <function-ref name="toggle" scoped="" ref="0x405225a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40522688"/>
        <function-ref name="get" scoped="" ref="0x40522768"/>
        <function-ref name="makeOutput" scoped="" ref="0x40522848"/>
        <function-ref name="set" scoped="" ref="0x40522928"/>
        <function-ref name="clr" scoped="" ref="0x40522a08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA2" ref="0x40503590" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA2" scoped="" ref="0x40503590"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40503768"/>
        <function-ref name="isInput" scoped="" ref="0x40503848"/>
        <function-ref name="toggle" scoped="" ref="0x40503928"/>
        <function-ref name="isOutput" scoped="" ref="0x40503a08"/>
        <function-ref name="get" scoped="" ref="0x40503ae8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40503bc8"/>
        <function-ref name="set" scoped="" ref="0x40503ca8"/>
        <function-ref name="clr" scoped="" ref="0x40503d88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB4" ref="0x4050ac08" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB4" scoped="" ref="0x4050ac08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050ae60"/>
        <function-ref name="isInput" scoped="" ref="0x40509010"/>
        <function-ref name="toggle" scoped="" ref="0x405090f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405091d0"/>
        <function-ref name="get" scoped="" ref="0x405092b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40509390"/>
        <function-ref name="set" scoped="" ref="0x40509470"/>
        <function-ref name="clr" scoped="" ref="0x40509550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC6" ref="0x405112f0" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC6" scoped="" ref="0x405112f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405114c8"/>
        <function-ref name="isInput" scoped="" ref="0x405115a8"/>
        <function-ref name="toggle" scoped="" ref="0x40511688"/>
        <function-ref name="isOutput" scoped="" ref="0x40511768"/>
        <function-ref name="get" scoped="" ref="0x40511848"/>
        <function-ref name="makeOutput" scoped="" ref="0x40511928"/>
        <function-ref name="set" scoped="" ref="0x40511a08"/>
        <function-ref name="clr" scoped="" ref="0x40511ae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF7" ref="0x4051d2f0" loc="98:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF7" scoped="" ref="0x4051d2f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051d4c8"/>
        <function-ref name="isInput" scoped="" ref="0x4051d5a8"/>
        <function-ref name="toggle" scoped="" ref="0x4051d688"/>
        <function-ref name="isOutput" scoped="" ref="0x4051d768"/>
        <function-ref name="get" scoped="" ref="0x4051d848"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051d928"/>
        <function-ref name="set" scoped="" ref="0x4051da08"/>
        <function-ref name="clr" scoped="" ref="0x4051dae8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD0" ref="0x40510750" loc="73:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD0" scoped="" ref="0x40510750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40510a28"/>
        <function-ref name="isInput" scoped="" ref="0x40510b08"/>
        <function-ref name="toggle" scoped="" ref="0x40510be8"/>
        <function-ref name="isOutput" scoped="" ref="0x40510cc8"/>
        <function-ref name="get" scoped="" ref="0x40510da8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40510e88"/>
        <function-ref name="set" scoped="" ref="0x4050f010"/>
        <function-ref name="clr" scoped="" ref="0x4050f0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE2" ref="0x40518ea8" loc="84:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE2" scoped="" ref="0x40518ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405170c0"/>
        <function-ref name="isInput" scoped="" ref="0x405171a0"/>
        <function-ref name="toggle" scoped="" ref="0x40517280"/>
        <function-ref name="isOutput" scoped="" ref="0x40517360"/>
        <function-ref name="get" scoped="" ref="0x40517440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40517520"/>
        <function-ref name="set" scoped="" ref="0x40517600"/>
        <function-ref name="clr" scoped="" ref="0x405176e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF2" ref="0x405200a0" loc="93:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF2" scoped="" ref="0x405200a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40520278"/>
        <function-ref name="isInput" scoped="" ref="0x40520358"/>
        <function-ref name="toggle" scoped="" ref="0x40520438"/>
        <function-ref name="isOutput" scoped="" ref="0x40520518"/>
        <function-ref name="get" scoped="" ref="0x405205f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405206d8"/>
        <function-ref name="set" scoped="" ref="0x405207b8"/>
        <function-ref name="clr" scoped="" ref="0x40520898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG4" ref="0x40527830" loc="104:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG4" scoped="" ref="0x40527830"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40527a08"/>
        <function-ref name="isInput" scoped="" ref="0x40527ae8"/>
        <function-ref name="toggle" scoped="" ref="0x40527bc8"/>
        <function-ref name="isOutput" scoped="" ref="0x40527ca8"/>
        <function-ref name="get" scoped="" ref="0x40527d88"/>
        <function-ref name="makeOutput" scoped="" ref="0x40527e68"/>
        <function-ref name="set" scoped="" ref="0x40526010"/>
        <function-ref name="clr" scoped="" ref="0x405260f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA5" ref="0x405014b0" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA5" scoped="" ref="0x405014b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40501688"/>
        <function-ref name="isInput" scoped="" ref="0x40501768"/>
        <function-ref name="toggle" scoped="" ref="0x40501848"/>
        <function-ref name="isOutput" scoped="" ref="0x40501928"/>
        <function-ref name="get" scoped="" ref="0x40501a08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40501ae8"/>
        <function-ref name="set" scoped="" ref="0x40501bc8"/>
        <function-ref name="clr" scoped="" ref="0x40501ca8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB7" ref="0x40508c08" loc="62:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB7" scoped="" ref="0x40508c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40508de0"/>
        <function-ref name="isInput" scoped="" ref="0x40508ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40507010"/>
        <function-ref name="isOutput" scoped="" ref="0x405070f0"/>
        <function-ref name="get" scoped="" ref="0x405071d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405072b0"/>
        <function-ref name="set" scoped="" ref="0x40507390"/>
        <function-ref name="clr" scoped="" ref="0x40507470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF0" ref="0x40522c08" loc="91:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF0" scoped="" ref="0x40522c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40522de0"/>
        <function-ref name="isInput" scoped="" ref="0x40522ec0"/>
        <function-ref name="toggle" scoped="" ref="0x40521010"/>
        <function-ref name="isOutput" scoped="" ref="0x405210f0"/>
        <function-ref name="get" scoped="" ref="0x405211d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405212b0"/>
        <function-ref name="set" scoped="" ref="0x40521390"/>
        <function-ref name="clr" scoped="" ref="0x40521470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC1" ref="0x405140a0" loc="65:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC1" scoped="" ref="0x405140a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40514278"/>
        <function-ref name="isInput" scoped="" ref="0x40514358"/>
        <function-ref name="toggle" scoped="" ref="0x40514438"/>
        <function-ref name="isOutput" scoped="" ref="0x40514518"/>
        <function-ref name="get" scoped="" ref="0x405145f8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405146d8"/>
        <function-ref name="set" scoped="" ref="0x405147b8"/>
        <function-ref name="clr" scoped="" ref="0x40514898"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD3" ref="0x4050e750" loc="76:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD3" scoped="" ref="0x4050e750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050e928"/>
        <function-ref name="isInput" scoped="" ref="0x4050ea08"/>
        <function-ref name="toggle" scoped="" ref="0x4050eae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4050ebc8"/>
        <function-ref name="get" scoped="" ref="0x4050eca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050ed88"/>
        <function-ref name="set" scoped="" ref="0x4050ee68"/>
        <function-ref name="clr" scoped="" ref="0x4051b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE5" ref="0x40516ce8" loc="87:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE5" scoped="" ref="0x40516ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40516ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40515010"/>
        <function-ref name="toggle" scoped="" ref="0x405150f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405151d0"/>
        <function-ref name="get" scoped="" ref="0x405152b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40515390"/>
        <function-ref name="set" scoped="" ref="0x40515470"/>
        <function-ref name="clr" scoped="" ref="0x40515550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortF5" ref="0x4051fea8" loc="96:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortF5" scoped="" ref="0x4051fea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051e0c0"/>
        <function-ref name="isInput" scoped="" ref="0x4051e1a0"/>
        <function-ref name="toggle" scoped="" ref="0x4051e280"/>
        <function-ref name="isOutput" scoped="" ref="0x4051e360"/>
        <function-ref name="get" scoped="" ref="0x4051e440"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051e520"/>
        <function-ref name="set" scoped="" ref="0x4051e600"/>
        <function-ref name="clr" scoped="" ref="0x4051e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA0" ref="0x40504120" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA0" scoped="" ref="0x40504120"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405042f8"/>
        <function-ref name="isInput" scoped="" ref="0x405043d8"/>
        <function-ref name="toggle" scoped="" ref="0x405044b8"/>
        <function-ref name="isOutput" scoped="" ref="0x40504598"/>
        <function-ref name="get" scoped="" ref="0x40504678"/>
        <function-ref name="makeOutput" scoped="" ref="0x40504758"/>
        <function-ref name="set" scoped="" ref="0x40504838"/>
        <function-ref name="clr" scoped="" ref="0x40504918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB2" ref="0x4050b750" loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB2" scoped="" ref="0x4050b750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4050b928"/>
        <function-ref name="isInput" scoped="" ref="0x4050ba08"/>
        <function-ref name="toggle" scoped="" ref="0x4050bae8"/>
        <function-ref name="isOutput" scoped="" ref="0x4050bbc8"/>
        <function-ref name="get" scoped="" ref="0x4050bca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4050bd88"/>
        <function-ref name="set" scoped="" ref="0x4050be68"/>
        <function-ref name="clr" scoped="" ref="0x4050a010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC4" ref="0x40513ea8" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC4" scoped="" ref="0x40513ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405120c0"/>
        <function-ref name="isInput" scoped="" ref="0x405121a0"/>
        <function-ref name="toggle" scoped="" ref="0x40512280"/>
        <function-ref name="isOutput" scoped="" ref="0x40512360"/>
        <function-ref name="get" scoped="" ref="0x40512440"/>
        <function-ref name="makeOutput" scoped="" ref="0x40512520"/>
        <function-ref name="set" scoped="" ref="0x40512600"/>
        <function-ref name="clr" scoped="" ref="0x405126e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortD6" ref="0x4051a670" loc="79:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortD6" scoped="" ref="0x4051a670"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4051a848"/>
        <function-ref name="isInput" scoped="" ref="0x4051a928"/>
        <function-ref name="toggle" scoped="" ref="0x4051aa08"/>
        <function-ref name="isOutput" scoped="" ref="0x4051aae8"/>
        <function-ref name="get" scoped="" ref="0x4051abc8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4051aca8"/>
        <function-ref name="set" scoped="" ref="0x4051ad88"/>
        <function-ref name="clr" scoped="" ref="0x4051ae68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortG2" ref="0x405283d0" loc="102:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortG2" scoped="" ref="0x405283d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405285a8"/>
        <function-ref name="isInput" scoped="" ref="0x40528688"/>
        <function-ref name="toggle" scoped="" ref="0x40528768"/>
        <function-ref name="isOutput" scoped="" ref="0x40528848"/>
        <function-ref name="get" scoped="" ref="0x40528928"/>
        <function-ref name="makeOutput" scoped="" ref="0x40528a08"/>
        <function-ref name="set" scoped="" ref="0x40528ae8"/>
        <function-ref name="clr" scoped="" ref="0x40528bc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortE0" ref="0x40519a98" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortE0" scoped="" ref="0x40519a98"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40519c70"/>
        <function-ref name="isInput" scoped="" ref="0x40519d50"/>
        <function-ref name="toggle" scoped="" ref="0x40519e30"/>
        <function-ref name="isOutput" scoped="" ref="0x40519f10"/>
        <function-ref name="get" scoped="" ref="0x40518010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405180f0"/>
        <function-ref name="set" scoped="" ref="0x405181d0"/>
        <function-ref name="clr" scoped="" ref="0x405182b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortC7" ref="0x40511ce8" loc="71:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortC7" scoped="" ref="0x40511ce8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40511ec0"/>
        <function-ref name="isInput" scoped="" ref="0x40510010"/>
        <function-ref name="toggle" scoped="" ref="0x405100f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405101d0"/>
        <function-ref name="get" scoped="" ref="0x405102b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40510390"/>
        <function-ref name="set" scoped="" ref="0x40510470"/>
        <function-ref name="clr" scoped="" ref="0x40510550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortA3" ref="0x40502010" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortA3" scoped="" ref="0x40502010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405021e8"/>
        <function-ref name="isInput" scoped="" ref="0x405022c8"/>
        <function-ref name="toggle" scoped="" ref="0x405023a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40502488"/>
        <function-ref name="get" scoped="" ref="0x40502568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40502648"/>
        <function-ref name="set" scoped="" ref="0x40502728"/>
        <function-ref name="clr" scoped="" ref="0x40502808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PortB5" ref="0x40509750" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOC.nc">
      <component-ref qname="HplAtm128GeneralIOC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PortB5" scoped="" ref="0x40509750"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40509928"/>
        <function-ref name="isInput" scoped="" ref="0x40509a08"/>
        <function-ref name="toggle" scoped="" ref="0x40509ae8"/>
        <function-ref name="isOutput" scoped="" ref="0x40509bc8"/>
        <function-ref name="get" scoped="" ref="0x40509ca8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40509d88"/>
        <function-ref name="set" scoped="" ref="0x40509e68"/>
        <function-ref name="clr" scoped="" ref="0x40508010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40553e48" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40553e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40552050"/>
        <function-ref name="isInput" scoped="" ref="0x40552130"/>
        <function-ref name="toggle" scoped="" ref="0x40552210"/>
        <function-ref name="isOutput" scoped="" ref="0x405522f0"/>
        <function-ref name="get" scoped="" ref="0x405523d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405524b0"/>
        <function-ref name="set" scoped="" ref="0x40552590"/>
        <function-ref name="clr" scoped="" ref="0x40552670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40551ac8" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40551ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40551ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40551d80"/>
        <function-ref name="toggle" scoped="" ref="0x40551e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40550010"/>
        <function-ref name="get" scoped="" ref="0x405500f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405501d0"/>
        <function-ref name="set" scoped="" ref="0x405502b0"/>
        <function-ref name="clr" scoped="" ref="0x40550390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40554b18" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40554b18"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40554cf0"/>
        <function-ref name="isInput" scoped="" ref="0x40554dd0"/>
        <function-ref name="toggle" scoped="" ref="0x40554eb0"/>
        <function-ref name="isOutput" scoped="" ref="0x40553010"/>
        <function-ref name="get" scoped="" ref="0x405530f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405531d0"/>
        <function-ref name="set" scoped="" ref="0x405532b0"/>
        <function-ref name="clr" scoped="" ref="0x40553390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x405527d0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x405527d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405529a8"/>
        <function-ref name="isInput" scoped="" ref="0x40552a88"/>
        <function-ref name="toggle" scoped="" ref="0x40552b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40552c48"/>
        <function-ref name="get" scoped="" ref="0x40552d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40552e08"/>
        <function-ref name="set" scoped="" ref="0x40552ee8"/>
        <function-ref name="clr" scoped="" ref="0x40551010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x405504f0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x405504f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405506c8"/>
        <function-ref name="isInput" scoped="" ref="0x405507a8"/>
        <function-ref name="toggle" scoped="" ref="0x40550888"/>
        <function-ref name="isOutput" scoped="" ref="0x40550968"/>
        <function-ref name="get" scoped="" ref="0x40550a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40550b28"/>
        <function-ref name="set" scoped="" ref="0x40550c08"/>
        <function-ref name="clr" scoped="" ref="0x40550ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x405534f0" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x405534f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405536c8"/>
        <function-ref name="isInput" scoped="" ref="0x405537a8"/>
        <function-ref name="toggle" scoped="" ref="0x40553888"/>
        <function-ref name="isOutput" scoped="" ref="0x40553968"/>
        <function-ref name="get" scoped="" ref="0x40553a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40553b28"/>
        <function-ref name="set" scoped="" ref="0x40553c08"/>
        <function-ref name="clr" scoped="" ref="0x40553ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40551170" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40551170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40551348"/>
        <function-ref name="isInput" scoped="" ref="0x40551428"/>
        <function-ref name="toggle" scoped="" ref="0x40551508"/>
        <function-ref name="isOutput" scoped="" ref="0x405515e8"/>
        <function-ref name="get" scoped="" ref="0x405516c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405517a8"/>
        <function-ref name="set" scoped="" ref="0x40551888"/>
        <function-ref name="clr" scoped="" ref="0x40551968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40550e48" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40550e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4054f050"/>
        <function-ref name="isInput" scoped="" ref="0x4054f130"/>
        <function-ref name="toggle" scoped="" ref="0x4054f210"/>
        <function-ref name="isOutput" scoped="" ref="0x4054f2f0"/>
        <function-ref name="get" scoped="" ref="0x4054f3d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4054f4b0"/>
        <function-ref name="set" scoped="" ref="0x4054f590"/>
        <function-ref name="clr" scoped="" ref="0x4054f670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41001010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41001010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410011e8"/>
        <function-ref name="isInput" scoped="" ref="0x410012c8"/>
        <function-ref name="toggle" scoped="" ref="0x410013a8"/>
        <function-ref name="isOutput" scoped="" ref="0x41001488"/>
        <function-ref name="get" scoped="" ref="0x41001568"/>
        <function-ref name="makeOutput" scoped="" ref="0x41001648"/>
        <function-ref name="set" scoped="" ref="0x41001728"/>
        <function-ref name="clr" scoped="" ref="0x41001808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410009e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410009e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41000bc0"/>
        <function-ref name="isInput" scoped="" ref="0x41000ca0"/>
        <function-ref name="toggle" scoped="" ref="0x41000d80"/>
        <function-ref name="isOutput" scoped="" ref="0x41000e60"/>
        <function-ref name="get" scoped="" ref="0x40fff010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40fff0f0"/>
        <function-ref name="set" scoped="" ref="0x40fff1d0"/>
        <function-ref name="clr" scoped="" ref="0x40fff2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ffe538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ffe538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ffe710"/>
        <function-ref name="isInput" scoped="" ref="0x40ffe7f0"/>
        <function-ref name="toggle" scoped="" ref="0x40ffe8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ffe9b0"/>
        <function-ref name="get" scoped="" ref="0x40ffea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ffeb70"/>
        <function-ref name="set" scoped="" ref="0x40ffec50"/>
        <function-ref name="clr" scoped="" ref="0x40ffed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ffc010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ffc010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ffc1e8"/>
        <function-ref name="isInput" scoped="" ref="0x40ffc2c8"/>
        <function-ref name="toggle" scoped="" ref="0x40ffc3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40ffc488"/>
        <function-ref name="get" scoped="" ref="0x40ffc568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ffc648"/>
        <function-ref name="set" scoped="" ref="0x40ffc728"/>
        <function-ref name="clr" scoped="" ref="0x40ffc808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ffb9e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ffb9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ffbbc0"/>
        <function-ref name="isInput" scoped="" ref="0x40ffbca0"/>
        <function-ref name="toggle" scoped="" ref="0x40ffbd80"/>
        <function-ref name="isOutput" scoped="" ref="0x40ffbe60"/>
        <function-ref name="get" scoped="" ref="0x40ffa010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ffa0f0"/>
        <function-ref name="set" scoped="" ref="0x40ffa1d0"/>
        <function-ref name="clr" scoped="" ref="0x40ffa2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ff9538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ff9538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ff9710"/>
        <function-ref name="isInput" scoped="" ref="0x40ff97f0"/>
        <function-ref name="toggle" scoped="" ref="0x40ff98d0"/>
        <function-ref name="isOutput" scoped="" ref="0x40ff99b0"/>
        <function-ref name="get" scoped="" ref="0x40ff9a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ff9b70"/>
        <function-ref name="set" scoped="" ref="0x40ff9c50"/>
        <function-ref name="clr" scoped="" ref="0x40ff9d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ff7010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ff7010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ff71e8"/>
        <function-ref name="isInput" scoped="" ref="0x40ff72c8"/>
        <function-ref name="toggle" scoped="" ref="0x40ff73a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40ff7488"/>
        <function-ref name="get" scoped="" ref="0x40ff7568"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ff7648"/>
        <function-ref name="set" scoped="" ref="0x40ff7728"/>
        <function-ref name="clr" scoped="" ref="0x40ff7808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40ff69e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortA.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40ff69e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40ff6bc0"/>
        <function-ref name="isInput" scoped="" ref="0x40ff6ca0"/>
        <function-ref name="toggle" scoped="" ref="0x40ff6d80"/>
        <function-ref name="isOutput" scoped="" ref="0x40ff6e60"/>
        <function-ref name="get" scoped="" ref="0x40ff5010"/>
        <function-ref name="makeOutput" scoped="" ref="0x40ff50f0"/>
        <function-ref name="set" scoped="" ref="0x40ff51d0"/>
        <function-ref name="clr" scoped="" ref="0x40ff52b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4055b6b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4055b6b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055b888"/>
        <function-ref name="isInput" scoped="" ref="0x4055b968"/>
        <function-ref name="toggle" scoped="" ref="0x4055ba48"/>
        <function-ref name="isOutput" scoped="" ref="0x4055bb28"/>
        <function-ref name="get" scoped="" ref="0x4055bc08"/>
        <function-ref name="makeOutput" scoped="" ref="0x4055bce8"/>
        <function-ref name="set" scoped="" ref="0x4055bdc8"/>
        <function-ref name="clr" scoped="" ref="0x4055bea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40558330" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40558330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40558508"/>
        <function-ref name="isInput" scoped="" ref="0x405585e8"/>
        <function-ref name="toggle" scoped="" ref="0x405586c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405587a8"/>
        <function-ref name="get" scoped="" ref="0x40558888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40558968"/>
        <function-ref name="set" scoped="" ref="0x40558a48"/>
        <function-ref name="clr" scoped="" ref="0x40558b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4055c3d8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4055c3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055c5b0"/>
        <function-ref name="isInput" scoped="" ref="0x4055c690"/>
        <function-ref name="toggle" scoped="" ref="0x4055c770"/>
        <function-ref name="isOutput" scoped="" ref="0x4055c850"/>
        <function-ref name="get" scoped="" ref="0x4055c930"/>
        <function-ref name="makeOutput" scoped="" ref="0x4055ca10"/>
        <function-ref name="set" scoped="" ref="0x4055caf0"/>
        <function-ref name="clr" scoped="" ref="0x4055cbd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40559030" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40559030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40559208"/>
        <function-ref name="isInput" scoped="" ref="0x405592e8"/>
        <function-ref name="toggle" scoped="" ref="0x405593c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405594a8"/>
        <function-ref name="get" scoped="" ref="0x40559588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40559668"/>
        <function-ref name="set" scoped="" ref="0x40559748"/>
        <function-ref name="clr" scoped="" ref="0x40559828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40558c88" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40558c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40558e60"/>
        <function-ref name="isInput" scoped="" ref="0x40557010"/>
        <function-ref name="toggle" scoped="" ref="0x405570f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405571d0"/>
        <function-ref name="get" scoped="" ref="0x405572b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40557390"/>
        <function-ref name="set" scoped="" ref="0x40557470"/>
        <function-ref name="clr" scoped="" ref="0x40557550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4055cd30" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4055cd30"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055cf08"/>
        <function-ref name="isInput" scoped="" ref="0x4055b010"/>
        <function-ref name="toggle" scoped="" ref="0x4055b0f0"/>
        <function-ref name="isOutput" scoped="" ref="0x4055b1d0"/>
        <function-ref name="get" scoped="" ref="0x4055b2b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4055b390"/>
        <function-ref name="set" scoped="" ref="0x4055b470"/>
        <function-ref name="clr" scoped="" ref="0x4055b550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40559988" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40559988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40559b60"/>
        <function-ref name="isInput" scoped="" ref="0x40559c40"/>
        <function-ref name="toggle" scoped="" ref="0x40559d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40559e00"/>
        <function-ref name="get" scoped="" ref="0x40559ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40558010"/>
        <function-ref name="set" scoped="" ref="0x405580f0"/>
        <function-ref name="clr" scoped="" ref="0x405581d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x405576b0" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x405576b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40557888"/>
        <function-ref name="isInput" scoped="" ref="0x40557968"/>
        <function-ref name="toggle" scoped="" ref="0x40557a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40557b28"/>
        <function-ref name="get" scoped="" ref="0x40557c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40557ce8"/>
        <function-ref name="set" scoped="" ref="0x40557dc8"/>
        <function-ref name="clr" scoped="" ref="0x40557ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41007de8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41007de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4103d010"/>
        <function-ref name="isInput" scoped="" ref="0x4103d0f0"/>
        <function-ref name="toggle" scoped="" ref="0x4103d1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4103d2b0"/>
        <function-ref name="get" scoped="" ref="0x4103d390"/>
        <function-ref name="makeOutput" scoped="" ref="0x4103d470"/>
        <function-ref name="set" scoped="" ref="0x4103d550"/>
        <function-ref name="clr" scoped="" ref="0x4103d630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4103c7f8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4103c7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4103c9d0"/>
        <function-ref name="isInput" scoped="" ref="0x4103cab0"/>
        <function-ref name="toggle" scoped="" ref="0x4103cb90"/>
        <function-ref name="isOutput" scoped="" ref="0x4103cc70"/>
        <function-ref name="get" scoped="" ref="0x4103cd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x4103ce30"/>
        <function-ref name="set" scoped="" ref="0x4103cf10"/>
        <function-ref name="clr" scoped="" ref="0x4103b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4103a228" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4103a228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4103a400"/>
        <function-ref name="isInput" scoped="" ref="0x4103a4e0"/>
        <function-ref name="toggle" scoped="" ref="0x4103a5c0"/>
        <function-ref name="isOutput" scoped="" ref="0x4103a6a0"/>
        <function-ref name="get" scoped="" ref="0x4103a780"/>
        <function-ref name="makeOutput" scoped="" ref="0x4103a860"/>
        <function-ref name="set" scoped="" ref="0x4103a940"/>
        <function-ref name="clr" scoped="" ref="0x4103aa20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41039c08" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41039c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41039de0"/>
        <function-ref name="isInput" scoped="" ref="0x41039ec0"/>
        <function-ref name="toggle" scoped="" ref="0x41038010"/>
        <function-ref name="isOutput" scoped="" ref="0x410380f0"/>
        <function-ref name="get" scoped="" ref="0x410381d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x410382b0"/>
        <function-ref name="set" scoped="" ref="0x41038390"/>
        <function-ref name="clr" scoped="" ref="0x41038470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410376c0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410376c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41037898"/>
        <function-ref name="isInput" scoped="" ref="0x41037978"/>
        <function-ref name="toggle" scoped="" ref="0x41037a58"/>
        <function-ref name="isOutput" scoped="" ref="0x41037b38"/>
        <function-ref name="get" scoped="" ref="0x41037c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x41037cf8"/>
        <function-ref name="set" scoped="" ref="0x41037dd8"/>
        <function-ref name="clr" scoped="" ref="0x41037eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410350b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410350b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41035288"/>
        <function-ref name="isInput" scoped="" ref="0x41035368"/>
        <function-ref name="toggle" scoped="" ref="0x41035448"/>
        <function-ref name="isOutput" scoped="" ref="0x41035528"/>
        <function-ref name="get" scoped="" ref="0x41035608"/>
        <function-ref name="makeOutput" scoped="" ref="0x410356e8"/>
        <function-ref name="set" scoped="" ref="0x410357c8"/>
        <function-ref name="clr" scoped="" ref="0x410358a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41034a88" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41034a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41034c60"/>
        <function-ref name="isInput" scoped="" ref="0x41034d40"/>
        <function-ref name="toggle" scoped="" ref="0x41034e20"/>
        <function-ref name="isOutput" scoped="" ref="0x41034f00"/>
        <function-ref name="get" scoped="" ref="0x41033010"/>
        <function-ref name="makeOutput" scoped="" ref="0x410330f0"/>
        <function-ref name="set" scoped="" ref="0x410331d0"/>
        <function-ref name="clr" scoped="" ref="0x410332b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41032538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortB.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41032538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41032710"/>
        <function-ref name="isInput" scoped="" ref="0x410327f0"/>
        <function-ref name="toggle" scoped="" ref="0x410328d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410329b0"/>
        <function-ref name="get" scoped="" ref="0x41032a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x41032b70"/>
        <function-ref name="set" scoped="" ref="0x41032c50"/>
        <function-ref name="clr" scoped="" ref="0x41032d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40562170" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40562170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40562348"/>
        <function-ref name="isInput" scoped="" ref="0x40562428"/>
        <function-ref name="toggle" scoped="" ref="0x40562508"/>
        <function-ref name="isOutput" scoped="" ref="0x405625e8"/>
        <function-ref name="get" scoped="" ref="0x405626c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405627a8"/>
        <function-ref name="set" scoped="" ref="0x40562888"/>
        <function-ref name="clr" scoped="" ref="0x40562968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40561e48" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40561e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40560050"/>
        <function-ref name="isInput" scoped="" ref="0x40560130"/>
        <function-ref name="toggle" scoped="" ref="0x40560210"/>
        <function-ref name="isOutput" scoped="" ref="0x405602f0"/>
        <function-ref name="get" scoped="" ref="0x405603d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405604b0"/>
        <function-ref name="set" scoped="" ref="0x40560590"/>
        <function-ref name="clr" scoped="" ref="0x40560670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40564dc8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40564dc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40563010"/>
        <function-ref name="isInput" scoped="" ref="0x405630f0"/>
        <function-ref name="toggle" scoped="" ref="0x405631d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405632b0"/>
        <function-ref name="get" scoped="" ref="0x40563390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40563470"/>
        <function-ref name="set" scoped="" ref="0x40563550"/>
        <function-ref name="clr" scoped="" ref="0x40563630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40562ac8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40562ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40562ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40562d80"/>
        <function-ref name="toggle" scoped="" ref="0x40562e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40561010"/>
        <function-ref name="get" scoped="" ref="0x405610f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405611d0"/>
        <function-ref name="set" scoped="" ref="0x405612b0"/>
        <function-ref name="clr" scoped="" ref="0x40561390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x405607d0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x405607d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405609a8"/>
        <function-ref name="isInput" scoped="" ref="0x40560a88"/>
        <function-ref name="toggle" scoped="" ref="0x40560b68"/>
        <function-ref name="isOutput" scoped="" ref="0x40560c48"/>
        <function-ref name="get" scoped="" ref="0x40560d28"/>
        <function-ref name="makeOutput" scoped="" ref="0x40560e08"/>
        <function-ref name="set" scoped="" ref="0x40560ee8"/>
        <function-ref name="clr" scoped="" ref="0x4055f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40563790" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40563790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40563968"/>
        <function-ref name="isInput" scoped="" ref="0x40563a48"/>
        <function-ref name="toggle" scoped="" ref="0x40563b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40563c08"/>
        <function-ref name="get" scoped="" ref="0x40563ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40563dc8"/>
        <function-ref name="set" scoped="" ref="0x40563ea8"/>
        <function-ref name="clr" scoped="" ref="0x40562010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x405614f0" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x405614f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405616c8"/>
        <function-ref name="isInput" scoped="" ref="0x405617a8"/>
        <function-ref name="toggle" scoped="" ref="0x40561888"/>
        <function-ref name="isOutput" scoped="" ref="0x40561968"/>
        <function-ref name="get" scoped="" ref="0x40561a48"/>
        <function-ref name="makeOutput" scoped="" ref="0x40561b28"/>
        <function-ref name="set" scoped="" ref="0x40561c08"/>
        <function-ref name="clr" scoped="" ref="0x40561ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4055f170" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4055f170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4055f348"/>
        <function-ref name="isInput" scoped="" ref="0x4055f428"/>
        <function-ref name="toggle" scoped="" ref="0x4055f508"/>
        <function-ref name="isOutput" scoped="" ref="0x4055f5e8"/>
        <function-ref name="get" scoped="" ref="0x4055f6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4055f7a8"/>
        <function-ref name="set" scoped="" ref="0x4055f888"/>
        <function-ref name="clr" scoped="" ref="0x4055f968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4103f938" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4103f938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4103fb10"/>
        <function-ref name="isInput" scoped="" ref="0x4103fbf0"/>
        <function-ref name="toggle" scoped="" ref="0x4103fcd0"/>
        <function-ref name="isOutput" scoped="" ref="0x4103fdb0"/>
        <function-ref name="get" scoped="" ref="0x4103fe90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4103e010"/>
        <function-ref name="set" scoped="" ref="0x4103e0f0"/>
        <function-ref name="clr" scoped="" ref="0x4103e1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410783b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410783b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41078588"/>
        <function-ref name="isInput" scoped="" ref="0x41078668"/>
        <function-ref name="toggle" scoped="" ref="0x41078748"/>
        <function-ref name="isOutput" scoped="" ref="0x41078828"/>
        <function-ref name="get" scoped="" ref="0x41078908"/>
        <function-ref name="makeOutput" scoped="" ref="0x410789e8"/>
        <function-ref name="set" scoped="" ref="0x41078ac8"/>
        <function-ref name="clr" scoped="" ref="0x41078ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41077d70" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41077d70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41076010"/>
        <function-ref name="isInput" scoped="" ref="0x410760f0"/>
        <function-ref name="toggle" scoped="" ref="0x410761d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410762b0"/>
        <function-ref name="get" scoped="" ref="0x41076390"/>
        <function-ref name="makeOutput" scoped="" ref="0x41076470"/>
        <function-ref name="set" scoped="" ref="0x41076550"/>
        <function-ref name="clr" scoped="" ref="0x41076630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410757f8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410757f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410759d0"/>
        <function-ref name="isInput" scoped="" ref="0x41075ab0"/>
        <function-ref name="toggle" scoped="" ref="0x41075b90"/>
        <function-ref name="isOutput" scoped="" ref="0x41075c70"/>
        <function-ref name="get" scoped="" ref="0x41075d50"/>
        <function-ref name="makeOutput" scoped="" ref="0x41075e30"/>
        <function-ref name="set" scoped="" ref="0x41075f10"/>
        <function-ref name="clr" scoped="" ref="0x41074010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41073228" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41073228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41073400"/>
        <function-ref name="isInput" scoped="" ref="0x410734e0"/>
        <function-ref name="toggle" scoped="" ref="0x410735c0"/>
        <function-ref name="isOutput" scoped="" ref="0x410736a0"/>
        <function-ref name="get" scoped="" ref="0x41073780"/>
        <function-ref name="makeOutput" scoped="" ref="0x41073860"/>
        <function-ref name="set" scoped="" ref="0x41073940"/>
        <function-ref name="clr" scoped="" ref="0x41073a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41072c08" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41072c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41072de0"/>
        <function-ref name="isInput" scoped="" ref="0x41072ec0"/>
        <function-ref name="toggle" scoped="" ref="0x41071010"/>
        <function-ref name="isOutput" scoped="" ref="0x410710f0"/>
        <function-ref name="get" scoped="" ref="0x410711d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x410712b0"/>
        <function-ref name="set" scoped="" ref="0x41071390"/>
        <function-ref name="clr" scoped="" ref="0x41071470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410706c0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410706c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41070898"/>
        <function-ref name="isInput" scoped="" ref="0x41070978"/>
        <function-ref name="toggle" scoped="" ref="0x41070a58"/>
        <function-ref name="isOutput" scoped="" ref="0x41070b38"/>
        <function-ref name="get" scoped="" ref="0x41070c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x41070cf8"/>
        <function-ref name="set" scoped="" ref="0x41070dd8"/>
        <function-ref name="clr" scoped="" ref="0x41070eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4106e0b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortC.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4106e0b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4106e288"/>
        <function-ref name="isInput" scoped="" ref="0x4106e368"/>
        <function-ref name="toggle" scoped="" ref="0x4106e448"/>
        <function-ref name="isOutput" scoped="" ref="0x4106e528"/>
        <function-ref name="get" scoped="" ref="0x4106e608"/>
        <function-ref name="makeOutput" scoped="" ref="0x4106e6e8"/>
        <function-ref name="set" scoped="" ref="0x4106e7c8"/>
        <function-ref name="clr" scoped="" ref="0x4106e8a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4056a9e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4056a9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056abc0"/>
        <function-ref name="isInput" scoped="" ref="0x4056aca0"/>
        <function-ref name="toggle" scoped="" ref="0x4056ad80"/>
        <function-ref name="isOutput" scoped="" ref="0x4056ae60"/>
        <function-ref name="get" scoped="" ref="0x40569010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405690f0"/>
        <function-ref name="set" scoped="" ref="0x405691d0"/>
        <function-ref name="clr" scoped="" ref="0x405692b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40568790" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40568790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40568968"/>
        <function-ref name="isInput" scoped="" ref="0x40568a48"/>
        <function-ref name="toggle" scoped="" ref="0x40568b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40568c08"/>
        <function-ref name="get" scoped="" ref="0x40568ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40568dc8"/>
        <function-ref name="set" scoped="" ref="0x40568ea8"/>
        <function-ref name="clr" scoped="" ref="0x40567010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4056b6f8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4056b6f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056b8d0"/>
        <function-ref name="isInput" scoped="" ref="0x4056b9b0"/>
        <function-ref name="toggle" scoped="" ref="0x4056ba90"/>
        <function-ref name="isOutput" scoped="" ref="0x4056bb70"/>
        <function-ref name="get" scoped="" ref="0x4056bc50"/>
        <function-ref name="makeOutput" scoped="" ref="0x4056bd30"/>
        <function-ref name="set" scoped="" ref="0x4056be10"/>
        <function-ref name="clr" scoped="" ref="0x4056bef0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40569410" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40569410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405695e8"/>
        <function-ref name="isInput" scoped="" ref="0x405696c8"/>
        <function-ref name="toggle" scoped="" ref="0x405697a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40569888"/>
        <function-ref name="get" scoped="" ref="0x40569968"/>
        <function-ref name="makeOutput" scoped="" ref="0x40569a48"/>
        <function-ref name="set" scoped="" ref="0x40569b28"/>
        <function-ref name="clr" scoped="" ref="0x40569c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40567170" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40567170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40567348"/>
        <function-ref name="isInput" scoped="" ref="0x40567428"/>
        <function-ref name="toggle" scoped="" ref="0x40567508"/>
        <function-ref name="isOutput" scoped="" ref="0x405675e8"/>
        <function-ref name="get" scoped="" ref="0x405676c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405677a8"/>
        <function-ref name="set" scoped="" ref="0x40567888"/>
        <function-ref name="clr" scoped="" ref="0x40567968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4056a090" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4056a090"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056a268"/>
        <function-ref name="isInput" scoped="" ref="0x4056a348"/>
        <function-ref name="toggle" scoped="" ref="0x4056a428"/>
        <function-ref name="isOutput" scoped="" ref="0x4056a508"/>
        <function-ref name="get" scoped="" ref="0x4056a5e8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4056a6c8"/>
        <function-ref name="set" scoped="" ref="0x4056a7a8"/>
        <function-ref name="clr" scoped="" ref="0x4056a888"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40569d68" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40569d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40568010"/>
        <function-ref name="isInput" scoped="" ref="0x405680f0"/>
        <function-ref name="toggle" scoped="" ref="0x405681d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405682b0"/>
        <function-ref name="get" scoped="" ref="0x40568390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40568470"/>
        <function-ref name="set" scoped="" ref="0x40568550"/>
        <function-ref name="clr" scoped="" ref="0x40568630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40567ac8" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40567ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40567ca0"/>
        <function-ref name="isInput" scoped="" ref="0x40567d80"/>
        <function-ref name="toggle" scoped="" ref="0x40567e60"/>
        <function-ref name="isOutput" scoped="" ref="0x40566010"/>
        <function-ref name="get" scoped="" ref="0x405660f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405661d0"/>
        <function-ref name="set" scoped="" ref="0x405662b0"/>
        <function-ref name="clr" scoped="" ref="0x40566390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4107e538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4107e538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4107e710"/>
        <function-ref name="isInput" scoped="" ref="0x4107e7f0"/>
        <function-ref name="toggle" scoped="" ref="0x4107e8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x4107e9b0"/>
        <function-ref name="get" scoped="" ref="0x4107ea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x4107eb70"/>
        <function-ref name="set" scoped="" ref="0x4107ec50"/>
        <function-ref name="clr" scoped="" ref="0x4107ed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4107c010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4107c010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4107c1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4107c2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4107c3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4107c488"/>
        <function-ref name="get" scoped="" ref="0x4107c568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4107c648"/>
        <function-ref name="set" scoped="" ref="0x4107c728"/>
        <function-ref name="clr" scoped="" ref="0x4107c808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4107b9e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4107b9e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4107bbc0"/>
        <function-ref name="isInput" scoped="" ref="0x4107bca0"/>
        <function-ref name="toggle" scoped="" ref="0x4107bd80"/>
        <function-ref name="isOutput" scoped="" ref="0x4107be60"/>
        <function-ref name="get" scoped="" ref="0x4107a010"/>
        <function-ref name="makeOutput" scoped="" ref="0x4107a0f0"/>
        <function-ref name="set" scoped="" ref="0x4107a1d0"/>
        <function-ref name="clr" scoped="" ref="0x4107a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41079538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41079538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41079710"/>
        <function-ref name="isInput" scoped="" ref="0x410797f0"/>
        <function-ref name="toggle" scoped="" ref="0x410798d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410799b0"/>
        <function-ref name="get" scoped="" ref="0x41079a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x41079b70"/>
        <function-ref name="set" scoped="" ref="0x41079c50"/>
        <function-ref name="clr" scoped="" ref="0x41079d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b3010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b3010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b31e8"/>
        <function-ref name="isInput" scoped="" ref="0x410b32c8"/>
        <function-ref name="toggle" scoped="" ref="0x410b33a8"/>
        <function-ref name="isOutput" scoped="" ref="0x410b3488"/>
        <function-ref name="get" scoped="" ref="0x410b3568"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b3648"/>
        <function-ref name="set" scoped="" ref="0x410b3728"/>
        <function-ref name="clr" scoped="" ref="0x410b3808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b29e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b29e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b2bc0"/>
        <function-ref name="isInput" scoped="" ref="0x410b2ca0"/>
        <function-ref name="toggle" scoped="" ref="0x410b2d80"/>
        <function-ref name="isOutput" scoped="" ref="0x410b2e60"/>
        <function-ref name="get" scoped="" ref="0x410b1010"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b10f0"/>
        <function-ref name="set" scoped="" ref="0x410b11d0"/>
        <function-ref name="clr" scoped="" ref="0x410b12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b0538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b0538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b0710"/>
        <function-ref name="isInput" scoped="" ref="0x410b07f0"/>
        <function-ref name="toggle" scoped="" ref="0x410b08d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410b09b0"/>
        <function-ref name="get" scoped="" ref="0x410b0a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b0b70"/>
        <function-ref name="set" scoped="" ref="0x410b0c50"/>
        <function-ref name="clr" scoped="" ref="0x410b0d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410ae010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortD.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410ae010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410ae1e8"/>
        <function-ref name="isInput" scoped="" ref="0x410ae2c8"/>
        <function-ref name="toggle" scoped="" ref="0x410ae3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x410ae488"/>
        <function-ref name="get" scoped="" ref="0x410ae568"/>
        <function-ref name="makeOutput" scoped="" ref="0x410ae648"/>
        <function-ref name="set" scoped="" ref="0x410ae728"/>
        <function-ref name="clr" scoped="" ref="0x410ae808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x40571410" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x40571410"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405715e8"/>
        <function-ref name="isInput" scoped="" ref="0x405716c8"/>
        <function-ref name="toggle" scoped="" ref="0x405717a8"/>
        <function-ref name="isOutput" scoped="" ref="0x40571888"/>
        <function-ref name="get" scoped="" ref="0x40571968"/>
        <function-ref name="makeOutput" scoped="" ref="0x40571a48"/>
        <function-ref name="set" scoped="" ref="0x40571b28"/>
        <function-ref name="clr" scoped="" ref="0x40571c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x4056f170" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x4056f170"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056f348"/>
        <function-ref name="isInput" scoped="" ref="0x4056f428"/>
        <function-ref name="toggle" scoped="" ref="0x4056f508"/>
        <function-ref name="isOutput" scoped="" ref="0x4056f5e8"/>
        <function-ref name="get" scoped="" ref="0x4056f6c8"/>
        <function-ref name="makeOutput" scoped="" ref="0x4056f7a8"/>
        <function-ref name="set" scoped="" ref="0x4056f888"/>
        <function-ref name="clr" scoped="" ref="0x4056f968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x40572128" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x40572128"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40572300"/>
        <function-ref name="isInput" scoped="" ref="0x405723e0"/>
        <function-ref name="toggle" scoped="" ref="0x405724c0"/>
        <function-ref name="isOutput" scoped="" ref="0x405725a0"/>
        <function-ref name="get" scoped="" ref="0x40572680"/>
        <function-ref name="makeOutput" scoped="" ref="0x40572760"/>
        <function-ref name="set" scoped="" ref="0x40572840"/>
        <function-ref name="clr" scoped="" ref="0x40572920"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x40571d68" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x40571d68"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40570010"/>
        <function-ref name="isInput" scoped="" ref="0x405700f0"/>
        <function-ref name="toggle" scoped="" ref="0x405701d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405702b0"/>
        <function-ref name="get" scoped="" ref="0x40570390"/>
        <function-ref name="makeOutput" scoped="" ref="0x40570470"/>
        <function-ref name="set" scoped="" ref="0x40570550"/>
        <function-ref name="clr" scoped="" ref="0x40570630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x4056fac8" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x4056fac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056fca0"/>
        <function-ref name="isInput" scoped="" ref="0x4056fd80"/>
        <function-ref name="toggle" scoped="" ref="0x4056fe60"/>
        <function-ref name="isOutput" scoped="" ref="0x4056e010"/>
        <function-ref name="get" scoped="" ref="0x4056e0f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4056e1d0"/>
        <function-ref name="set" scoped="" ref="0x4056e2b0"/>
        <function-ref name="clr" scoped="" ref="0x4056e390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x40572a80" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x40572a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40572c58"/>
        <function-ref name="isInput" scoped="" ref="0x40572d38"/>
        <function-ref name="toggle" scoped="" ref="0x40572e18"/>
        <function-ref name="isOutput" scoped="" ref="0x40572ef8"/>
        <function-ref name="get" scoped="" ref="0x40571010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405710f0"/>
        <function-ref name="set" scoped="" ref="0x405711d0"/>
        <function-ref name="clr" scoped="" ref="0x405712b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40570790" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40570790"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40570968"/>
        <function-ref name="isInput" scoped="" ref="0x40570a48"/>
        <function-ref name="toggle" scoped="" ref="0x40570b28"/>
        <function-ref name="isOutput" scoped="" ref="0x40570c08"/>
        <function-ref name="get" scoped="" ref="0x40570ce8"/>
        <function-ref name="makeOutput" scoped="" ref="0x40570dc8"/>
        <function-ref name="set" scoped="" ref="0x40570ea8"/>
        <function-ref name="clr" scoped="" ref="0x4056f010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x4056e4f0" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x4056e4f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4056e6c8"/>
        <function-ref name="isInput" scoped="" ref="0x4056e7a8"/>
        <function-ref name="toggle" scoped="" ref="0x4056e888"/>
        <function-ref name="isOutput" scoped="" ref="0x4056e968"/>
        <function-ref name="get" scoped="" ref="0x4056ea48"/>
        <function-ref name="makeOutput" scoped="" ref="0x4056eb28"/>
        <function-ref name="set" scoped="" ref="0x4056ec08"/>
        <function-ref name="clr" scoped="" ref="0x4056ece8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410bec20" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410bec20"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410bedf8"/>
        <function-ref name="isInput" scoped="" ref="0x410beed8"/>
        <function-ref name="toggle" scoped="" ref="0x410bc010"/>
        <function-ref name="isOutput" scoped="" ref="0x410bc0f0"/>
        <function-ref name="get" scoped="" ref="0x410bc1d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x410bc2b0"/>
        <function-ref name="set" scoped="" ref="0x410bc390"/>
        <function-ref name="clr" scoped="" ref="0x410bc470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410bb6c0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410bb6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410bb898"/>
        <function-ref name="isInput" scoped="" ref="0x410bb978"/>
        <function-ref name="toggle" scoped="" ref="0x410bba58"/>
        <function-ref name="isOutput" scoped="" ref="0x410bbb38"/>
        <function-ref name="get" scoped="" ref="0x410bbc18"/>
        <function-ref name="makeOutput" scoped="" ref="0x410bbcf8"/>
        <function-ref name="set" scoped="" ref="0x410bbdd8"/>
        <function-ref name="clr" scoped="" ref="0x410bbeb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b90b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b90b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b9288"/>
        <function-ref name="isInput" scoped="" ref="0x410b9368"/>
        <function-ref name="toggle" scoped="" ref="0x410b9448"/>
        <function-ref name="isOutput" scoped="" ref="0x410b9528"/>
        <function-ref name="get" scoped="" ref="0x410b9608"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b96e8"/>
        <function-ref name="set" scoped="" ref="0x410b97c8"/>
        <function-ref name="clr" scoped="" ref="0x410b98a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b8a88" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b8a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b8c60"/>
        <function-ref name="isInput" scoped="" ref="0x410b8d40"/>
        <function-ref name="toggle" scoped="" ref="0x410b8e20"/>
        <function-ref name="isOutput" scoped="" ref="0x410b8f00"/>
        <function-ref name="get" scoped="" ref="0x410b7010"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b70f0"/>
        <function-ref name="set" scoped="" ref="0x410b71d0"/>
        <function-ref name="clr" scoped="" ref="0x410b72b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410b6538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410b6538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410b6710"/>
        <function-ref name="isInput" scoped="" ref="0x410b67f0"/>
        <function-ref name="toggle" scoped="" ref="0x410b68d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410b69b0"/>
        <function-ref name="get" scoped="" ref="0x410b6a90"/>
        <function-ref name="makeOutput" scoped="" ref="0x410b6b70"/>
        <function-ref name="set" scoped="" ref="0x410b6c50"/>
        <function-ref name="clr" scoped="" ref="0x410b6d30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f1010" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f1010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f11e8"/>
        <function-ref name="isInput" scoped="" ref="0x410f12c8"/>
        <function-ref name="toggle" scoped="" ref="0x410f13a8"/>
        <function-ref name="isOutput" scoped="" ref="0x410f1488"/>
        <function-ref name="get" scoped="" ref="0x410f1568"/>
        <function-ref name="makeOutput" scoped="" ref="0x410f1648"/>
        <function-ref name="set" scoped="" ref="0x410f1728"/>
        <function-ref name="clr" scoped="" ref="0x410f1808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f09e8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f09e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f0bc0"/>
        <function-ref name="isInput" scoped="" ref="0x410f0ca0"/>
        <function-ref name="toggle" scoped="" ref="0x410f0d80"/>
        <function-ref name="isOutput" scoped="" ref="0x410f0e60"/>
        <function-ref name="get" scoped="" ref="0x410ef010"/>
        <function-ref name="makeOutput" scoped="" ref="0x410ef0f0"/>
        <function-ref name="set" scoped="" ref="0x410ef1d0"/>
        <function-ref name="clr" scoped="" ref="0x410ef2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410ee538" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortE.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410ee538"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410ee710"/>
        <function-ref name="isInput" scoped="" ref="0x410ee7f0"/>
        <function-ref name="toggle" scoped="" ref="0x410ee8d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410ee9b0"/>
        <function-ref name="get" scoped="" ref="0x410eea90"/>
        <function-ref name="makeOutput" scoped="" ref="0x410eeb70"/>
        <function-ref name="set" scoped="" ref="0x410eec50"/>
        <function-ref name="clr" scoped="" ref="0x410eed30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin2" ref="0x4057ac88" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin2" scoped="" ref="0x4057ac88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4057ae60"/>
        <function-ref name="isInput" scoped="" ref="0x40579010"/>
        <function-ref name="toggle" scoped="" ref="0x405790f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405791d0"/>
        <function-ref name="get" scoped="" ref="0x405792b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40579390"/>
        <function-ref name="set" scoped="" ref="0x40579470"/>
        <function-ref name="clr" scoped="" ref="0x40579550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin5" ref="0x40577988" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin5" scoped="" ref="0x40577988"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40577b60"/>
        <function-ref name="isInput" scoped="" ref="0x40577c40"/>
        <function-ref name="toggle" scoped="" ref="0x40577d20"/>
        <function-ref name="isOutput" scoped="" ref="0x40577e00"/>
        <function-ref name="get" scoped="" ref="0x40577ee0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40576010"/>
        <function-ref name="set" scoped="" ref="0x405760f0"/>
        <function-ref name="clr" scoped="" ref="0x405761d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin0" ref="0x4057b9c0" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin0" scoped="" ref="0x4057b9c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4057bb98"/>
        <function-ref name="isInput" scoped="" ref="0x4057bc78"/>
        <function-ref name="toggle" scoped="" ref="0x4057bd58"/>
        <function-ref name="isOutput" scoped="" ref="0x4057be38"/>
        <function-ref name="get" scoped="" ref="0x4057bf18"/>
        <function-ref name="makeOutput" scoped="" ref="0x4057a010"/>
        <function-ref name="set" scoped="" ref="0x4057a0f0"/>
        <function-ref name="clr" scoped="" ref="0x4057a1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin3" ref="0x405796b0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin3" scoped="" ref="0x405796b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40579888"/>
        <function-ref name="isInput" scoped="" ref="0x40579968"/>
        <function-ref name="toggle" scoped="" ref="0x40579a48"/>
        <function-ref name="isOutput" scoped="" ref="0x40579b28"/>
        <function-ref name="get" scoped="" ref="0x40579c08"/>
        <function-ref name="makeOutput" scoped="" ref="0x40579ce8"/>
        <function-ref name="set" scoped="" ref="0x40579dc8"/>
        <function-ref name="clr" scoped="" ref="0x40579ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin6" ref="0x40576330" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin6" scoped="" ref="0x40576330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40576508"/>
        <function-ref name="isInput" scoped="" ref="0x405765e8"/>
        <function-ref name="toggle" scoped="" ref="0x405766c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405767a8"/>
        <function-ref name="get" scoped="" ref="0x40576888"/>
        <function-ref name="makeOutput" scoped="" ref="0x40576968"/>
        <function-ref name="set" scoped="" ref="0x40576a48"/>
        <function-ref name="clr" scoped="" ref="0x40576b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin1" ref="0x4057a330" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin1" scoped="" ref="0x4057a330"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4057a508"/>
        <function-ref name="isInput" scoped="" ref="0x4057a5e8"/>
        <function-ref name="toggle" scoped="" ref="0x4057a6c8"/>
        <function-ref name="isOutput" scoped="" ref="0x4057a7a8"/>
        <function-ref name="get" scoped="" ref="0x4057a888"/>
        <function-ref name="makeOutput" scoped="" ref="0x4057a968"/>
        <function-ref name="set" scoped="" ref="0x4057aa48"/>
        <function-ref name="clr" scoped="" ref="0x4057ab28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin4" ref="0x40577030" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin4" scoped="" ref="0x40577030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40577208"/>
        <function-ref name="isInput" scoped="" ref="0x405772e8"/>
        <function-ref name="toggle" scoped="" ref="0x405773c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405774a8"/>
        <function-ref name="get" scoped="" ref="0x40577588"/>
        <function-ref name="makeOutput" scoped="" ref="0x40577668"/>
        <function-ref name="set" scoped="" ref="0x40577748"/>
        <function-ref name="clr" scoped="" ref="0x40577828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pin7" ref="0x40576c88" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPortP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pin7" scoped="" ref="0x40576c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40576e60"/>
        <function-ref name="isInput" scoped="" ref="0x40575010"/>
        <function-ref name="toggle" scoped="" ref="0x405750f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405751d0"/>
        <function-ref name="get" scoped="" ref="0x405752b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40575390"/>
        <function-ref name="set" scoped="" ref="0x40575470"/>
        <function-ref name="clr" scoped="" ref="0x40575550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x41100938" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x41100938"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x41100b10"/>
        <function-ref name="isInput" scoped="" ref="0x41100bf0"/>
        <function-ref name="toggle" scoped="" ref="0x41100cd0"/>
        <function-ref name="isOutput" scoped="" ref="0x41100db0"/>
        <function-ref name="get" scoped="" ref="0x41100e90"/>
        <function-ref name="makeOutput" scoped="" ref="0x410ff010"/>
        <function-ref name="set" scoped="" ref="0x410ff0f0"/>
        <function-ref name="clr" scoped="" ref="0x410ff1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410fe3b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410fe3b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410fe588"/>
        <function-ref name="isInput" scoped="" ref="0x410fe668"/>
        <function-ref name="toggle" scoped="" ref="0x410fe748"/>
        <function-ref name="isOutput" scoped="" ref="0x410fe828"/>
        <function-ref name="get" scoped="" ref="0x410fe908"/>
        <function-ref name="makeOutput" scoped="" ref="0x410fe9e8"/>
        <function-ref name="set" scoped="" ref="0x410feac8"/>
        <function-ref name="clr" scoped="" ref="0x410feba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410fdd70" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410fdd70"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410fc010"/>
        <function-ref name="isInput" scoped="" ref="0x410fc0f0"/>
        <function-ref name="toggle" scoped="" ref="0x410fc1d0"/>
        <function-ref name="isOutput" scoped="" ref="0x410fc2b0"/>
        <function-ref name="get" scoped="" ref="0x410fc390"/>
        <function-ref name="makeOutput" scoped="" ref="0x410fc470"/>
        <function-ref name="set" scoped="" ref="0x410fc550"/>
        <function-ref name="clr" scoped="" ref="0x410fc630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410fb7f8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410fb7f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410fb9d0"/>
        <function-ref name="isInput" scoped="" ref="0x410fbab0"/>
        <function-ref name="toggle" scoped="" ref="0x410fbb90"/>
        <function-ref name="isOutput" scoped="" ref="0x410fbc70"/>
        <function-ref name="get" scoped="" ref="0x410fbd50"/>
        <function-ref name="makeOutput" scoped="" ref="0x410fbe30"/>
        <function-ref name="set" scoped="" ref="0x410fbf10"/>
        <function-ref name="clr" scoped="" ref="0x410fa010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f9228" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f9228"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f9400"/>
        <function-ref name="isInput" scoped="" ref="0x410f94e0"/>
        <function-ref name="toggle" scoped="" ref="0x410f95c0"/>
        <function-ref name="isOutput" scoped="" ref="0x410f96a0"/>
        <function-ref name="get" scoped="" ref="0x410f9780"/>
        <function-ref name="makeOutput" scoped="" ref="0x410f9860"/>
        <function-ref name="set" scoped="" ref="0x410f9940"/>
        <function-ref name="clr" scoped="" ref="0x410f9a20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f8c08" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f8c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f8de0"/>
        <function-ref name="isInput" scoped="" ref="0x410f8ec0"/>
        <function-ref name="toggle" scoped="" ref="0x410f6010"/>
        <function-ref name="isOutput" scoped="" ref="0x410f60f0"/>
        <function-ref name="get" scoped="" ref="0x410f61d0"/>
        <function-ref name="makeOutput" scoped="" ref="0x410f62b0"/>
        <function-ref name="set" scoped="" ref="0x410f6390"/>
        <function-ref name="clr" scoped="" ref="0x410f6470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f56c0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f56c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f5898"/>
        <function-ref name="isInput" scoped="" ref="0x410f5978"/>
        <function-ref name="toggle" scoped="" ref="0x410f5a58"/>
        <function-ref name="isOutput" scoped="" ref="0x410f5b38"/>
        <function-ref name="get" scoped="" ref="0x410f5c18"/>
        <function-ref name="makeOutput" scoped="" ref="0x410f5cf8"/>
        <function-ref name="set" scoped="" ref="0x410f5dd8"/>
        <function-ref name="clr" scoped="" ref="0x410f5eb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x410f30b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.PortF.Bit7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x410f30b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x410f3288"/>
        <function-ref name="isInput" scoped="" ref="0x410f3368"/>
        <function-ref name="toggle" scoped="" ref="0x410f3448"/>
        <function-ref name="isOutput" scoped="" ref="0x410f3528"/>
        <function-ref name="get" scoped="" ref="0x410f3608"/>
        <function-ref name="makeOutput" scoped="" ref="0x410f36e8"/>
        <function-ref name="set" scoped="" ref="0x410f37c8"/>
        <function-ref name="clr" scoped="" ref="0x410f38a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40582ca0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40582ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40582e78"/>
        <function-ref name="isInput" scoped="" ref="0x40581010"/>
        <function-ref name="toggle" scoped="" ref="0x405810f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405811d0"/>
        <function-ref name="get" scoped="" ref="0x405812b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40581390"/>
        <function-ref name="set" scoped="" ref="0x40581470"/>
        <function-ref name="clr" scoped="" ref="0x40581550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405933b0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405933b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40593588"/>
        <function-ref name="isInput" scoped="" ref="0x40593668"/>
        <function-ref name="toggle" scoped="" ref="0x40593748"/>
        <function-ref name="isOutput" scoped="" ref="0x40593828"/>
        <function-ref name="get" scoped="" ref="0x40593908"/>
        <function-ref name="makeOutput" scoped="" ref="0x405939e8"/>
        <function-ref name="set" scoped="" ref="0x40593ac8"/>
        <function-ref name="clr" scoped="" ref="0x40593ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40590978" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40590978"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40590b50"/>
        <function-ref name="isInput" scoped="" ref="0x40590c30"/>
        <function-ref name="toggle" scoped="" ref="0x40590d10"/>
        <function-ref name="isOutput" scoped="" ref="0x40590df0"/>
        <function-ref name="get" scoped="" ref="0x40590ed0"/>
        <function-ref name="makeOutput" scoped="" ref="0x4058f010"/>
        <function-ref name="set" scoped="" ref="0x4058f0f0"/>
        <function-ref name="clr" scoped="" ref="0x4058f1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4058d010" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4058d010"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4058d1e8"/>
        <function-ref name="isInput" scoped="" ref="0x4058d2c8"/>
        <function-ref name="toggle" scoped="" ref="0x4058d3a8"/>
        <function-ref name="isOutput" scoped="" ref="0x4058d488"/>
        <function-ref name="get" scoped="" ref="0x4058d568"/>
        <function-ref name="makeOutput" scoped="" ref="0x4058d648"/>
        <function-ref name="set" scoped="" ref="0x4058d728"/>
        <function-ref name="clr" scoped="" ref="0x4058d808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4059b5e8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4059b5e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4059b7c0"/>
        <function-ref name="isInput" scoped="" ref="0x4059b8a0"/>
        <function-ref name="toggle" scoped="" ref="0x4059b980"/>
        <function-ref name="isOutput" scoped="" ref="0x4059ba60"/>
        <function-ref name="get" scoped="" ref="0x4059bb40"/>
        <function-ref name="makeOutput" scoped="" ref="0x4059bc20"/>
        <function-ref name="set" scoped="" ref="0x4059bd00"/>
        <function-ref name="clr" scoped="" ref="0x4059bde0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x40598cb8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F5"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x40598cb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40598e90"/>
        <function-ref name="isInput" scoped="" ref="0x40597010"/>
        <function-ref name="toggle" scoped="" ref="0x405970f0"/>
        <function-ref name="isOutput" scoped="" ref="0x405971d0"/>
        <function-ref name="get" scoped="" ref="0x405972b0"/>
        <function-ref name="makeOutput" scoped="" ref="0x40597390"/>
        <function-ref name="set" scoped="" ref="0x40597470"/>
        <function-ref name="clr" scoped="" ref="0x40597550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405953b0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F6"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405953b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x40595588"/>
        <function-ref name="isInput" scoped="" ref="0x40595668"/>
        <function-ref name="toggle" scoped="" ref="0x40595748"/>
        <function-ref name="isOutput" scoped="" ref="0x40595828"/>
        <function-ref name="get" scoped="" ref="0x40595908"/>
        <function-ref name="makeOutput" scoped="" ref="0x405959e8"/>
        <function-ref name="set" scoped="" ref="0x40595ac8"/>
        <function-ref name="clr" scoped="" ref="0x40595ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405a2978" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.F7"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405a2978"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405a2b50"/>
        <function-ref name="isInput" scoped="" ref="0x405a2c30"/>
        <function-ref name="toggle" scoped="" ref="0x405a2d10"/>
        <function-ref name="isOutput" scoped="" ref="0x405a2df0"/>
        <function-ref name="get" scoped="" ref="0x405a2ed0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405a1010"/>
        <function-ref name="set" scoped="" ref="0x405a10f0"/>
        <function-ref name="clr" scoped="" ref="0x405a11d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405a0ee0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G0"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405a0ee0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4059f0e0"/>
        <function-ref name="isInput" scoped="" ref="0x4059f1c0"/>
        <function-ref name="toggle" scoped="" ref="0x4059f2a0"/>
        <function-ref name="isOutput" scoped="" ref="0x4059f380"/>
        <function-ref name="get" scoped="" ref="0x4059f460"/>
        <function-ref name="makeOutput" scoped="" ref="0x4059f540"/>
        <function-ref name="set" scoped="" ref="0x4059f620"/>
        <function-ref name="clr" scoped="" ref="0x4059f700"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x4059d3e8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G1"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x4059d3e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x4059d5c0"/>
        <function-ref name="isInput" scoped="" ref="0x4059d6a0"/>
        <function-ref name="toggle" scoped="" ref="0x4059d780"/>
        <function-ref name="isOutput" scoped="" ref="0x4059d860"/>
        <function-ref name="get" scoped="" ref="0x4059d940"/>
        <function-ref name="makeOutput" scoped="" ref="0x4059da20"/>
        <function-ref name="set" scoped="" ref="0x4059db00"/>
        <function-ref name="clr" scoped="" ref="0x4059dbe0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405aa8f0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G2"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405aa8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405aaac8"/>
        <function-ref name="isInput" scoped="" ref="0x405aaba8"/>
        <function-ref name="toggle" scoped="" ref="0x405aac88"/>
        <function-ref name="isOutput" scoped="" ref="0x405aad68"/>
        <function-ref name="get" scoped="" ref="0x405aae48"/>
        <function-ref name="makeOutput" scoped="" ref="0x405aaf28"/>
        <function-ref name="set" scoped="" ref="0x405a9018"/>
        <function-ref name="clr" scoped="" ref="0x405a90f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405a8dd8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G3"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405a8dd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405a7010"/>
        <function-ref name="isInput" scoped="" ref="0x405a70f0"/>
        <function-ref name="toggle" scoped="" ref="0x405a71d0"/>
        <function-ref name="isOutput" scoped="" ref="0x405a72b0"/>
        <function-ref name="get" scoped="" ref="0x405a7390"/>
        <function-ref name="makeOutput" scoped="" ref="0x405a7470"/>
        <function-ref name="set" scoped="" ref="0x405a7550"/>
        <function-ref name="clr" scoped="" ref="0x405a7630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="IO" ref="0x405a53b0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/pins/HplAtm128GeneralIOSlowPinP.nc">
      <component-ref qname="HplAtm128GeneralIOC.G4"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="IO" scoped="" ref="0x405a53b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405a5588"/>
        <function-ref name="isInput" scoped="" ref="0x405a5668"/>
        <function-ref name="toggle" scoped="" ref="0x405a5748"/>
        <function-ref name="isOutput" scoped="" ref="0x405a5828"/>
        <function-ref name="get" scoped="" ref="0x405a5908"/>
        <function-ref name="makeOutput" scoped="" ref="0x405a59e8"/>
        <function-ref name="set" scoped="" ref="0x405a5ac8"/>
        <function-ref name="clr" scoped="" ref="0x405a5ba8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405cc6d8" loc="27:/root/Projects/tinyos-main-read-only/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405cc6d8"/></type-interface>
      <attribute-value>
        <attribute-ref name="exactlyonce" ref="0x403197d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="exactlyonce" ref="0x403197d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405cc8b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128Calibrate" ref="0x405cca88" loc="28:/root/Projects/tinyos-main-read-only/tos/platforms/mica/MeasureClockC.nc">
      <component-ref qname="MeasureClockC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x405cca88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x405ccc60"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x405ccd40"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x405cce20"/>
        <function-ref name="actualMicro" scoped="" ref="0x405ccf00"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x405cb010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SoftwareInit" ref="0x405ddda8" loc="60:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SoftwareInit" scoped="" ref="0x405ddda8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405dc010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Boot" ref="0x405dd040" loc="57:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Boot" scoped="" ref="0x405dd040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Boot"/>
      </instance>
      <interface-functions>
        <function-ref name="booted" scoped="" ref="0x405dd218"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PlatformInit" ref="0x405dd9a0" loc="59:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PlatformInit" scoped="" ref="0x405dd9a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405ddb78"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Scheduler" ref="0x405dd3d8" loc="58:/root/Projects/tinyos-main-read-only/tos/system/RealMainP.nc">
      <component-ref qname="RealMainP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x405dd3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405dd5b0"/>
        <function-ref name="taskLoop" scoped="" ref="0x405dd690"/>
        <function-ref name="runNextTask" scoped="" ref="0x405dd770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40322718" loc="48:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40322718"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x403228f0"/>
        <function-ref name="runTask" scoped="" ref="0x403229d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x4031e010" loc="47:/root/Projects/tinyos-main-read-only/tos/system/TinySchedulerC.nc">
      <component-ref qname="TinySchedulerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x4031e010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4031e1e8"/>
        <function-ref name="taskLoop" scoped="" ref="0x4031e2c8"/>
        <function-ref name="runNextTask" scoped="" ref="0x4031e3a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TaskBasic" ref="0x40392670" loc="56:/root/Projects/tinyos-main-read-only/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TaskBasic" scoped="" ref="0x40392670"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40392848"/>
        <function-ref name="runTask" scoped="" ref="0x40392928"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuSleep" ref="0x40397310" loc="57:/root/Projects/tinyos-main-read-only/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x40397310"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x403974e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Scheduler" ref="0x40394df0" loc="55:/root/Projects/tinyos-main-read-only/tos/system/SchedulerBasicP.nc">
      <component-ref qname="SchedulerBasicP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Scheduler" scoped="" ref="0x40394df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Scheduler"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40392010"/>
        <function-ref name="taskLoop" scoped="" ref="0x403920f0"/>
        <function-ref name="runNextTask" scoped="" ref="0x403921d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerOverride" ref="0x403a68a8" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x403a68a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x403a6a80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuSleep" ref="0x4031dbf0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuSleep" scoped="" ref="0x4031dbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuSleep"/>
      </instance>
      <interface-functions>
        <function-ref name="sleep" scoped="" ref="0x4031ddc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerState" ref="0x403a98c0" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/McuSleepC.nc">
      <component-ref qname="McuSleepC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x403a98c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x403a9a98"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x40487c88" loc="46:/root/Projects/tinyos-main-read-only/tos/system/LedsC.nc">
      <component-ref qname="LedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40487c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40487e60"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405e8010"/>
        <function-ref name="led1On" scoped="" ref="0x405e80f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405e81d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405e82b0"/>
        <function-ref name="get" scoped="" ref="0x405e8390"/>
        <function-ref name="led1Off" scoped="" ref="0x405e8470"/>
        <function-ref name="led2Off" scoped="" ref="0x405e87f0"/>
        <function-ref name="set" scoped="" ref="0x405e8550"/>
        <function-ref name="led0On" scoped="" ref="0x405e8630"/>
        <function-ref name="led2On" scoped="" ref="0x405e8710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led0" ref="0x405e4110" loc="50:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405e4110"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e42e8"/>
        <function-ref name="isInput" scoped="" ref="0x405e43c8"/>
        <function-ref name="toggle" scoped="" ref="0x405e44a8"/>
        <function-ref name="isOutput" scoped="" ref="0x405e4588"/>
        <function-ref name="get" scoped="" ref="0x405e4668"/>
        <function-ref name="makeOutput" scoped="" ref="0x405e4748"/>
        <function-ref name="set" scoped="" ref="0x405e4828"/>
        <function-ref name="clr" scoped="" ref="0x405e4908"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x405e50a0" loc="46:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405e50a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x405e5278"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led1" ref="0x405e4af8" loc="51:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405e4af8"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405e4cd0"/>
        <function-ref name="isInput" scoped="" ref="0x405e4db0"/>
        <function-ref name="toggle" scoped="" ref="0x405e4e90"/>
        <function-ref name="isOutput" scoped="" ref="0x405f5010"/>
        <function-ref name="get" scoped="" ref="0x405f50f0"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f51d0"/>
        <function-ref name="set" scoped="" ref="0x405f52b0"/>
        <function-ref name="clr" scoped="" ref="0x405f5390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Leds" ref="0x405e53e8" loc="47:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x405e53e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x405e55c0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x405e56a0"/>
        <function-ref name="led1On" scoped="" ref="0x405e5780"/>
        <function-ref name="led1Toggle" scoped="" ref="0x405e5860"/>
        <function-ref name="led2Toggle" scoped="" ref="0x405e5940"/>
        <function-ref name="get" scoped="" ref="0x405e5a20"/>
        <function-ref name="led1Off" scoped="" ref="0x405e5b00"/>
        <function-ref name="led2Off" scoped="" ref="0x405e5e80"/>
        <function-ref name="set" scoped="" ref="0x405e5be0"/>
        <function-ref name="led0On" scoped="" ref="0x405e5cc0"/>
        <function-ref name="led2On" scoped="" ref="0x405e5da0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Led2" ref="0x405f5580" loc="52:/root/Projects/tinyos-main-read-only/tos/system/LedsP.nc">
      <component-ref qname="LedsP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405f5580"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f5758"/>
        <function-ref name="isInput" scoped="" ref="0x405f5838"/>
        <function-ref name="toggle" scoped="" ref="0x405f5918"/>
        <function-ref name="isOutput" scoped="" ref="0x405f59f8"/>
        <function-ref name="get" scoped="" ref="0x405f5ad8"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f5bb8"/>
        <function-ref name="set" scoped="" ref="0x405f5c98"/>
        <function-ref name="clr" scoped="" ref="0x405f5d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led0" ref="0x405f7030" loc="44:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led0" scoped="" ref="0x405f7030"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f7208"/>
        <function-ref name="isInput" scoped="" ref="0x405f72e8"/>
        <function-ref name="toggle" scoped="" ref="0x405f73c8"/>
        <function-ref name="isOutput" scoped="" ref="0x405f74a8"/>
        <function-ref name="get" scoped="" ref="0x405f7588"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f7668"/>
        <function-ref name="set" scoped="" ref="0x405f7748"/>
        <function-ref name="clr" scoped="" ref="0x405f7828"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led1" ref="0x405f7a38" loc="45:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led1" scoped="" ref="0x405f7a38"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f7c10"/>
        <function-ref name="isInput" scoped="" ref="0x405f7cf0"/>
        <function-ref name="toggle" scoped="" ref="0x405f7dd0"/>
        <function-ref name="isOutput" scoped="" ref="0x405f7eb0"/>
        <function-ref name="get" scoped="" ref="0x405f6010"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f60f0"/>
        <function-ref name="set" scoped="" ref="0x405f61d0"/>
        <function-ref name="clr" scoped="" ref="0x405f62b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Init" ref="0x405f6e48" loc="47:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x405f6e48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40607050"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Led2" ref="0x405f64c0" loc="46:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformLedsC.nc">
      <component-ref qname="PlatformLedsC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Led2" scoped="" ref="0x405f64c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="GeneralIO"/>
      </instance>
      <interface-functions>
        <function-ref name="makeInput" scoped="" ref="0x405f6698"/>
        <function-ref name="isInput" scoped="" ref="0x405f6778"/>
        <function-ref name="toggle" scoped="" ref="0x405f6858"/>
        <function-ref name="isOutput" scoped="" ref="0x405f6938"/>
        <function-ref name="get" scoped="" ref="0x405f6a18"/>
        <function-ref name="makeOutput" scoped="" ref="0x405f6af8"/>
        <function-ref name="set" scoped="" ref="0x405f6bd8"/>
        <function-ref name="clr" scoped="" ref="0x405f6cb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x406040e0" loc="59:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x406040e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x406042b8"/>
        <function-ref name="stopDone" scoped="" ref="0x40604398"/>
        <function-ref name="start" scoped="" ref="0x40604478"/>
        <function-ref name="stop" scoped="" ref="0x40604558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x406049b8" loc="61:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x406049b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40604b90"/>
        <function-ref name="getPayload" scoped="" ref="0x40604c70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40604d50"/>
        <function-ref name="cancel" scoped="" ref="0x40604e30"/>
        <function-ref name="sendDone" scoped="" ref="0x40604f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40603a30" loc="63:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40603a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40603c08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40603d88" loc="65:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40603d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40602010"/>
        <function-ref name="payloadLength" scoped="" ref="0x406020f0"/>
        <function-ref name="getPayload" scoped="" ref="0x406021d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406022b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40602390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x40609c58" loc="69:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x40609c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x406087a0"/>
        <function-ref name="clear" scoped="" ref="0x40608b50"/>
        <function-ref name="isValid" scoped="" ref="0x406083f0"/>
        <function-ref name="set" scoped="" ref="0x40608f00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x40613b30" loc="70:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x40613b30"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x40613d08"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x40613de8"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x40613ec8"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x40618010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40603398" loc="62:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40603398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40603570"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x4060f6c0" loc="67:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x4060f6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x4060f898"/>
        <function-ref name="noAck" scoped="" ref="0x4060f978"/>
        <function-ref name="wasAcked" scoped="" ref="0x4060fa58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40602528" loc="66:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40602528"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40602700"/>
        <function-ref name="source" scoped="" ref="0x406027e0"/>
        <function-ref name="address" scoped="" ref="0x406028c0"/>
        <function-ref name="destination" scoped="" ref="0x406029a0"/>
        <function-ref name="setSource" scoped="" ref="0x40602a80"/>
        <function-ref name="setDestination" scoped="" ref="0x40602b60"/>
        <function-ref name="type" scoped="" ref="0x40602c40"/>
        <function-ref name="setType" scoped="" ref="0x40602d20"/>
        <function-ref name="isForMe" scoped="" ref="0x40602e00"/>
        <function-ref name="setGroup" scoped="" ref="0x40602ee0"/>
        <function-ref name="localGroup" scoped="" ref="0x40601010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x406002a8" loc="68:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/ActiveMessageC.nc">
      <component-ref qname="ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x406002a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x40600da8"/>
        <function-ref name="clear" scoped="" ref="0x40609170"/>
        <function-ref name="isValid" scoped="" ref="0x406009f8"/>
        <function-ref name="set" scoped="" ref="0x40609520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40618930" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40618930"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40618b08"/>
        <function-ref name="stopDone" scoped="" ref="0x40618be8"/>
        <function-ref name="start" scoped="" ref="0x40618cc8"/>
        <function-ref name="stop" scoped="" ref="0x40618da8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x4061eea8" loc="65:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x4061eea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x4061d9c0"/>
        <function-ref name="clear" scoped="" ref="0x4061dd70"/>
        <function-ref name="isValid" scoped="" ref="0x4061d610"/>
        <function-ref name="set" scoped="" ref="0x4061b150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40612238" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40612238"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40612410"/>
        <function-ref name="getPayload" scoped="" ref="0x406124f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406125d0"/>
        <function-ref name="cancel" scoped="" ref="0x406126b0"/>
        <function-ref name="sendDone" scoped="" ref="0x40612790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x406112a8" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x406112a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40611480"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40622270" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40622270"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40622448"/>
        <function-ref name="payloadLength" scoped="" ref="0x40622528"/>
        <function-ref name="getPayload" scoped="" ref="0x40622608"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406226e8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x406227c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x4061f490" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x4061f490"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x4061e010"/>
        <function-ref name="clear" scoped="" ref="0x4061e3c0"/>
        <function-ref name="isValid" scoped="" ref="0x4061fbe0"/>
        <function-ref name="set" scoped="" ref="0x4061e770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x40628de0" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x40628de0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4061a010"/>
        <function-ref name="isSet" scoped="" ref="0x4061a0f0"/>
        <function-ref name="cancel" scoped="" ref="0x4061a1d0"/>
        <function-ref name="set" scoped="" ref="0x4061a2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40612bf8" loc="57:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40612bf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40612dd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x4061a4a0" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x4061a4a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x4061a678"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x4061a758"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x4061a838"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x4061a918"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x406229e8" loc="61:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406229e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40622bc0"/>
        <function-ref name="noAck" scoped="" ref="0x40622ca0"/>
        <function-ref name="wasAcked" scoped="" ref="0x40622d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40611618" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40611618"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x406117f0"/>
        <function-ref name="source" scoped="" ref="0x406118d0"/>
        <function-ref name="address" scoped="" ref="0x406119b0"/>
        <function-ref name="destination" scoped="" ref="0x40611a90"/>
        <function-ref name="setSource" scoped="" ref="0x40611b70"/>
        <function-ref name="setDestination" scoped="" ref="0x40611c50"/>
        <function-ref name="type" scoped="" ref="0x40611d30"/>
        <function-ref name="setType" scoped="" ref="0x40611e10"/>
        <function-ref name="isForMe" scoped="" ref="0x40611ef0"/>
        <function-ref name="setGroup" scoped="" ref="0x40622010"/>
        <function-ref name="localGroup" scoped="" ref="0x406220f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x40620e00" loc="62:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageC.nc">
      <component-ref qname="CC1000ActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40620e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x4061f010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40624768" loc="57:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40624768"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40624940"/>
        <function-ref name="getPayload" scoped="" ref="0x40624a20"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40624b00"/>
        <function-ref name="cancel" scoped="" ref="0x40624be0"/>
        <function-ref name="sendDone" scoped="" ref="0x40624cc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40624ed0" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40624ed0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406230c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40626620" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40626620"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406267f8"/>
        <function-ref name="getPayload" scoped="" ref="0x406268d8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406269b8"/>
        <function-ref name="cancel" scoped="" ref="0x40626a98"/>
        <function-ref name="sendDone" scoped="" ref="0x40626b78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x406256a8" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x406256a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40625880"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x406232a0" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x406232a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40623478"/>
        <function-ref name="payloadLength" scoped="" ref="0x40623558"/>
        <function-ref name="getPayload" scoped="" ref="0x40623638"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40623718"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x406237f8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40625010" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40625010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406251e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40625a18" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ActiveMessageP.nc">
      <component-ref qname="CC1000ActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40625a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40625bf0"/>
        <function-ref name="source" scoped="" ref="0x40625cd0"/>
        <function-ref name="address" scoped="" ref="0x40625db0"/>
        <function-ref name="destination" scoped="" ref="0x40625e90"/>
        <function-ref name="setSource" scoped="" ref="0x40624010"/>
        <function-ref name="setDestination" scoped="" ref="0x406240f0"/>
        <function-ref name="type" scoped="" ref="0x406241d0"/>
        <function-ref name="setType" scoped="" ref="0x406242b0"/>
        <function-ref name="isForMe" scoped="" ref="0x40624390"/>
        <function-ref name="setGroup" scoped="" ref="0x40624470"/>
        <function-ref name="localGroup" scoped="" ref="0x40624550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x406574d8" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x406574d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x406576b0"/>
        <function-ref name="stopDone" scoped="" ref="0x40657790"/>
        <function-ref name="start" scoped="" ref="0x40657870"/>
        <function-ref name="stop" scoped="" ref="0x40657950"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x406565d0" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x406565d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x406567a8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40656888"/>
        <function-ref name="getPayload" scoped="" ref="0x40656968"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40656a48"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40656b28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40657ac0" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40657ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40657c98"/>
        <function-ref name="getPayload" scoped="" ref="0x40657d78"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40657e58"/>
        <function-ref name="cancel" scoped="" ref="0x40656010"/>
        <function-ref name="sendDone" scoped="" ref="0x406560f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x40655408" loc="76:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x40655408"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x406555e0"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x406556c0"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x406557a0"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x40655880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x406539b0" loc="71:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x406539b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x40653b88"/>
        <function-ref name="enableCca" scoped="" ref="0x40653c68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x40655d00" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x40655d00"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x40650828"/>
        <function-ref name="clear" scoped="" ref="0x40650bd8"/>
        <function-ref name="isValid" scoped="" ref="0x40650478"/>
        <function-ref name="set" scoped="" ref="0x40663010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40656278" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40656278"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40656450"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x40662e88" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x40662e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40660070"/>
        <function-ref name="isSet" scoped="" ref="0x40660150"/>
        <function-ref name="cancel" scoped="" ref="0x40660230"/>
        <function-ref name="set" scoped="" ref="0x40660310"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40651a88" loc="73:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40651a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40651c60"/>
        <function-ref name="noAck" scoped="" ref="0x40651d40"/>
        <function-ref name="wasAcked" scoped="" ref="0x40651e20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x406515b0" loc="72:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x406515b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x40651788"/>
        <function-ref name="initial" scoped="" ref="0x40651868"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x40663748" loc="79:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x40663748"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x40662260"/>
        <function-ref name="clear" scoped="" ref="0x40662610"/>
        <function-ref name="isValid" scoped="" ref="0x40663e98"/>
        <function-ref name="set" scoped="" ref="0x406629c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x40655040" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaRadioC.nc">
      <component-ref qname="CC1000CsmaRadioC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40655040"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x40655218"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x406763a8" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x406763a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40676580"/>
        <function-ref name="stopDone" scoped="" ref="0x40676660"/>
        <function-ref name="start" scoped="" ref="0x40676740"/>
        <function-ref name="stop" scoped="" ref="0x40676820"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x40679010" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x40679010"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x406797e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="setWakeupTask" ref="0x40684630" loc="119:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="setWakeupTask" scoped="" ref="0x40684630"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40684808"/>
        <function-ref name="runTask" scoped="" ref="0x406848e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startStopDone" ref="0x4069e350" loc="186:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startStopDone" scoped="" ref="0x4069e350"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4069e528"/>
        <function-ref name="runTask" scoped="" ref="0x4069e608"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiNoiseFloor" ref="0x406780c0" loc="84:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiNoiseFloor" scoped="" ref="0x406780c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40678708"/>
        <function-ref name="readDone" scoped="" ref="0x40678980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x4067b5d8" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x4067b5d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x4067b7b0"/>
        <function-ref name="rand32" scoped="" ref="0x4067b890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LowPowerListening" ref="0x40675320" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LowPowerListening" scoped="" ref="0x40675320"/></type-interface>
      <instance>
        <interfacedef-ref qname="LowPowerListening"/>
      </instance>
      <interface-functions>
        <function-ref name="setRemoteWakeupInterval" scoped="" ref="0x406754f8"/>
        <function-ref name="getRemoteWakeupInterval" scoped="" ref="0x406755d8"/>
        <function-ref name="getLocalWakeupInterval" scoped="" ref="0x406756b8"/>
        <function-ref name="setLocalWakeupInterval" scoped="" ref="0x40675798"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaControl" ref="0x406769d0" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaControl" scoped="" ref="0x406769d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaControl"/>
      </instance>
      <interface-functions>
        <function-ref name="disableCca" scoped="" ref="0x40676ba8"/>
        <function-ref name="enableCca" scoped="" ref="0x40676c88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40676010" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40676010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406761e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiCheckChannel" ref="0x40678e50" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiCheckChannel" scoped="" ref="0x40678e50"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406884d8"/>
        <function-ref name="readDone" scoped="" ref="0x40688750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x4067c428" loc="79:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x4067c428"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x4067c600"/>
        <function-ref name="settled" scoped="" ref="0x4067c6e0"/>
        <function-ref name="adjust" scoped="" ref="0x4067c7c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sleepCheck" ref="0x406a6010" loc="304:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sleepCheck" scoped="" ref="0x406a6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406a61e8"/>
        <function-ref name="runTask" scoped="" ref="0x406a62c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="WakeupTimer" ref="0x4067bb68" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="WakeupTimer" scoped="" ref="0x4067bb68"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x4067d6a8"/>
        <function-ref name="fired" scoped="" ref="0x4067e938"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x4067d068"/>
        <function-ref name="isOneShot" scoped="" ref="0x4067ede8"/>
        <function-ref name="getdt" scoped="" ref="0x4067db58"/>
        <function-ref name="gett0" scoped="" ref="0x4067d900"/>
        <function-ref name="isRunning" scoped="" ref="0x4067eb90"/>
        <function-ref name="startPeriodic" scoped="" ref="0x4067e1e0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x4067d388"/>
        <function-ref name="startOneShot" scoped="" ref="0x4067e460"/>
        <function-ref name="stop" scoped="" ref="0x4067e6e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioInit" ref="0x406759f0" loc="73:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioInit" scoped="" ref="0x406759f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40675bc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="adjustSquelch" ref="0x406a3970" loc="327:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="adjustSquelch" scoped="" ref="0x406a3970"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x406a3b48"/>
        <function-ref name="runTask" scoped="" ref="0x406a3c28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x406732c8" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x406732c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x406734a0"/>
        <function-ref name="biasOn" scoped="" ref="0x40673580"/>
        <function-ref name="getRFPower" scoped="" ref="0x40673660"/>
        <function-ref name="tuneManual" scoped="" ref="0x40673740"/>
        <function-ref name="selectLock" scoped="" ref="0x40673820"/>
        <function-ref name="init" scoped="" ref="0x40673900"/>
        <function-ref name="getLock" scoped="" ref="0x406739e0"/>
        <function-ref name="coreOn" scoped="" ref="0x40673ac0"/>
        <function-ref name="txMode" scoped="" ref="0x40673ba0"/>
        <function-ref name="getLOStatus" scoped="" ref="0x40673c80"/>
        <function-ref name="rxMode" scoped="" ref="0x40673d60"/>
        <function-ref name="off" scoped="" ref="0x40673e40"/>
        <function-ref name="setRFPower" scoped="" ref="0x40673f20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadioControl" ref="0x40675e38" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadioControl" scoped="" ref="0x40675e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40674050"/>
        <function-ref name="stop" scoped="" ref="0x40674130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiPulseCheck" ref="0x40688c08" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiPulseCheck" scoped="" ref="0x40688c08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40687278"/>
        <function-ref name="readDone" scoped="" ref="0x406874f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CsmaBackoff" ref="0x40676e38" loc="69:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CsmaBackoff" scoped="" ref="0x40676e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="CsmaBackoff"/>
      </instance>
      <interface-functions>
        <function-ref name="congestion" scoped="" ref="0x40675050"/>
        <function-ref name="initial" scoped="" ref="0x40675130"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ByteRadio" ref="0x4067f4c8" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000CsmaP.nc">
      <component-ref qname="CC1000CsmaP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x4067f4c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x4067f6a0"/>
        <function-ref name="listen" scoped="" ref="0x4067f780"/>
        <function-ref name="syncing" scoped="" ref="0x4067f860"/>
        <function-ref name="rxDone" scoped="" ref="0x4067f940"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x4067fa20"/>
        <function-ref name="idleByte" scoped="" ref="0x4067fb00"/>
        <function-ref name="cts" scoped="" ref="0x4067fbe0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x4067fcc0"/>
        <function-ref name="sendDone" scoped="" ref="0x4067fda0"/>
        <function-ref name="off" scoped="" ref="0x4067fe80"/>
        <function-ref name="getTxMessage" scoped="" ref="0x40673010"/>
        <function-ref name="rx" scoped="" ref="0x406730f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x406db398" loc="72:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x406db398"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x406db570"/>
        <function-ref name="payloadLength" scoped="" ref="0x406db650"/>
        <function-ref name="getPayload" scoped="" ref="0x406db730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406db810"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x406db8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplCC1000Spi" ref="0x406d4bf0" loc="84:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x406d4bf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x406d4e48"/>
        <function-ref name="initSlave" scoped="" ref="0x406d4f28"/>
        <function-ref name="disableIntr" scoped="" ref="0x406d3018"/>
        <function-ref name="writeByte" scoped="" ref="0x406d30f8"/>
        <function-ref name="enableIntr" scoped="" ref="0x406d31d8"/>
        <function-ref name="txMode" scoped="" ref="0x406d32b8"/>
        <function-ref name="readByte" scoped="" ref="0x406d3398"/>
        <function-ref name="rxMode" scoped="" ref="0x406d3478"/>
        <function-ref name="dataReady" scoped="" ref="0x406d3558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x406c8930" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x406c8930"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x406c8b08"/>
        <function-ref name="getPayload" scoped="" ref="0x406c8be8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x406c8cc8"/>
        <function-ref name="cancel" scoped="" ref="0x406c8da8"/>
        <function-ref name="sendDone" scoped="" ref="0x406c8e88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStamp32khz" ref="0x406d9490" loc="77:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStamp32khz" scoped="" ref="0x406d9490"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x406d8010"/>
        <function-ref name="clear" scoped="" ref="0x406d83c0"/>
        <function-ref name="isValid" scoped="" ref="0x406d9be0"/>
        <function-ref name="set" scoped="" ref="0x406d8770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x406c8188" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x406c8188"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x406c8360"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeSyncOffset" ref="0x406d5618" loc="79:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeSyncOffset" scoped="" ref="0x406d5618"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406d57f0"/>
        <function-ref name="isSet" scoped="" ref="0x406d58d0"/>
        <function-ref name="cancel" scoped="" ref="0x406d59b0"/>
        <function-ref name="set" scoped="" ref="0x406d5a90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x406db040" loc="71:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x406db040"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x406db218"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Squelch" ref="0x406d3720" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x406d3720"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406d38f8"/>
        <function-ref name="settled" scoped="" ref="0x406d39d8"/>
        <function-ref name="adjust" scoped="" ref="0x406d3ab8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RssiRx" ref="0x406d3d88" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiRx" scoped="" ref="0x406d3d88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x406d23e0"/>
        <function-ref name="readDone" scoped="" ref="0x406d2658"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTime32khz" ref="0x406e5c58" loc="89:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime32khz" scoped="" ref="0x406e5c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406e72e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketSent" ref="0x4071a558" loc="417:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketSent" scoped="" ref="0x4071a558"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4071a730"/>
        <function-ref name="runTask" scoped="" ref="0x4071a810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x406da850" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x406da850"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x406daa28"/>
        <function-ref name="noAck" scoped="" ref="0x406dab08"/>
        <function-ref name="wasAcked" scoped="" ref="0x406dabe8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC1000Control" ref="0x406d5ca8" loc="83:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x406d5ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x406d5e80"/>
        <function-ref name="biasOn" scoped="" ref="0x406d4010"/>
        <function-ref name="getRFPower" scoped="" ref="0x406d40f0"/>
        <function-ref name="tuneManual" scoped="" ref="0x406d41d0"/>
        <function-ref name="selectLock" scoped="" ref="0x406d42b0"/>
        <function-ref name="init" scoped="" ref="0x406d4390"/>
        <function-ref name="getLock" scoped="" ref="0x406d4470"/>
        <function-ref name="coreOn" scoped="" ref="0x406d4550"/>
        <function-ref name="txMode" scoped="" ref="0x406d4630"/>
        <function-ref name="getLOStatus" scoped="" ref="0x406d4710"/>
        <function-ref name="rxMode" scoped="" ref="0x406d47f0"/>
        <function-ref name="off" scoped="" ref="0x406d48d0"/>
        <function-ref name="setRFPower" scoped="" ref="0x406d49b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LocalTimeMilli" ref="0x406e76d8" loc="90:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTimeMilli" scoped="" ref="0x406e76d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x406e7d20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalPacketReceived" ref="0x4073e998" loc="594:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalPacketReceived" scoped="" ref="0x4073e998"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4073eb70"/>
        <function-ref name="runTask" scoped="" ref="0x4073ec50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketTimeStampMilli" ref="0x406d8ea8" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketTimeStampMilli" scoped="" ref="0x406d8ea8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="timestamp" scoped="" ref="0x406d79c0"/>
        <function-ref name="clear" scoped="" ref="0x406d7d70"/>
        <function-ref name="isValid" scoped="" ref="0x406d7610"/>
        <function-ref name="set" scoped="" ref="0x406d5150"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x406c8508" loc="69:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x406c8508"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x406c86e0"/>
        <function-ref name="stop" scoped="" ref="0x406c87c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkPacketMetadata" ref="0x406dade0" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x406dade0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x406d9010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ByteRadio" ref="0x406dba90" loc="73:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SendReceiveP.nc">
      <component-ref qname="CC1000SendReceiveP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ByteRadio" scoped="" ref="0x406dba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="ByteRadio"/>
      </instance>
      <interface-functions>
        <function-ref name="rts" scoped="" ref="0x406dbc68"/>
        <function-ref name="listen" scoped="" ref="0x406dbd48"/>
        <function-ref name="syncing" scoped="" ref="0x406dbe28"/>
        <function-ref name="rxDone" scoped="" ref="0x406dbf08"/>
        <function-ref name="getPreambleLength" scoped="" ref="0x406da010"/>
        <function-ref name="idleByte" scoped="" ref="0x406da0f0"/>
        <function-ref name="cts" scoped="" ref="0x406da1d0"/>
        <function-ref name="setPreambleLength" scoped="" ref="0x406da2b0"/>
        <function-ref name="sendDone" scoped="" ref="0x406da390"/>
        <function-ref name="off" scoped="" ref="0x406da470"/>
        <function-ref name="getTxMessage" scoped="" ref="0x406da550"/>
        <function-ref name="rx" scoped="" ref="0x406da630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ActualRssi" ref="0x40766308" loc="63:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActualRssi" scoped="" ref="0x40766308"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40766950"/>
        <function-ref name="readDone" scoped="" ref="0x40766bc8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x40763a50" loc="62:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40763a50"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40763c28"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40763d08"/>
        <function-ref name="request" scoped="" ref="0x40763de8"/>
        <function-ref name="granted" scoped="" ref="0x40763ec8"/>
        <function-ref name="isOwner" scoped="" ref="0x40766010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Rssi" ref="0x40769a08" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000RssiP.nc">
      <component-ref qname="CC1000RssiP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Rssi" scoped="" ref="0x40769a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x40768068"/>
        <function-ref name="readDone" scoped="" ref="0x407682e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40770208" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40770208"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407703e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Squelch" ref="0x407705a8" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000SquelchP.nc">
      <component-ref qname="CC1000SquelchP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Squelch" scoped="" ref="0x407705a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Squelch"/>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40770780"/>
        <function-ref name="settled" scoped="" ref="0x40770860"/>
        <function-ref name="adjust" scoped="" ref="0x40770940"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BusyWait" ref="0x4077c520" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x4077c520"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x4077cc70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CC" ref="0x4077dd28" loc="57:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC" scoped="" ref="0x4077dd28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4077df00"/>
        <function-ref name="read" scoped="" ref="0x4077c010"/>
        <function-ref name="write" scoped="" ref="0x4077c0f0"/>
        <function-ref name="getLOCK" scoped="" ref="0x4077c1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CC1000Control" ref="0x4077edb0" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000ControlP.nc">
      <component-ref qname="CC1000ControlP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CC1000Control" scoped="" ref="0x4077edb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CC1000Control"/>
      </instance>
      <interface-functions>
        <function-ref name="tunePreset" scoped="" ref="0x4077d010"/>
        <function-ref name="biasOn" scoped="" ref="0x4077d0f0"/>
        <function-ref name="getRFPower" scoped="" ref="0x4077d1d0"/>
        <function-ref name="tuneManual" scoped="" ref="0x4077d2b0"/>
        <function-ref name="selectLock" scoped="" ref="0x4077d390"/>
        <function-ref name="init" scoped="" ref="0x4077d470"/>
        <function-ref name="getLock" scoped="" ref="0x4077d550"/>
        <function-ref name="coreOn" scoped="" ref="0x4077d630"/>
        <function-ref name="txMode" scoped="" ref="0x4077d710"/>
        <function-ref name="getLOStatus" scoped="" ref="0x4077d7f0"/>
        <function-ref name="rxMode" scoped="" ref="0x4077d8d0"/>
        <function-ref name="off" scoped="" ref="0x4077d9b0"/>
        <function-ref name="setRFPower" scoped="" ref="0x4077da90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000Spi" ref="0x407b7bc0" loc="50:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000Spi" scoped="" ref="0x407b7bc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000Spi"/>
      </instance>
      <interface-functions>
        <function-ref name="isBufBusy" scoped="" ref="0x407b7d98"/>
        <function-ref name="initSlave" scoped="" ref="0x407b7e78"/>
        <function-ref name="disableIntr" scoped="" ref="0x407ce010"/>
        <function-ref name="writeByte" scoped="" ref="0x407ce0f0"/>
        <function-ref name="enableIntr" scoped="" ref="0x407ce1d0"/>
        <function-ref name="txMode" scoped="" ref="0x407ce2b0"/>
        <function-ref name="readByte" scoped="" ref="0x407ce390"/>
        <function-ref name="rxMode" scoped="" ref="0x407ce470"/>
        <function-ref name="dataReady" scoped="" ref="0x407ce550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiAdc" ref="0x4076b7f0" loc="48:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiAdc" scoped="" ref="0x4076b7f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4076be38"/>
        <function-ref name="readDone" scoped="" ref="0x407b70d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RssiResource" ref="0x407b74a8" loc="49:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RssiResource" scoped="" ref="0x407b74a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407b7680"/>
        <function-ref name="immediateRequest" scoped="" ref="0x407b7760"/>
        <function-ref name="request" scoped="" ref="0x407b7840"/>
        <function-ref name="granted" scoped="" ref="0x407b7920"/>
        <function-ref name="isOwner" scoped="" ref="0x407b7a00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplCC1000" ref="0x407ce6f0" loc="51:/root/Projects/tinyos-main-read-only/tos/platforms/mica2/chips/cc1000/HplCC1000C.nc">
      <component-ref qname="HplCC1000C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplCC1000" scoped="" ref="0x407ce6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplCC1000"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407ce8c8"/>
        <function-ref name="read" scoped="" ref="0x407ce9a8"/>
        <function-ref name="write" scoped="" ref="0x407cea88"/>
        <function-ref name="getLOCK" scoped="" ref="0x407ceb68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x408a7c58" loc="28:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x408a7c58"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x408a7e30"/>
        <function-ref name="configure" scoped="" ref="0x408a7f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x407cbaf8" loc="24:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x407cbaf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408a7200"/>
        <function-ref name="readDone" scoped="" ref="0x408a7478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x408a7780" loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x408a7780"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x408a7958"/>
        <function-ref name="getChannel" scoped="" ref="0x408a7a38"/>
        <function-ref name="getPrescaler" scoped="" ref="0x408a7b18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x407cb3d0" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcReadNowClientC.nc">
      <component-ref qname="HplCC1000C.RssiChannel"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407cb3d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407cb5a8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x407cb688"/>
        <function-ref name="request" scoped="" ref="0x407cb768"/>
        <function-ref name="granted" scoped="" ref="0x407cb848"/>
        <function-ref name="isOwner" scoped="" ref="0x407cb928"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x407d9520" loc="18:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x407d9520"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407d9b48"/>
        <function-ref name="readDone" scoped="" ref="0x407d9da0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x407c34c8" loc="19:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x407c34c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x407c3b10"/>
        <function-ref name="readDone" scoped="" ref="0x407c3d88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x407d8470" loc="22:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x407d8470"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x407d8648"/>
        <function-ref name="getChannel" scoped="" ref="0x407d8728"/>
        <function-ref name="getPrescaler" scoped="" ref="0x407d8808"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x407d8ca8" loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/WireAdcP.nc">
      <component-ref qname="WireAdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407d8ca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407d8e80"/>
        <function-ref name="immediateRequest" scoped="" ref="0x407d7010"/>
        <function-ref name="request" scoped="" ref="0x407d70f0"/>
        <function-ref name="granted" scoped="" ref="0x407d71d0"/>
        <function-ref name="isOwner" scoped="" ref="0x407d72b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x407d3178" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x407d3178"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x407d3350"/>
        <function-ref name="configure" scoped="" ref="0x407d3430"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x407e6970" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x407e6970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x407e6b48"/>
        <function-ref name="dataReady" scoped="" ref="0x407e6c28"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x407d0740" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407d0740"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x407d0918"/>
        <function-ref name="cancel" scoped="" ref="0x407d09f8"/>
        <function-ref name="dataReady" scoped="" ref="0x407d0ad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x407d7d08" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcC.nc">
      <component-ref qname="Atm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x407d7d08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x407d7ee0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x407d4010"/>
        <function-ref name="request" scoped="" ref="0x407d40f0"/>
        <function-ref name="granted" scoped="" ref="0x407d41d0"/>
        <function-ref name="isOwner" scoped="" ref="0x407d42b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x407d3d98" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x407d3d98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x407e4010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcMultiple" ref="0x407e1c30" loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcMultiple" scoped="" ref="0x407e1c30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x407e1e08"/>
        <function-ref name="dataReady" scoped="" ref="0x407e1ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Atm128AdcSingle" ref="0x407e16a8" loc="87:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x407e16a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x407e1880"/>
        <function-ref name="cancel" scoped="" ref="0x407e1960"/>
        <function-ref name="dataReady" scoped="" ref="0x407e1a40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplAtm128Adc" ref="0x407f2498" loc="91:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x407f2498"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x407f2670"/>
        <function-ref name="getAdmux" scoped="" ref="0x407f2750"/>
        <function-ref name="setPrescaler" scoped="" ref="0x407f2830"/>
        <function-ref name="isEnabled" scoped="" ref="0x407f2910"/>
        <function-ref name="enableAdc" scoped="" ref="0x407f29f0"/>
        <function-ref name="setAdmux" scoped="" ref="0x407f2ad0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x407f2bb0"/>
        <function-ref name="isComplete" scoped="" ref="0x407f2c90"/>
        <function-ref name="cancel" scoped="" ref="0x407f2d70"/>
        <function-ref name="disableAdc" scoped="" ref="0x407f2e50"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x407e2010"/>
        <function-ref name="disableInterruption" scoped="" ref="0x407e20f0"/>
        <function-ref name="startConversion" scoped="" ref="0x407e21d0"/>
        <function-ref name="isStarted" scoped="" ref="0x407e2330"/>
        <function-ref name="setAdcsra" scoped="" ref="0x407e2410"/>
        <function-ref name="setContinuous" scoped="" ref="0x407e24f0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x407e25d0"/>
        <function-ref name="getValue" scoped="" ref="0x407e26b0"/>
        <function-ref name="dataReady" scoped="" ref="0x407e2790"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AsyncStdControl" ref="0x407e1218" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x407e1218"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x407e13f0"/>
        <function-ref name="stop" scoped="" ref="0x407e14d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x407e2968" loc="92:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcP.nc">
      <component-ref qname="Atm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x407e2968"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x407e2b40"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x407e2c20"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x407e2d00"/>
        <function-ref name="actualMicro" scoped="" ref="0x407e2de0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x407e2ec0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x407d2a10" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcC.nc">
      <component-ref qname="HplAtm128AdcC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x407d2a10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x407d2be8"/>
        <function-ref name="getAdmux" scoped="" ref="0x407d2cc8"/>
        <function-ref name="setPrescaler" scoped="" ref="0x407d2da8"/>
        <function-ref name="isEnabled" scoped="" ref="0x407d2e88"/>
        <function-ref name="enableAdc" scoped="" ref="0x40809010"/>
        <function-ref name="setAdmux" scoped="" ref="0x408090f0"/>
        <function-ref name="enableInterruption" scoped="" ref="0x408091d0"/>
        <function-ref name="isComplete" scoped="" ref="0x408092b0"/>
        <function-ref name="cancel" scoped="" ref="0x40809390"/>
        <function-ref name="disableAdc" scoped="" ref="0x40809470"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x40809550"/>
        <function-ref name="disableInterruption" scoped="" ref="0x40809630"/>
        <function-ref name="startConversion" scoped="" ref="0x40809710"/>
        <function-ref name="isStarted" scoped="" ref="0x40809870"/>
        <function-ref name="setAdcsra" scoped="" ref="0x40809950"/>
        <function-ref name="setContinuous" scoped="" ref="0x40809a30"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40809b10"/>
        <function-ref name="getValue" scoped="" ref="0x40809bf0"/>
        <function-ref name="dataReady" scoped="" ref="0x40809cd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplAtm128Adc" ref="0x408086d8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplAtm128Adc" scoped="" ref="0x408086d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Adc"/>
      </instance>
      <interface-functions>
        <function-ref name="setSingle" scoped="" ref="0x408088b0"/>
        <function-ref name="getAdmux" scoped="" ref="0x40808990"/>
        <function-ref name="setPrescaler" scoped="" ref="0x40808a70"/>
        <function-ref name="isEnabled" scoped="" ref="0x40808b50"/>
        <function-ref name="enableAdc" scoped="" ref="0x40808c30"/>
        <function-ref name="setAdmux" scoped="" ref="0x40808d10"/>
        <function-ref name="enableInterruption" scoped="" ref="0x40808df0"/>
        <function-ref name="isComplete" scoped="" ref="0x40808ed0"/>
        <function-ref name="cancel" scoped="" ref="0x40805010"/>
        <function-ref name="disableAdc" scoped="" ref="0x408050f0"/>
        <function-ref name="resetInterrupt" scoped="" ref="0x408051d0"/>
        <function-ref name="disableInterruption" scoped="" ref="0x408052b0"/>
        <function-ref name="startConversion" scoped="" ref="0x40805390"/>
        <function-ref name="isStarted" scoped="" ref="0x408054f0"/>
        <function-ref name="setAdcsra" scoped="" ref="0x408055d0"/>
        <function-ref name="setContinuous" scoped="" ref="0x408056b0"/>
        <function-ref name="getAdcsra" scoped="" ref="0x40805790"/>
        <function-ref name="getValue" scoped="" ref="0x40805870"/>
        <function-ref name="dataReady" scoped="" ref="0x40805950"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40805b38" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128AdcP.nc">
      <component-ref qname="HplAtm128AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40805b38"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40805d10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x40875068" loc="92:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x40875068"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x40875250"/>
        <function-ref name="immediateRequested" scoped="" ref="0x40875330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x40874010" loc="96:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x40874010"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x408741f8"/>
        <function-ref name="configure" scoped="" ref="0x408742d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x40875470" loc="93:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40875470"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40875648"/>
        <function-ref name="requested" scoped="" ref="0x40875728"/>
        <function-ref name="granted" scoped="" ref="0x40875808"/>
        <function-ref name="isOwner" scoped="" ref="0x408758e8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x408759c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x40806910" loc="91:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x40806910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40806af8"/>
        <function-ref name="immediateRequest" scoped="" ref="0x40806bd8"/>
        <function-ref name="request" scoped="" ref="0x40806cb8"/>
        <function-ref name="granted" scoped="" ref="0x40806d98"/>
        <function-ref name="isOwner" scoped="" ref="0x40806e78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x40875b08" loc="94:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinArbiterC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x40875b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x40875ce0"/>
        <function-ref name="userId" scoped="" ref="0x40875dc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4117d5e0" loc="44:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4117d5e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4117d7b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RoundRobinQueue" ref="0x4117d918" loc="45:/root/Projects/tinyos-main-read-only/tos/system/RoundRobinResourceQueueC.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Queue"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RoundRobinQueue" scoped="" ref="0x4117d918"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x4117daf0"/>
        <function-ref name="isEmpty" scoped="" ref="0x4117dbd0"/>
        <function-ref name="isEnqueued" scoped="" ref="0x4117dcb0"/>
        <function-ref name="dequeue" scoped="" ref="0x4117dd90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceRequested" ref="0x4117b1e8" loc="55:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceRequested" scoped="" ref="0x4117b1e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceRequested"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="requested" scoped="" ref="0x4117b3d0"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4117b4b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceConfigure" ref="0x4117a218" loc="60:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceConfigure" scoped="" ref="0x4117a218"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceConfigure"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="unconfigure" scoped="" ref="0x4117a400"/>
        <function-ref name="configure" scoped="" ref="0x4117a4e0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Queue" ref="0x4117a640" loc="61:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x4117a640"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceQueue"/>
      </instance>
      <interface-functions>
        <function-ref name="enqueue" scoped="" ref="0x4117a818"/>
        <function-ref name="isEmpty" scoped="" ref="0x4117a8f8"/>
        <function-ref name="isEnqueued" scoped="" ref="0x4117a9d8"/>
        <function-ref name="dequeue" scoped="" ref="0x4117aab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ResourceDefaultOwner" ref="0x4117b5f0" loc="56:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x4117b5f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4117b7c8"/>
        <function-ref name="requested" scoped="" ref="0x4117b8a8"/>
        <function-ref name="granted" scoped="" ref="0x4117b988"/>
        <function-ref name="isOwner" scoped="" ref="0x4117ba68"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4117bb48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x4117abf8" loc="62:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x4117abf8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x4117add0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x4117aeb0"/>
        <function-ref name="led1On" scoped="" ref="0x41179010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x411790f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x411791d0"/>
        <function-ref name="get" scoped="" ref="0x411792b0"/>
        <function-ref name="led1Off" scoped="" ref="0x41179390"/>
        <function-ref name="led0On" scoped="" ref="0x41179710"/>
        <function-ref name="set" scoped="" ref="0x41179550"/>
        <function-ref name="led2On" scoped="" ref="0x41179470"/>
        <function-ref name="led2Off" scoped="" ref="0x41179630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Resource" ref="0x4117ca78" loc="54:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x4117ca78"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x4117cc60"/>
        <function-ref name="immediateRequest" scoped="" ref="0x4117cd40"/>
        <function-ref name="request" scoped="" ref="0x4117ce20"/>
        <function-ref name="granted" scoped="" ref="0x4117cf00"/>
        <function-ref name="isOwner" scoped="" ref="0x4117b010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ArbiterInfo" ref="0x4117bc88" loc="57:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x4117bc88"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4117be60"/>
        <function-ref name="userId" scoped="" ref="0x4117a010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="grantedTask" ref="0x41179890" loc="75:/root/Projects/tinyos-main-read-only/tos/system/ArbiterP.nc">
      <component-ref qname="Atm128AdcC.AdcArbiter.Arbiter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="grantedTask" scoped="" ref="0x41179890"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x41179a68"/>
        <function-ref name="runTask" scoped="" ref="0x41179b48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x40873de8" loc="72:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x40873de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x40872010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x40872150" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x40872150"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x40872328"/>
        <function-ref name="requested" scoped="" ref="0x40872408"/>
        <function-ref name="granted" scoped="" ref="0x408724e8"/>
        <function-ref name="isOwner" scoped="" ref="0x408725c8"/>
        <function-ref name="immediateRequested" scoped="" ref="0x408726a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x408739f0" loc="70:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x408739f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40873bc8"/>
        <function-ref name="stop" scoped="" ref="0x40873ca8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x408727e8" loc="74:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncStdControlPowerManagerC.nc">
      <component-ref qname="Atm128AdcC.PM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x408727e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x408729c0"/>
        <function-ref name="userId" scoped="" ref="0x40872aa0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PowerDownCleanup" ref="0x411a07a8" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PowerDownCleanup" scoped="" ref="0x411a07a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="PowerDownCleanup"/>
      </instance>
      <interface-functions>
        <function-ref name="cleanup" scoped="" ref="0x411a0980"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ResourceDefaultOwner" ref="0x411a0ac0" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ResourceDefaultOwner" scoped="" ref="0x411a0ac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
      </instance>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x411a0c98"/>
        <function-ref name="requested" scoped="" ref="0x411a0d78"/>
        <function-ref name="granted" scoped="" ref="0x411a0e58"/>
        <function-ref name="isOwner" scoped="" ref="0x4119e010"/>
        <function-ref name="immediateRequested" scoped="" ref="0x4119e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AsyncStdControl" ref="0x411a03b0" loc="60:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AsyncStdControl" scoped="" ref="0x411a03b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AsyncStdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x411a0588"/>
        <function-ref name="stop" scoped="" ref="0x411a0668"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ArbiterInfo" ref="0x4119e230" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/power/AsyncPowerManagerP.nc">
      <component-ref qname="Atm128AdcC.PM.PowerManager"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ArbiterInfo" scoped="" ref="0x4119e230"/></type-interface>
      <instance>
        <interfacedef-ref qname="ArbiterInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="inUse" scoped="" ref="0x4119e408"/>
        <function-ref name="userId" scoped="" ref="0x4119e4e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4087c1d8" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4087c1d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4087c800"/>
        <function-ref name="readDone" scoped="" ref="0x4087ca58"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReadNow" ref="0x4087b178" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReadNow" scoped="" ref="0x4087b178"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReadNow"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4087b7c0"/>
        <function-ref name="readDone" scoped="" ref="0x4087ba38"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcConfig" ref="0x408956b0" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcConfig" scoped="" ref="0x408956b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcConfig"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getRefVoltage" scoped="" ref="0x40895888"/>
        <function-ref name="getChannel" scoped="" ref="0x40895968"/>
        <function-ref name="getPrescaler" scoped="" ref="0x40895a48"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128AdcSingle" ref="0x4087bde8" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128AdcSingle" scoped="" ref="0x4087bde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128AdcSingle"/>
      </instance>
      <interface-functions>
        <function-ref name="getData" scoped="" ref="0x40895010"/>
        <function-ref name="cancel" scoped="" ref="0x408950f0"/>
        <function-ref name="dataReady" scoped="" ref="0x408951d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="acquiredData" ref="0x4088de90" loc="103:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/AdcP.nc">
      <component-ref qname="AdcP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="acquiredData" scoped="" ref="0x4088de90"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x4088b080"/>
        <function-ref name="runTask" scoped="" ref="0x4088b160"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Read" ref="0x4087d560" loc="24:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Read" scoped="" ref="0x4087d560"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x4087db98"/>
        <function-ref name="readDone" scoped="" ref="0x4087de00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Service" ref="0x408ab280" loc="26:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Service" scoped="" ref="0x408ab280"/></type-interface>
      <instance>
        <interfacedef-ref qname="Read"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="read" scoped="" ref="0x408ab8b8"/>
        <function-ref name="readDone" scoped="" ref="0x408abb20"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Resource" ref="0x408abea0" loc="27:/root/Projects/tinyos-main-read-only/tos/system/ArbitratedReadC.nc">
      <component-ref qname="WireAdcP.ArbitrateRead"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Resource" scoped="" ref="0x408abea0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Resource"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="release" scoped="" ref="0x408aa0c0"/>
        <function-ref name="immediateRequest" scoped="" ref="0x408aa1a0"/>
        <function-ref name="request" scoped="" ref="0x408aa280"/>
        <function-ref name="granted" scoped="" ref="0x408aa360"/>
        <function-ref name="isOwner" scoped="" ref="0x408aa440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x408bf4b0" loc="46:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x408bf4b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x408bf688"/>
        <function-ref name="rand32" scoped="" ref="0x408bf768"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x408bdbd8" loc="45:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x408bdbd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408bf218"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x4076a970" loc="44:/root/Projects/tinyos-main-read-only/tos/system/RandomC.nc">
      <component-ref qname="RandomC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x4076a970"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x4076ab48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Random" ref="0x408b9350" loc="48:/root/Projects/tinyos-main-read-only/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x408b9350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x408b9528"/>
        <function-ref name="rand32" scoped="" ref="0x408b9608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SeedInit" ref="0x408bea68" loc="47:/root/Projects/tinyos-main-read-only/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SeedInit" scoped="" ref="0x408bea68"/></type-interface>
      <instance>
        <interfacedef-ref qname="ParameterInit"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408b90b8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408be548" loc="46:/root/Projects/tinyos-main-read-only/tos/system/RandomMlcgC.nc">
      <component-ref qname="RandomMlcgC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408be548"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408be720"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x407b8c88" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x407b8c88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408ca790"/>
        <function-ref name="fired" scoped="" ref="0x408c0a20"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408ca150"/>
        <function-ref name="isOneShot" scoped="" ref="0x408c0ed0"/>
        <function-ref name="getdt" scoped="" ref="0x408cac40"/>
        <function-ref name="gett0" scoped="" ref="0x408ca9e8"/>
        <function-ref name="isRunning" scoped="" ref="0x408c0c78"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408c02c8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408ca470"/>
        <function-ref name="startOneShot" scoped="" ref="0x408c0548"/>
        <function-ref name="stop" scoped="" ref="0x408c07c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x408c91b0" loc="49:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliP.nc">
      <component-ref qname="TimerMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x408c91b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408c8d58"/>
        <function-ref name="fired" scoped="" ref="0x408c8010"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408c8718"/>
        <function-ref name="isOneShot" scoped="" ref="0x408c84c0"/>
        <function-ref name="getdt" scoped="" ref="0x408c6268"/>
        <function-ref name="gett0" scoped="" ref="0x408c6010"/>
        <function-ref name="isRunning" scoped="" ref="0x408c8268"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408c97d8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408c8a38"/>
        <function-ref name="startOneShot" scoped="" ref="0x408c9a58"/>
        <function-ref name="stop" scoped="" ref="0x408c9cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerMilli" ref="0x408c32d0" loc="46:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerMilli" scoped="" ref="0x408c32d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408c2db0"/>
        <function-ref name="fired" scoped="" ref="0x408c2068"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x408c2770"/>
        <function-ref name="isOneShot" scoped="" ref="0x408c2518"/>
        <function-ref name="getdt" scoped="" ref="0x408dd2a0"/>
        <function-ref name="gett0" scoped="" ref="0x408dd048"/>
        <function-ref name="isRunning" scoped="" ref="0x408c22c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x408c38f8"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x408c2a90"/>
        <function-ref name="startOneShot" scoped="" ref="0x408c3b78"/>
        <function-ref name="stop" scoped="" ref="0x408c3df8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x408dd600" loc="47:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x408dd600"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408ddc48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408c6b00" loc="45:/root/Projects/tinyos-main-read-only/tos/platforms/mica/HilTimerMilliC.nc">
      <component-ref qname="HilTimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408c6b00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408c6cd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CounterMilli32" ref="0x408cfe20" loc="29:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterMilli32" scoped="" ref="0x408cfe20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x408d2590"/>
        <function-ref name="clearOverflow" scoped="" ref="0x408d2a80"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x408d2808"/>
        <function-ref name="overflow" scoped="" ref="0x408d2cf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408dccd8" loc="27:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408dccd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408dceb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AlarmMilli32" ref="0x408d34e8" loc="28:/root/Projects/tinyos-main-read-only/tos/platforms/mica/AlarmCounterMilliP.nc">
      <component-ref qname="AlarmCounterMilliP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AlarmMilli32" scoped="" ref="0x408d34e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x408d89a0"/>
        <function-ref name="fired" scoped="" ref="0x408d8170"/>
        <function-ref name="startAt" scoped="" ref="0x408d8660"/>
        <function-ref name="isRunning" scoped="" ref="0x408d83e8"/>
        <function-ref name="getAlarm" scoped="" ref="0x408d8c18"/>
        <function-ref name="start" scoped="" ref="0x408d3c38"/>
        <function-ref name="stop" scoped="" ref="0x408d3ed8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x409720c0" loc="26:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x409720c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409715c8"/>
        <function-ref name="fired" scoped="" ref="0x40972d28"/>
        <function-ref name="startAt" scoped="" ref="0x40971288"/>
        <function-ref name="isRunning" scoped="" ref="0x40971010"/>
        <function-ref name="getAlarm" scoped="" ref="0x40971840"/>
        <function-ref name="start" scoped="" ref="0x40972810"/>
        <function-ref name="stop" scoped="" ref="0x40972ab0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x408ebc78" loc="25:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x408ebc78"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x403195d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x403195d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x408ebe50"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40971b70" loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncC.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40971b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40970308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409707f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40970580"/>
        <function-ref name="overflow" scoped="" ref="0x40970a70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerCtrl" ref="0x411ccc80" loc="31:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x411ccc80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x411cce58"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x411ca010"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x411ca0f0"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x411ca1d0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x411ca2b0"/>
        <function-ref name="setControl" scoped="" ref="0x411ca390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Alarm" ref="0x411d3e58" loc="26:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x411d3e58"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x411d0350"/>
        <function-ref name="fired" scoped="" ref="0x411d1af8"/>
        <function-ref name="startAt" scoped="" ref="0x411d0010"/>
        <function-ref name="isRunning" scoped="" ref="0x411d1d70"/>
        <function-ref name="getAlarm" scoped="" ref="0x411d05c8"/>
        <function-ref name="start" scoped="" ref="0x411d15e0"/>
        <function-ref name="stop" scoped="" ref="0x411d1880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x411d3a20" loc="25:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x411d3a20"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x411d3bf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x411d08f8" loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x411d08f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x411ce068"/>
        <function-ref name="clearOverflow" scoped="" ref="0x411ce558"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x411ce2e0"/>
        <function-ref name="overflow" scoped="" ref="0x411ce7d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerAsync" ref="0x411c8010" loc="33:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x411c8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x411c81e8"/>
        <function-ref name="compareBusy" scoped="" ref="0x411c82c8"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x411c83a8"/>
        <function-ref name="countBusy" scoped="" ref="0x411c8488"/>
        <function-ref name="getAssr" scoped="" ref="0x411c8568"/>
        <function-ref name="setAssr" scoped="" ref="0x411c8648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Compare" ref="0x411ca580" loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x411ca580"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x411c9ad8"/>
        <function-ref name="fired" scoped="" ref="0x411c90f8"/>
        <function-ref name="get" scoped="" ref="0x411cabc8"/>
        <function-ref name="reset" scoped="" ref="0x411c9370"/>
        <function-ref name="isOn" scoped="" ref="0x411c9d50"/>
        <function-ref name="set" scoped="" ref="0x411cae40"/>
        <function-ref name="start" scoped="" ref="0x411c95e8"/>
        <function-ref name="stop" scoped="" ref="0x411c9860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x411ceac0" loc="30:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128AlarmAsyncP.nc">
      <component-ref qname="AlarmCounterMilliP.Atm128AlarmAsyncC.Atm128AlarmAsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x411ceac0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x411cc538"/>
        <function-ref name="test" scoped="" ref="0x411cc048"/>
        <function-ref name="get" scoped="" ref="0x411cd120"/>
        <function-ref name="setScale" scoped="" ref="0x411cc7b0"/>
        <function-ref name="getScale" scoped="" ref="0x411cca50"/>
        <function-ref name="reset" scoped="" ref="0x411cd8b0"/>
        <function-ref name="overflow" scoped="" ref="0x411cd638"/>
        <function-ref name="isOn" scoped="" ref="0x411cc2c0"/>
        <function-ref name="set" scoped="" ref="0x411cd398"/>
        <function-ref name="start" scoped="" ref="0x411cdb28"/>
        <function-ref name="stop" scoped="" ref="0x411cdda0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40936010" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40936010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x409361e8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x409362c8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x409363a8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40936488"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40936568"/>
        <function-ref name="setControl" scoped="" ref="0x40936648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x409344f8" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x409344f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x409346d0"/>
        <function-ref name="compareBusy" scoped="" ref="0x409347b0"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x40934890"/>
        <function-ref name="countBusy" scoped="" ref="0x40934970"/>
        <function-ref name="getAssr" scoped="" ref="0x40934a50"/>
        <function-ref name="setAssr" scoped="" ref="0x40934b30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40936970" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40936970"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40935f08"/>
        <function-ref name="fired" scoped="" ref="0x40935528"/>
        <function-ref name="get" scoped="" ref="0x40935010"/>
        <function-ref name="reset" scoped="" ref="0x409357a0"/>
        <function-ref name="isOn" scoped="" ref="0x409341a0"/>
        <function-ref name="set" scoped="" ref="0x40935288"/>
        <function-ref name="start" scoped="" ref="0x40935a18"/>
        <function-ref name="stop" scoped="" ref="0x40935c90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4091ecc0" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncC.nc">
      <component-ref qname="HplAtm128Timer0AsyncC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4091ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40937778"/>
        <function-ref name="test" scoped="" ref="0x40937288"/>
        <function-ref name="get" scoped="" ref="0x4091b318"/>
        <function-ref name="setScale" scoped="" ref="0x409379f0"/>
        <function-ref name="getScale" scoped="" ref="0x40937c90"/>
        <function-ref name="reset" scoped="" ref="0x4091baa8"/>
        <function-ref name="overflow" scoped="" ref="0x4091b830"/>
        <function-ref name="isOn" scoped="" ref="0x40937500"/>
        <function-ref name="set" scoped="" ref="0x4091b590"/>
        <function-ref name="start" scoped="" ref="0x4091bd20"/>
        <function-ref name="stop" scoped="" ref="0x40937010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x4092eaf0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x4092eaf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x4092ecc8"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x4092eda8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x4092ee88"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x4092d010"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x4092d0f0"/>
        <function-ref name="setControl" scoped="" ref="0x4092d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="McuPowerOverride" ref="0x4092a010" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerOverride" scoped="" ref="0x4092a010"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerOverride"/>
      </instance>
      <interface-functions>
        <function-ref name="lowestState" scoped="" ref="0x4092a1e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerAsync" ref="0x4092a470" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerAsync" scoped="" ref="0x4092a470"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
      </instance>
      <interface-functions>
        <function-ref name="controlBusy" scoped="" ref="0x4092a648"/>
        <function-ref name="compareBusy" scoped="" ref="0x4092a728"/>
        <function-ref name="setTimer0Asynchronous" scoped="" ref="0x4092a808"/>
        <function-ref name="countBusy" scoped="" ref="0x4092a8e8"/>
        <function-ref name="getAssr" scoped="" ref="0x4092a9c8"/>
        <function-ref name="setAssr" scoped="" ref="0x4092aaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x4092d4f8" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x4092d4f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x4092ca48"/>
        <function-ref name="fired" scoped="" ref="0x4092c068"/>
        <function-ref name="get" scoped="" ref="0x4092db40"/>
        <function-ref name="reset" scoped="" ref="0x4092c2e0"/>
        <function-ref name="isOn" scoped="" ref="0x4092ccc0"/>
        <function-ref name="set" scoped="" ref="0x4092ddb8"/>
        <function-ref name="start" scoped="" ref="0x4092c558"/>
        <function-ref name="stop" scoped="" ref="0x4092c7d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409327f0" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer0AsyncP.nc">
      <component-ref qname="HplAtm128Timer0AsyncP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x409327f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x4092e288"/>
        <function-ref name="test" scoped="" ref="0x4092fd58"/>
        <function-ref name="get" scoped="" ref="0x40932e38"/>
        <function-ref name="setScale" scoped="" ref="0x4092e500"/>
        <function-ref name="getScale" scoped="" ref="0x4092e7a0"/>
        <function-ref name="reset" scoped="" ref="0x4092f5f0"/>
        <function-ref name="overflow" scoped="" ref="0x4092f378"/>
        <function-ref name="isOn" scoped="" ref="0x4092e010"/>
        <function-ref name="set" scoped="" ref="0x4092f0d8"/>
        <function-ref name="start" scoped="" ref="0x4092f868"/>
        <function-ref name="stop" scoped="" ref="0x4092fae0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="fired" ref="0x40976bd0" loc="74:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="fired" scoped="" ref="0x40976bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40976da8"/>
        <function-ref name="runTask" scoped="" ref="0x40976e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Alarm" ref="0x40977248" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Alarm" scoped="" ref="0x40977248"/></type-interface>
      <instance>
        <interfacedef-ref qname="Alarm"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40976708"/>
        <function-ref name="fired" scoped="" ref="0x40977eb0"/>
        <function-ref name="startAt" scoped="" ref="0x409763c8"/>
        <function-ref name="isRunning" scoped="" ref="0x40976150"/>
        <function-ref name="getAlarm" scoped="" ref="0x40976980"/>
        <function-ref name="start" scoped="" ref="0x40977998"/>
        <function-ref name="stop" scoped="" ref="0x40977c38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x4096ef08" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/timer/AlarmToTimerC.nc">
      <component-ref qname="HilTimerMilliC.AlarmToTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x4096ef08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40978a18"/>
        <function-ref name="fired" scoped="" ref="0x40979cb0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409783d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x40978180"/>
        <function-ref name="getdt" scoped="" ref="0x40978ec8"/>
        <function-ref name="gett0" scoped="" ref="0x40978c70"/>
        <function-ref name="isRunning" scoped="" ref="0x40979f08"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40979558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409786f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x409797d8"/>
        <function-ref name="stop" scoped="" ref="0x40979a58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateFromTimer" ref="0x409a8560" loc="71:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateFromTimer" scoped="" ref="0x409a8560"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x409a8738"/>
        <function-ref name="runTask" scoped="" ref="0x409a8818"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="TimerFrom" ref="0x409ab338" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerFrom" scoped="" ref="0x409ab338"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409a9e38"/>
        <function-ref name="fired" scoped="" ref="0x409a90f0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409a97f8"/>
        <function-ref name="isOneShot" scoped="" ref="0x409a95a0"/>
        <function-ref name="getdt" scoped="" ref="0x409a8310"/>
        <function-ref name="gett0" scoped="" ref="0x409a80b8"/>
        <function-ref name="isRunning" scoped="" ref="0x409a9348"/>
        <function-ref name="startPeriodic" scoped="" ref="0x409ab960"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409a9b18"/>
        <function-ref name="startOneShot" scoped="" ref="0x409abbe0"/>
        <function-ref name="stop" scoped="" ref="0x409abe60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40993f00" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/timer/VirtualizeTimerC.nc">
      <component-ref qname="HilTimerMilliC.VirtualizeTimerC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40993f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x409acb40"/>
        <function-ref name="fired" scoped="" ref="0x40992ce0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x409ac4e0"/>
        <function-ref name="isOneShot" scoped="" ref="0x409ac278"/>
        <function-ref name="getdt" scoped="" ref="0x409ab048"/>
        <function-ref name="gett0" scoped="" ref="0x409acda8"/>
        <function-ref name="isRunning" scoped="" ref="0x409ac010"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40992558"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x409ac810"/>
        <function-ref name="startOneShot" scoped="" ref="0x409927e8"/>
        <function-ref name="stop" scoped="" ref="0x40992a78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x409a6a88" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x409a6a88"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409c50f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x409c5448" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="HilTimerMilliC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x409c5448"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409c5b98"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409bf0a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409c5e10"/>
        <function-ref name="overflow" scoped="" ref="0x409bf320"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ActiveMessageAddress" ref="0x409b64c0" loc="54:/root/Projects/tinyos-main-read-only/tos/system/ActiveMessageAddressC.nc">
      <component-ref qname="ActiveMessageAddressC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ActiveMessageAddress" scoped="" ref="0x409b64c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="ActiveMessageAddress"/>
      </instance>
      <interface-functions>
        <function-ref name="amAddress" scoped="" ref="0x409b6698"/>
        <function-ref name="changed" scoped="" ref="0x409b6778"/>
        <function-ref name="amGroup" scoped="" ref="0x409b6858"/>
        <function-ref name="setAddress" scoped="" ref="0x409b6938"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="BusyWait" ref="0x409bbe60" loc="51:/root/Projects/tinyos-main-read-only/tos/platforms/mica/BusyWaitMicroC.nc">
      <component-ref qname="BusyWaitMicroC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BusyWait" scoped="" ref="0x409bbe60"/></type-interface>
      <instance>
        <interfacedef-ref qname="BusyWait"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="wait" scoped="" ref="0x409ce5e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409e6170" loc="24:/root/Projects/tinyos-main-read-only/tos/platforms/mica/Counter32khz32C.nc">
      <component-ref qname="Counter32khz32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x409e6170"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409e68c0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409e6db0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409e6b38"/>
        <function-ref name="overflow" scoped="" ref="0x409e5048"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409e5b60" loc="24:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterOne16C.nc">
      <component-ref qname="CounterOne16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x409e5b60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="TOne" ref="0x4038fbe0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409e2308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409e27f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409e2580"/>
        <function-ref name="overflow" scoped="" ref="0x409e2a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x409f6360" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x409f6360"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x409f6538"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x409f6618"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x409f66f8"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x409f67d8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x409f68b8"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x409f6998"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x409f6a78"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x409f6b58"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x409f6c38"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x409f6d18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x409d9190" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x409d9190"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x409f5c68"/>
        <function-ref name="test" scoped="" ref="0x409f5778"/>
        <function-ref name="get" scoped="" ref="0x409d97d8"/>
        <function-ref name="captured" scoped="" ref="0x409d9cf0"/>
        <function-ref name="reset" scoped="" ref="0x409f5010"/>
        <function-ref name="isOn" scoped="" ref="0x409f59f0"/>
        <function-ref name="set" scoped="" ref="0x409d9a50"/>
        <function-ref name="start" scoped="" ref="0x409f5288"/>
        <function-ref name="stop" scoped="" ref="0x409f5500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x409f03d0" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x409f03d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x409ef9f0"/>
        <function-ref name="fired" scoped="" ref="0x409ef010"/>
        <function-ref name="get" scoped="" ref="0x409f0a18"/>
        <function-ref name="reset" scoped="" ref="0x409ef288"/>
        <function-ref name="isOn" scoped="" ref="0x409efc68"/>
        <function-ref name="set" scoped="" ref="0x409f0c90"/>
        <function-ref name="start" scoped="" ref="0x409ef500"/>
        <function-ref name="stop" scoped="" ref="0x409ef778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409e04d8" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1C.nc">
      <component-ref qname="HplAtm128Timer1C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x409e04d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x409ddf18"/>
        <function-ref name="test" scoped="" ref="0x409dda28"/>
        <function-ref name="get" scoped="" ref="0x409e0b20"/>
        <function-ref name="setScale" scoped="" ref="0x409dc1a8"/>
        <function-ref name="getScale" scoped="" ref="0x409dc448"/>
        <function-ref name="reset" scoped="" ref="0x409dd2c0"/>
        <function-ref name="overflow" scoped="" ref="0x409dd048"/>
        <function-ref name="isOn" scoped="" ref="0x409ddca0"/>
        <function-ref name="set" scoped="" ref="0x409e0d98"/>
        <function-ref name="start" scoped="" ref="0x409dd538"/>
        <function-ref name="stop" scoped="" ref="0x409dd7b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x409e9e78" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x409e9e78"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x409e8070"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x409e8150"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x409e8230"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x409e8310"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x409e83f0"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x409e84d0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x409e85b0"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x409e8690"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x409e8770"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x409e8850"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer0Ctrl" ref="0x40a01e98" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer0Ctrl" scoped="" ref="0x40a01e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
      </instance>
      <interface-functions>
        <function-ref name="getControl" scoped="" ref="0x40a000c0"/>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40a001a0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40a00280"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40a00360"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40a00440"/>
        <function-ref name="setControl" scoped="" ref="0x40a00520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x40a07a80" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x40a07a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40a05010"/>
        <function-ref name="fired" scoped="" ref="0x40a06610"/>
        <function-ref name="get" scoped="" ref="0x40a060f8"/>
        <function-ref name="reset" scoped="" ref="0x40a06888"/>
        <function-ref name="isOn" scoped="" ref="0x40a05288"/>
        <function-ref name="set" scoped="" ref="0x40a06370"/>
        <function-ref name="start" scoped="" ref="0x40a06b00"/>
        <function-ref name="stop" scoped="" ref="0x40a06d78"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x409e8b88" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x409e8b88"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40a07640"/>
        <function-ref name="test" scoped="" ref="0x40a07150"/>
        <function-ref name="get" scoped="" ref="0x409e7200"/>
        <function-ref name="captured" scoped="" ref="0x409e7718"/>
        <function-ref name="reset" scoped="" ref="0x409e79b8"/>
        <function-ref name="isOn" scoped="" ref="0x40a073c8"/>
        <function-ref name="set" scoped="" ref="0x409e7478"/>
        <function-ref name="start" scoped="" ref="0x409e7c30"/>
        <function-ref name="stop" scoped="" ref="0x409e7ea8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x40a056a0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x40a056a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40a04c90"/>
        <function-ref name="fired" scoped="" ref="0x40a042b0"/>
        <function-ref name="get" scoped="" ref="0x40a05ce8"/>
        <function-ref name="reset" scoped="" ref="0x40a04528"/>
        <function-ref name="isOn" scoped="" ref="0x40a04f08"/>
        <function-ref name="set" scoped="" ref="0x40a04010"/>
        <function-ref name="start" scoped="" ref="0x40a047a0"/>
        <function-ref name="stop" scoped="" ref="0x40a04a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x40a02340" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x40a02340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40a01898"/>
        <function-ref name="fired" scoped="" ref="0x40a02ea0"/>
        <function-ref name="get" scoped="" ref="0x40a02988"/>
        <function-ref name="reset" scoped="" ref="0x40a01130"/>
        <function-ref name="isOn" scoped="" ref="0x40a01b10"/>
        <function-ref name="set" scoped="" ref="0x40a02c00"/>
        <function-ref name="start" scoped="" ref="0x40a013a8"/>
        <function-ref name="stop" scoped="" ref="0x40a01620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x409eeb18" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer1P.nc">
      <component-ref qname="HplAtm128Timer1P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x409eeb18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x409e9600"/>
        <function-ref name="test" scoped="" ref="0x409e9110"/>
        <function-ref name="get" scoped="" ref="0x409ea200"/>
        <function-ref name="setScale" scoped="" ref="0x409e9878"/>
        <function-ref name="getScale" scoped="" ref="0x409e9b18"/>
        <function-ref name="reset" scoped="" ref="0x409ea990"/>
        <function-ref name="overflow" scoped="" ref="0x409ea718"/>
        <function-ref name="isOn" scoped="" ref="0x409e9388"/>
        <function-ref name="set" scoped="" ref="0x409ea478"/>
        <function-ref name="start" scoped="" ref="0x409eac08"/>
        <function-ref name="stop" scoped="" ref="0x409eae80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40a5a700" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40a5a700"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x403195d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x403195d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40a5a8d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40a5aae8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitOneP.InitOne"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a5aae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40a51600"/>
        <function-ref name="test" scoped="" ref="0x40a51110"/>
        <function-ref name="get" scoped="" ref="0x40a59200"/>
        <function-ref name="setScale" scoped="" ref="0x40a51878"/>
        <function-ref name="getScale" scoped="" ref="0x40a51b18"/>
        <function-ref name="reset" scoped="" ref="0x40a59990"/>
        <function-ref name="overflow" scoped="" ref="0x40a59718"/>
        <function-ref name="isOn" scoped="" ref="0x40a51388"/>
        <function-ref name="set" scoped="" ref="0x40a59478"/>
        <function-ref name="start" scoped="" ref="0x40a59c08"/>
        <function-ref name="stop" scoped="" ref="0x40a59e80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40a4f320" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40a4f320"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="TOne" ref="0x4038fbe0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a4fa70"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a4e010"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a4fce8"/>
        <function-ref name="overflow" scoped="" ref="0x40a4e288"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40a4e568" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterOne16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a4e568"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40a66010"/>
        <function-ref name="test" scoped="" ref="0x40a68ad8"/>
        <function-ref name="get" scoped="" ref="0x40a4ebb0"/>
        <function-ref name="setScale" scoped="" ref="0x40a66288"/>
        <function-ref name="getScale" scoped="" ref="0x40a66528"/>
        <function-ref name="reset" scoped="" ref="0x40a68370"/>
        <function-ref name="overflow" scoped="" ref="0x40a680f8"/>
        <function-ref name="isOn" scoped="" ref="0x40a68d50"/>
        <function-ref name="set" scoped="" ref="0x40a4ee28"/>
        <function-ref name="start" scoped="" ref="0x40a685e8"/>
        <function-ref name="stop" scoped="" ref="0x40a68860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40a64ae8" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40a64ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="TOne" ref="0x4038fbe0"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a77308"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a777f8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a77580"/>
        <function-ref name="overflow" scoped="" ref="0x40a77a70"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x409e37f0" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="Counter32khz32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x409e37f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40a64010"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40a64500"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40a64288"/>
        <function-ref name="overflow" scoped="" ref="0x40a64778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LocalTime" ref="0x409c76b8" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC1000CsmaRadioC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LocalTime" scoped="" ref="0x409c76b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LocalTime"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409c7d00"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x409c60a0" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/timer/CounterToLocalTimeC.nc">
      <component-ref qname="CC1000CsmaRadioC.CounterToLocalTimeC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x409c60a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e0a0"/>
            <typename><typedef-ref name="T32khz" ref="0x4036e268"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x409c67f0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x409c6ce0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x409c6a68"/>
        <function-ref name="overflow" scoped="" ref="0x40a75010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40a735c8" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="CC1000CsmaRadioC.DummyTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40a735c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40a710d8"/>
        <function-ref name="fired" scoped="" ref="0x40a72368"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40a72a70"/>
        <function-ref name="isOneShot" scoped="" ref="0x40a72818"/>
        <function-ref name="getdt" scoped="" ref="0x40a71588"/>
        <function-ref name="gett0" scoped="" ref="0x40a71330"/>
        <function-ref name="isRunning" scoped="" ref="0x40a725c0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40a73bf0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40a72d90"/>
        <function-ref name="startOneShot" scoped="" ref="0x40a73e70"/>
        <function-ref name="stop" scoped="" ref="0x40a72110"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0x40ab3a30" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0x40ab3a30"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0x40ab3c08"/>
        <function-ref name="setRoot" scoped="" ref="0x40ab3ce8"/>
        <function-ref name="unsetRoot" scoped="" ref="0x40ab3dc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0x40aa02d8" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0x40aa02d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40aa04b0"/>
        <function-ref name="setOrigin" scoped="" ref="0x40aa0590"/>
        <function-ref name="setType" scoped="" ref="0x40aa0670"/>
        <function-ref name="getOrigin" scoped="" ref="0x40aa0750"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40aa0830"/>
        <function-ref name="getType" scoped="" ref="0x40aa0910"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0x40aad710" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0x40aad710"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0x40aad968"/>
        <function-ref name="logEventMsg" scoped="" ref="0x40aada48"/>
        <function-ref name="logEventSimple" scoped="" ref="0x40aadb28"/>
        <function-ref name="logEventRoute" scoped="" ref="0x40aadc08"/>
        <function-ref name="logEventDbg" scoped="" ref="0x40aadce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0x40aa7c40" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0x40aa7c40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x40aa7e18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40aa6010" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40aa6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40aa61e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40aa62c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40aa63a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40aa6488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40aa6568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40aa7598" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40aa7598"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40aa7770"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40aa8488" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40aa8488"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40aa8660"/>
        <function-ref name="getPayload" scoped="" ref="0x40aa8740"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40aa8820"/>
        <function-ref name="cancel" scoped="" ref="0x40aa8900"/>
        <function-ref name="sendDone" scoped="" ref="0x40aa89e0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0x40ab5c00" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0x40ab5c00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0x40ab5dd8"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0x40ab5eb8"/>
        <function-ref name="numNeighbors" scoped="" ref="0x40aa4010"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0x40aa40f0"/>
        <function-ref name="getEtx" scoped="" ref="0x40aa41d0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0x40aa42b0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0x40aa4390"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0x40aa4470"/>
        <function-ref name="getParent" scoped="" ref="0x40aa4550"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0x40aa4630"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0x40aa4710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40aa8e98" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40aa8e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40aa70c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0x40ab35c8" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0x40ab35c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0x40ab37a0"/>
        <function-ref name="setClientCongested" scoped="" ref="0x40ab3880"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0x40abb7a0" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0x40abb7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40abb978"/>
        <function-ref name="option" scoped="" ref="0x40abba58"/>
        <function-ref name="setEtx" scoped="" ref="0x40abbb38"/>
        <function-ref name="setOrigin" scoped="" ref="0x40abbc18"/>
        <function-ref name="clearOption" scoped="" ref="0x40abbcf8"/>
        <function-ref name="getEtx" scoped="" ref="0x40abbdd8"/>
        <function-ref name="getOrigin" scoped="" ref="0x40abbeb8"/>
        <function-ref name="setType" scoped="" ref="0x40aa5010"/>
        <function-ref name="setOption" scoped="" ref="0x40aa50f0"/>
        <function-ref name="matchPacket" scoped="" ref="0x40aa51d0"/>
        <function-ref name="getThl" scoped="" ref="0x40aa52b0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40aa5390"/>
        <function-ref name="matchInstance" scoped="" ref="0x40aa5470"/>
        <function-ref name="getType" scoped="" ref="0x40aa55d0"/>
        <function-ref name="setThl" scoped="" ref="0x40aa56b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40a83ca0" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40a83ca0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40a83e78"/>
        <function-ref name="stop" scoped="" ref="0x40aa8010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0x40ab4b08" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionC.nc">
      <component-ref qname="CollectionC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0x40ab4b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0x40ab4ce0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0x40ac8478" loc="92:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0x40ac8478"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0x40ac8650"/>
        <function-ref name="setRoot" scoped="" ref="0x40ac8730"/>
        <function-ref name="unsetRoot" scoped="" ref="0x40ac8810"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0x40acce98" loc="86:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0x40acce98"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40acb0c0"/>
        <function-ref name="setOrigin" scoped="" ref="0x40acb1a0"/>
        <function-ref name="setType" scoped="" ref="0x40acb280"/>
        <function-ref name="getOrigin" scoped="" ref="0x40acb360"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40acb440"/>
        <function-ref name="getType" scoped="" ref="0x40acb520"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0x40ac2420" loc="90:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0x40ac2420"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="getLinkQuality" scoped="" ref="0x40ac2dd8"/>
        <function-ref name="txAck" scoped="" ref="0x40ac26d8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0x40ac27b8"/>
        <function-ref name="txNoAck" scoped="" ref="0x40ac2898"/>
        <function-ref name="insertNeighbor" scoped="" ref="0x40ac2978"/>
        <function-ref name="evicted" scoped="" ref="0x40ac2a58"/>
        <function-ref name="clearDLQ" scoped="" ref="0x40ac2b38"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0x40ac2c18"/>
        <function-ref name="getForwardQuality" scoped="" ref="0x40ac2cf8"/>
        <function-ref name="getReverseQuality" scoped="" ref="0x40ac25f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0x40ac71e8" loc="97:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0x40ac71e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0x40ac73c0"/>
        <function-ref name="logEventMsg" scoped="" ref="0x40ac74a0"/>
        <function-ref name="logEventSimple" scoped="" ref="0x40ac7580"/>
        <function-ref name="logEventRoute" scoped="" ref="0x40ac7660"/>
        <function-ref name="logEventDbg" scoped="" ref="0x40ac7740"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0x40acc400" loc="83:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0x40acc400"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x40acc5d8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40acc758" loc="85:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40acc758"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40acc930"/>
        <function-ref name="payloadLength" scoped="" ref="0x40acca10"/>
        <function-ref name="getPayload" scoped="" ref="0x40accaf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40accbd0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40acccb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40acdd38" loc="82:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40acdd38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40acdf10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40ab1bc8" loc="80:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40ab1bc8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ab1da0"/>
        <function-ref name="getPayload" scoped="" ref="0x40ab1e80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40acd010"/>
        <function-ref name="cancel" scoped="" ref="0x40acd0f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40acd1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0x40aca758" loc="89:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0x40aca758"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0x40aca930"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0x40acaa10"/>
        <function-ref name="numNeighbors" scoped="" ref="0x40acaaf0"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0x40acabd0"/>
        <function-ref name="getEtx" scoped="" ref="0x40acacb0"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0x40acad90"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0x40acae70"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0x40ac9010"/>
        <function-ref name="getParent" scoped="" ref="0x40ac90f0"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0x40ac91d0"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0x40ac92b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40acd688" loc="81:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40acd688"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40acd860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0x40ac8010" loc="91:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0x40ac8010"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0x40ac81e8"/>
        <function-ref name="setClientCongested" scoped="" ref="0x40ac82c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0x40acb6c0" loc="87:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0x40acb6c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40acb898"/>
        <function-ref name="option" scoped="" ref="0x40acb978"/>
        <function-ref name="setEtx" scoped="" ref="0x40acba58"/>
        <function-ref name="setOrigin" scoped="" ref="0x40acbb38"/>
        <function-ref name="clearOption" scoped="" ref="0x40acbc18"/>
        <function-ref name="getEtx" scoped="" ref="0x40acbcf8"/>
        <function-ref name="getOrigin" scoped="" ref="0x40acbdd8"/>
        <function-ref name="setType" scoped="" ref="0x40acbeb8"/>
        <function-ref name="setOption" scoped="" ref="0x40aca010"/>
        <function-ref name="matchPacket" scoped="" ref="0x40aca0f0"/>
        <function-ref name="getThl" scoped="" ref="0x40aca1d0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40aca2b0"/>
        <function-ref name="matchInstance" scoped="" ref="0x40aca390"/>
        <function-ref name="getType" scoped="" ref="0x40aca4f0"/>
        <function-ref name="setThl" scoped="" ref="0x40aca5d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40ab1498" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40ab1498"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ab1670"/>
        <function-ref name="stop" scoped="" ref="0x40ab1750"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0x40ac8d18" loc="96:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpP.nc">
      <component-ref qname="CtpP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0x40ac8d18"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0x40ac7010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40b9e3d8" loc="142:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40b9e3d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b9e5b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RootControl" ref="0x40b9d690" loc="145:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0x40b9d690"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0x40b9d868"/>
        <function-ref name="setRoot" scoped="" ref="0x40b9d948"/>
        <function-ref name="unsetRoot" scoped="" ref="0x40b9da28"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40b838b8" loc="126:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40b838b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b83a90"/>
        <function-ref name="getPayload" scoped="" ref="0x40b83b70"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b83c50"/>
        <function-ref name="cancel" scoped="" ref="0x40b83d30"/>
        <function-ref name="sendDone" scoped="" ref="0x40b83e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0x40b9bc48" loc="156:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0x40b9bc48"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0x40b9be20"/>
        <function-ref name="logEventMsg" scoped="" ref="0x40b9bf00"/>
        <function-ref name="logEventSimple" scoped="" ref="0x40b99010"/>
        <function-ref name="logEventRoute" scoped="" ref="0x40b990f0"/>
        <function-ref name="logEventDbg" scoped="" ref="0x40b991d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionPacket" ref="0x40b85ba8" loc="116:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionPacket" scoped="" ref="0x40b85ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40b85d80"/>
        <function-ref name="setOrigin" scoped="" ref="0x40b85e60"/>
        <function-ref name="setType" scoped="" ref="0x40b84010"/>
        <function-ref name="getOrigin" scoped="" ref="0x40b840f0"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40b841d0"/>
        <function-ref name="getType" scoped="" ref="0x40b842b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0x40b807f0" loc="129:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0x40b807f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="getReverseQuality" scoped="" ref="0x40b7e1d0"/>
        <function-ref name="txAck" scoped="" ref="0x40b80aa8"/>
        <function-ref name="pinNeighbor" scoped="" ref="0x40b80b88"/>
        <function-ref name="txNoAck" scoped="" ref="0x40b80c68"/>
        <function-ref name="insertNeighbor" scoped="" ref="0x40b80d48"/>
        <function-ref name="evicted" scoped="" ref="0x40b80e28"/>
        <function-ref name="clearDLQ" scoped="" ref="0x40b80f08"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0x40b7e010"/>
        <function-ref name="getForwardQuality" scoped="" ref="0x40b7e0f0"/>
        <function-ref name="getLinkQuality" scoped="" ref="0x40b809c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SentCache" ref="0x40ba0668" loc="140:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SentCache" scoped="" ref="0x40ba0668"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
              <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0x40ba0c90"/>
        <function-ref name="flush" scoped="" ref="0x40b9e1a8"/>
        <function-ref name="lookup" scoped="" ref="0x40ba0f10"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Intercept" ref="0x40b851e8" loc="114:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Intercept" scoped="" ref="0x40b851e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Intercept"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="forward" scoped="" ref="0x40b853d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40b85510" loc="115:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40b85510"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40b856e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40b857c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40b858a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b85988"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40b85a68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Snoop" ref="0x40b86de8" loc="113:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Snoop" scoped="" ref="0x40b86de8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b85010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x40b9b850" loc="149:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40b9b850"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40b9ba28"/>
        <function-ref name="rand32" scoped="" ref="0x40b9bb08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40b862c8" loc="111:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40b862c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40b864b0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b86590"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b86670"/>
        <function-ref name="cancel" scoped="" ref="0x40b86750"/>
        <function-ref name="sendDone" scoped="" ref="0x40b86830"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RetxmitTimer" ref="0x40b82598" loc="128:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RetxmitTimer" scoped="" ref="0x40b82598"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40b80130"/>
        <function-ref name="fired" scoped="" ref="0x40b813c8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40b81ad0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40b81878"/>
        <function-ref name="getdt" scoped="" ref="0x40b805e0"/>
        <function-ref name="gett0" scoped="" ref="0x40b80388"/>
        <function-ref name="isRunning" scoped="" ref="0x40b81620"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40b82c40"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40b81df0"/>
        <function-ref name="startOneShot" scoped="" ref="0x40b82ec0"/>
        <function-ref name="stop" scoped="" ref="0x40b81170"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x40b99330" loc="162:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x40b99330"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40b99508"/>
        <function-ref name="stopDone" scoped="" ref="0x40b995e8"/>
        <function-ref name="start" scoped="" ref="0x40b996c8"/>
        <function-ref name="stop" scoped="" ref="0x40b997a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendTask" ref="0x40b99928" loc="234:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendTask" scoped="" ref="0x40b99928"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40b99b00"/>
        <function-ref name="runTask" scoped="" ref="0x40b99be0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendQueue" ref="0x40b7d070" loc="137:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendQueue" scoped="" ref="0x40b7d070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40b7dda0"/>
        <function-ref name="enqueue" scoped="" ref="0x40b7c4a0"/>
        <function-ref name="element" scoped="" ref="0x40b7c7f0"/>
        <function-ref name="maxSize" scoped="" ref="0x40b7db48"/>
        <function-ref name="dequeue" scoped="" ref="0x40b7c130"/>
        <function-ref name="empty" scoped="" ref="0x40b7d698"/>
        <function-ref name="size" scoped="" ref="0x40b7d8f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpInfo" ref="0x40b9ea28" loc="144:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0x40b9ea28"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0x40b9ec00"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0x40b9ece0"/>
        <function-ref name="numNeighbors" scoped="" ref="0x40b9edc0"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0x40b9eea0"/>
        <function-ref name="getEtx" scoped="" ref="0x40b9d010"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0x40b9d0f0"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0x40b9d1d0"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0x40b9d2b0"/>
        <function-ref name="getParent" scoped="" ref="0x40b9d390"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0x40b9d470"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0x40b9d550"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x40b7e8e8" loc="131:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x40b7e8e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40b7eac0"/>
        <function-ref name="payloadLength" scoped="" ref="0x40b7eba0"/>
        <function-ref name="getPayload" scoped="" ref="0x40b7ec80"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40b7ed60"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40b7ee40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40b88ae8" loc="109:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40b88ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40b88cc0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40b86a08" loc="112:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40b86a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b86bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpCongestion" ref="0x40b83470" loc="118:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0x40b83470"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0x40b83648"/>
        <function-ref name="setClientCongested" scoped="" ref="0x40b83728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UnicastNameFreeRouting" ref="0x40b7e310" loc="130:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UnicastNameFreeRouting" scoped="" ref="0x40b7e310"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0x40b7e4e8"/>
        <function-ref name="routeFound" scoped="" ref="0x40b7e5c8"/>
        <function-ref name="nextHop" scoped="" ref="0x40b7e6a8"/>
        <function-ref name="noRoute" scoped="" ref="0x40b7e788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40b9cc18" loc="148:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40b9cc18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40b9cdf0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40b9ced0"/>
        <function-ref name="led1On" scoped="" ref="0x40b9b010"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40b9b0f0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40b9b1d0"/>
        <function-ref name="get" scoped="" ref="0x40b9b2b0"/>
        <function-ref name="led1Off" scoped="" ref="0x40b9b390"/>
        <function-ref name="led2On" scoped="" ref="0x40b9b710"/>
        <function-ref name="set" scoped="" ref="0x40b9b550"/>
        <function-ref name="led2Off" scoped="" ref="0x40b9b470"/>
        <function-ref name="led0On" scoped="" ref="0x40b9b630"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketAcknowledgements" ref="0x40b82010" loc="127:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40b82010"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40b821e8"/>
        <function-ref name="noAck" scoped="" ref="0x40b822c8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40b823a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpPacket" ref="0x40b843f0" loc="117:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0x40b843f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x40b845c8"/>
        <function-ref name="option" scoped="" ref="0x40b846a8"/>
        <function-ref name="setEtx" scoped="" ref="0x40b84788"/>
        <function-ref name="setOrigin" scoped="" ref="0x40b84868"/>
        <function-ref name="clearOption" scoped="" ref="0x40b84948"/>
        <function-ref name="getEtx" scoped="" ref="0x40b84a28"/>
        <function-ref name="getOrigin" scoped="" ref="0x40b84b08"/>
        <function-ref name="setType" scoped="" ref="0x40b84be8"/>
        <function-ref name="setOption" scoped="" ref="0x40b84cc8"/>
        <function-ref name="matchPacket" scoped="" ref="0x40b84da8"/>
        <function-ref name="getThl" scoped="" ref="0x40b84e88"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x40b83010"/>
        <function-ref name="matchInstance" scoped="" ref="0x40b830f0"/>
        <function-ref name="getType" scoped="" ref="0x40b83250"/>
        <function-ref name="setThl" scoped="" ref="0x40b83330"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="QEntryPool" ref="0x40b7cbf0" loc="138:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="QEntryPool" scoped="" ref="0x40b7cbf0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ba2cf0"/>
        <function-ref name="maxSize" scoped="" ref="0x40ba2708"/>
        <function-ref name="empty" scoped="" ref="0x40ba2258"/>
        <function-ref name="put" scoped="" ref="0x40ba2960"/>
        <function-ref name="size" scoped="" ref="0x40ba24b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40b9c040" loc="147:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40b9c040"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40b9c218"/>
        <function-ref name="source" scoped="" ref="0x40b9c2f8"/>
        <function-ref name="address" scoped="" ref="0x40b9c3d8"/>
        <function-ref name="destination" scoped="" ref="0x40b9c4b8"/>
        <function-ref name="setSource" scoped="" ref="0x40b9c598"/>
        <function-ref name="setDestination" scoped="" ref="0x40b9c678"/>
        <function-ref name="type" scoped="" ref="0x40b9c758"/>
        <function-ref name="setType" scoped="" ref="0x40b9c838"/>
        <function-ref name="isForMe" scoped="" ref="0x40b9c918"/>
        <function-ref name="setGroup" scoped="" ref="0x40b9c9f8"/>
        <function-ref name="localGroup" scoped="" ref="0x40b9cad8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40b88e00" loc="110:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40b88e00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40b86010"/>
        <function-ref name="stop" scoped="" ref="0x40b860f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSnoop" ref="0x40b9e710" loc="143:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSnoop" scoped="" ref="0x40b9e710"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40b9e8e8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="MessagePool" ref="0x40ba1140" loc="139:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="MessagePool" scoped="" ref="0x40ba1140"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
            <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ba0210"/>
        <function-ref name="maxSize" scoped="" ref="0x40ba1c18"/>
        <function-ref name="empty" scoped="" ref="0x40ba1768"/>
        <function-ref name="put" scoped="" ref="0x40ba1e70"/>
        <function-ref name="size" scoped="" ref="0x40ba19c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionId" ref="0x40b9dc00" loc="146:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpForwardingEngineP.nc">
      <component-ref qname="CtpP.Forwarder"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0x40b9dc00"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0x40b9dee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0x40b93010" loc="42:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
      <component-ref qname="CtpP.MessagePoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0x40b93010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
            <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40b920e8"/>
        <function-ref name="maxSize" scoped="" ref="0x40b93ae8"/>
        <function-ref name="empty" scoped="" ref="0x40b93638"/>
        <function-ref name="put" scoped="" ref="0x40b93d40"/>
        <function-ref name="size" scoped="" ref="0x40b93890"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0x41269f18" loc="56:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0x41269f18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
            <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x41266010"/>
        <function-ref name="maxSize" scoped="" ref="0x41268a08"/>
        <function-ref name="empty" scoped="" ref="0x41268558"/>
        <function-ref name="put" scoped="" ref="0x41268c60"/>
        <function-ref name="size" scoped="" ref="0x412687b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x41269b70" loc="55:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <component-ref qname="CtpP.MessagePoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x41269b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x41269d48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0x40ba43e0" loc="42:/root/Projects/tinyos-main-read-only/tos/system/PoolC.nc">
      <component-ref qname="CtpP.QEntryPoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0x40ba43e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40ba34c0"/>
        <function-ref name="maxSize" scoped="" ref="0x40ba4eb8"/>
        <function-ref name="empty" scoped="" ref="0x40ba4a08"/>
        <function-ref name="put" scoped="" ref="0x40ba3130"/>
        <function-ref name="size" scoped="" ref="0x40ba4c60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Pool" ref="0x412a26f8" loc="56:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Pool" scoped="" ref="0x412a26f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Pool"/>
        <arguments>
          <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
            <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x412a1850"/>
        <function-ref name="maxSize" scoped="" ref="0x412a1268"/>
        <function-ref name="empty" scoped="" ref="0x412a2d20"/>
        <function-ref name="put" scoped="" ref="0x412a14c0"/>
        <function-ref name="size" scoped="" ref="0x412a1010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x412a2350" loc="55:/root/Projects/tinyos-main-read-only/tos/system/PoolP.nc">
      <component-ref qname="CtpP.QEntryPoolP.PoolP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x412a2350"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x412a2528"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Queue" ref="0x40bc9748" loc="43:/root/Projects/tinyos-main-read-only/tos/system/QueueC.nc">
      <component-ref qname="CtpP.SendQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Queue" scoped="" ref="0x40bc9748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Queue"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:4" alignment="I:1"><struct-ref ref="0x40ae01b0"/>
              <typename><typedef-ref name="fe_queue_entry_t" ref="0x40ae0438"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="head" scoped="" ref="0x40bc84c0"/>
        <function-ref name="enqueue" scoped="" ref="0x40bc8ba0"/>
        <function-ref name="element" scoped="" ref="0x40bc8ef0"/>
        <function-ref name="maxSize" scoped="" ref="0x40bc8268"/>
        <function-ref name="dequeue" scoped="" ref="0x40bc8830"/>
        <function-ref name="empty" scoped="" ref="0x40bc9d70"/>
        <function-ref name="size" scoped="" ref="0x40bc8010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0x40bb72f8" loc="39:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheC.nc">
      <component-ref qname="CtpP.SentCacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0x40bb72f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
              <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0x40bb7920"/>
        <function-ref name="flush" scoped="" ref="0x40bb7e20"/>
        <function-ref name="lookup" scoped="" ref="0x40bb7ba0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Cache" ref="0x412936b0" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Cache" scoped="" ref="0x412936b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Cache"/>
        <arguments>
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
              <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
            </type-tag>
          </type-pointer>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="insert" scoped="" ref="0x41293cd8"/>
        <function-ref name="flush" scoped="" ref="0x41291290"/>
        <function-ref name="lookup" scoped="" ref="0x41291010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x412932e8" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x412932e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x412934c0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpPacket" ref="0x412914d0" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/LruCtpMsgCacheP.nc">
      <component-ref qname="CtpP.SentCacheP.CacheP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpPacket" scoped="" ref="0x412914d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="setSequenceNumber" scoped="" ref="0x412916a8"/>
        <function-ref name="option" scoped="" ref="0x41291788"/>
        <function-ref name="setEtx" scoped="" ref="0x41291868"/>
        <function-ref name="setOrigin" scoped="" ref="0x41291948"/>
        <function-ref name="clearOption" scoped="" ref="0x41291a28"/>
        <function-ref name="getEtx" scoped="" ref="0x41291b08"/>
        <function-ref name="getOrigin" scoped="" ref="0x41291be8"/>
        <function-ref name="setType" scoped="" ref="0x41291cc8"/>
        <function-ref name="setOption" scoped="" ref="0x41291da8"/>
        <function-ref name="matchPacket" scoped="" ref="0x41291e88"/>
        <function-ref name="getThl" scoped="" ref="0x41290010"/>
        <function-ref name="getSequenceNumber" scoped="" ref="0x412900f0"/>
        <function-ref name="matchInstance" scoped="" ref="0x412901d0"/>
        <function-ref name="getType" scoped="" ref="0x41290330"/>
        <function-ref name="setThl" scoped="" ref="0x41290410"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40befd00" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RoutingBeaconTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40befd00"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40bec8a8"/>
        <function-ref name="fired" scoped="" ref="0x40beeaa8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40bec268"/>
        <function-ref name="isOneShot" scoped="" ref="0x40bec010"/>
        <function-ref name="getdt" scoped="" ref="0x40becd58"/>
        <function-ref name="gett0" scoped="" ref="0x40becb00"/>
        <function-ref name="isRunning" scoped="" ref="0x40beed00"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40bee350"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40bec588"/>
        <function-ref name="startOneShot" scoped="" ref="0x40bee5d0"/>
        <function-ref name="stop" scoped="" ref="0x40bee850"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40bebc38" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RouteUpdateTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40bebc38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40be9730"/>
        <function-ref name="fired" scoped="" ref="0x40bea9d0"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40be90f0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40beae80"/>
        <function-ref name="getdt" scoped="" ref="0x40be9be0"/>
        <function-ref name="gett0" scoped="" ref="0x40be9988"/>
        <function-ref name="isRunning" scoped="" ref="0x40beac28"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40bea278"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40be9410"/>
        <function-ref name="startOneShot" scoped="" ref="0x40bea4f8"/>
        <function-ref name="stop" scoped="" ref="0x40bea778"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40c06098" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40c06098"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40c06270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="LinkEstimator" ref="0x40be06f8" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0x40be06f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="getLinkQuality" scoped="" ref="0x40c090f0"/>
        <function-ref name="txAck" scoped="" ref="0x40be09b0"/>
        <function-ref name="pinNeighbor" scoped="" ref="0x40be0a90"/>
        <function-ref name="txNoAck" scoped="" ref="0x40be0b70"/>
        <function-ref name="insertNeighbor" scoped="" ref="0x40be0c50"/>
        <function-ref name="evicted" scoped="" ref="0x40be0d30"/>
        <function-ref name="clearDLQ" scoped="" ref="0x40be0e10"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0x40be0ef0"/>
        <function-ref name="getForwardQuality" scoped="" ref="0x40c09010"/>
        <function-ref name="getReverseQuality" scoped="" ref="0x40be08d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40c095b8" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40c095b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c09790"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c09870"/>
        <function-ref name="getPayload" scoped="" ref="0x40c09950"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c09a30"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c09b10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40c04430" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40c04430"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c04608"/>
        <function-ref name="getPayload" scoped="" ref="0x40c046e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c047c8"/>
        <function-ref name="cancel" scoped="" ref="0x40c048a8"/>
        <function-ref name="sendDone" scoped="" ref="0x40c04988"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40be1ba8" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40be1ba8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40be1d80"/>
        <function-ref name="getPayload" scoped="" ref="0x40be1e60"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40be0010"/>
        <function-ref name="cancel" scoped="" ref="0x40be00f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40be01d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x40c067c0" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40c067c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40c06a18"/>
        <function-ref name="rand32" scoped="" ref="0x40c06af8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubPacket" ref="0x40c07910" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubPacket" scoped="" ref="0x40c07910"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c07ae8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c07bc8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c07ca8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c07d88"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c07e68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40c09260" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40c09260"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40c09438"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubAMPacket" ref="0x40c04bb0" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubAMPacket" scoped="" ref="0x40c04bb0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40c04d88"/>
        <function-ref name="source" scoped="" ref="0x40c04e68"/>
        <function-ref name="address" scoped="" ref="0x40c07010"/>
        <function-ref name="destination" scoped="" ref="0x40c070f0"/>
        <function-ref name="setSource" scoped="" ref="0x40c071d0"/>
        <function-ref name="setDestination" scoped="" ref="0x40c072b0"/>
        <function-ref name="type" scoped="" ref="0x40c07390"/>
        <function-ref name="setType" scoped="" ref="0x40c07470"/>
        <function-ref name="isForMe" scoped="" ref="0x40c07550"/>
        <function-ref name="setGroup" scoped="" ref="0x40c07630"/>
        <function-ref name="localGroup" scoped="" ref="0x40c07710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40be0358" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40be0358"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40be0530"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareBit" ref="0x40c04098" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0x40c04098"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0x40c04270"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40be1720" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40be1720"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40be18f8"/>
        <function-ref name="stop" scoped="" ref="0x40be19d8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkPacketMetadata" ref="0x40c06468" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimatorP.nc">
      <component-ref qname="LinkEstimatorP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkPacketMetadata" scoped="" ref="0x40c06468"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkPacketMetadata"/>
      </instance>
      <interface-functions>
        <function-ref name="highChannelQuality" scoped="" ref="0x40c06640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40be5938" loc="49:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40be5938"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40be5b10"/>
        <function-ref name="getPayload" scoped="" ref="0x40be5bf0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40be5cd0"/>
        <function-ref name="cancel" scoped="" ref="0x40be5db0"/>
        <function-ref name="sendDone" scoped="" ref="0x40be5e90"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40c61010" loc="50:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40c61010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40c611e8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40c612c8"/>
        <function-ref name="getPayload" scoped="" ref="0x40c613a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c61488"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40c61568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40c616a8" loc="51:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40c616a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40c61880"/>
        <function-ref name="source" scoped="" ref="0x40c61960"/>
        <function-ref name="address" scoped="" ref="0x40c61a40"/>
        <function-ref name="destination" scoped="" ref="0x40c61b20"/>
        <function-ref name="setSource" scoped="" ref="0x40c61c00"/>
        <function-ref name="setDestination" scoped="" ref="0x40c61ce0"/>
        <function-ref name="type" scoped="" ref="0x40c61dc0"/>
        <function-ref name="setType" scoped="" ref="0x40c61ea0"/>
        <function-ref name="isForMe" scoped="" ref="0x40cc5010"/>
        <function-ref name="setGroup" scoped="" ref="0x40cc50f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40cc51d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x40cc5330" loc="52:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x40cc5330"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40cc5508"/>
        <function-ref name="noAck" scoped="" ref="0x40cc55e8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40cc56c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x412be6f0" loc="49:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x412be6f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x412be8c8"/>
        <function-ref name="getPayload" scoped="" ref="0x412be9a8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x412bea88"/>
        <function-ref name="cancel" scoped="" ref="0x412beb68"/>
        <function-ref name="sendDone" scoped="" ref="0x412bec48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x412bed88" loc="50:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x412bed88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x412bd010"/>
        <function-ref name="payloadLength" scoped="" ref="0x412bd0f0"/>
        <function-ref name="getPayload" scoped="" ref="0x412bd1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x412bd2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x412bd390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x412bd4d0" loc="51:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x412bd4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x412bd6a8"/>
        <function-ref name="source" scoped="" ref="0x412bd788"/>
        <function-ref name="address" scoped="" ref="0x412bd868"/>
        <function-ref name="destination" scoped="" ref="0x412bd948"/>
        <function-ref name="setSource" scoped="" ref="0x412bda28"/>
        <function-ref name="setDestination" scoped="" ref="0x412bdb08"/>
        <function-ref name="type" scoped="" ref="0x412bdbe8"/>
        <function-ref name="setType" scoped="" ref="0x412bdcc8"/>
        <function-ref name="isForMe" scoped="" ref="0x412bdda8"/>
        <function-ref name="setGroup" scoped="" ref="0x412bde88"/>
        <function-ref name="localGroup" scoped="" ref="0x412bc010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x412bc170" loc="52:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x412bc170"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x412bc348"/>
        <function-ref name="noAck" scoped="" ref="0x412bc428"/>
        <function-ref name="wasAcked" scoped="" ref="0x412bc508"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x412badb8" loc="44:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x412badb8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x412b7010"/>
        <function-ref name="getPayload" scoped="" ref="0x412b70f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x412b71d0"/>
        <function-ref name="cancel" scoped="" ref="0x412b72b0"/>
        <function-ref name="sendDone" scoped="" ref="0x412b7390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x412b7500" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x412b7500"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x412b76d8"/>
        <function-ref name="getPayload" scoped="" ref="0x412b77b8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x412b7898"/>
        <function-ref name="cancel" scoped="" ref="0x412b7978"/>
        <function-ref name="sendDone" scoped="" ref="0x412b7a58"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x412b7b98" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.AMSenderC.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x412b7b98"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x412b7d70"/>
        <function-ref name="source" scoped="" ref="0x412b7e50"/>
        <function-ref name="address" scoped="" ref="0x412b6010"/>
        <function-ref name="destination" scoped="" ref="0x412b60f0"/>
        <function-ref name="setSource" scoped="" ref="0x412b61d0"/>
        <function-ref name="setDestination" scoped="" ref="0x412b62b0"/>
        <function-ref name="type" scoped="" ref="0x412b6390"/>
        <function-ref name="setType" scoped="" ref="0x412b6470"/>
        <function-ref name="isForMe" scoped="" ref="0x412b6550"/>
        <function-ref name="setGroup" scoped="" ref="0x412b6630"/>
        <function-ref name="localGroup" scoped="" ref="0x412b6710"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40c77a08" loc="43:/root/Projects/tinyos-main-read-only/tos/system/AMQueueP.nc">
      <component-ref qname="AMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40c77a08"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40c77be0"/>
        <function-ref name="getPayload" scoped="" ref="0x40c77cc0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40c77da0"/>
        <function-ref name="cancel" scoped="" ref="0x40c77e80"/>
        <function-ref name="sendDone" scoped="" ref="0x40c74010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40ca20a8" loc="48:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40ca20a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ca2290"/>
        <function-ref name="getPayload" scoped="" ref="0x40ca2370"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40ca2450"/>
        <function-ref name="cancel" scoped="" ref="0x40ca2530"/>
        <function-ref name="sendDone" scoped="" ref="0x40ca2610"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40ca3908" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40ca3908"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ca3af0"/>
        <function-ref name="getPayload" scoped="" ref="0x40ca3bd0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40ca3cb0"/>
        <function-ref name="cancel" scoped="" ref="0x40ca3d90"/>
        <function-ref name="sendDone" scoped="" ref="0x40ca3e70"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40ca13f0" loc="50:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40ca13f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40ca15c8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40ca16a8"/>
        <function-ref name="getPayload" scoped="" ref="0x40ca1788"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40ca1868"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40ca1948"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40ca1ac8" loc="169:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x40ca1ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ca1ca0"/>
        <function-ref name="runTask" scoped="" ref="0x40ca1d80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40ca1f00" loc="126:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x40ca1f00"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40ca00f0"/>
        <function-ref name="runTask" scoped="" ref="0x40ca01d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40ca2750" loc="49:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="AMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40ca2750"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40ca2928"/>
        <function-ref name="source" scoped="" ref="0x40ca2a08"/>
        <function-ref name="address" scoped="" ref="0x40ca2ae8"/>
        <function-ref name="destination" scoped="" ref="0x40ca2bc8"/>
        <function-ref name="setSource" scoped="" ref="0x40ca2ca8"/>
        <function-ref name="setDestination" scoped="" ref="0x40ca2d88"/>
        <function-ref name="type" scoped="" ref="0x40ca2e68"/>
        <function-ref name="setType" scoped="" ref="0x40ca1010"/>
        <function-ref name="isForMe" scoped="" ref="0x40ca10f0"/>
        <function-ref name="setGroup" scoped="" ref="0x40ca11d0"/>
        <function-ref name="localGroup" scoped="" ref="0x40ca12b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40cc2070" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40cc2070"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cc2248"/>
        <function-ref name="payloadLength" scoped="" ref="0x40cc2328"/>
        <function-ref name="getPayload" scoped="" ref="0x40cc2408"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cc24e8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40cc25c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40cc3d30" loc="45:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40cc3d30"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40cc3f08"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40cc2708" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.AMReceiverC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40cc2708"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40cc28e0"/>
        <function-ref name="source" scoped="" ref="0x40cc29c0"/>
        <function-ref name="address" scoped="" ref="0x40cc2aa0"/>
        <function-ref name="destination" scoped="" ref="0x40cc2b80"/>
        <function-ref name="setSource" scoped="" ref="0x40cc2c60"/>
        <function-ref name="setDestination" scoped="" ref="0x40cc2d40"/>
        <function-ref name="type" scoped="" ref="0x40cc2e20"/>
        <function-ref name="setType" scoped="" ref="0x40cc2f00"/>
        <function-ref name="isForMe" scoped="" ref="0x40cbe010"/>
        <function-ref name="setGroup" scoped="" ref="0x40cbe0f0"/>
        <function-ref name="localGroup" scoped="" ref="0x40cbe1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40cbda70" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40cbda70"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40cbdc48"/>
        <function-ref name="payloadLength" scoped="" ref="0x40cbdd28"/>
        <function-ref name="getPayload" scoped="" ref="0x40cbde08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40cbdee8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40cbc010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40cbd758" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40cbd758"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40cbd930"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40cbc150" loc="48:/root/Projects/tinyos-main-read-only/tos/system/AMSnooperC.nc">
      <component-ref qname="CtpP.AMSnooperC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40cbc150"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40cbc328"/>
        <function-ref name="source" scoped="" ref="0x40cbc408"/>
        <function-ref name="address" scoped="" ref="0x40cbc4e8"/>
        <function-ref name="destination" scoped="" ref="0x40cbc5c8"/>
        <function-ref name="setSource" scoped="" ref="0x40cbc6a8"/>
        <function-ref name="setDestination" scoped="" ref="0x40cbc788"/>
        <function-ref name="type" scoped="" ref="0x40cbc868"/>
        <function-ref name="setType" scoped="" ref="0x40cbc948"/>
        <function-ref name="isForMe" scoped="" ref="0x40cbca28"/>
        <function-ref name="setGroup" scoped="" ref="0x40cbcb08"/>
        <function-ref name="localGroup" scoped="" ref="0x40cbcbe8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="RootControl" ref="0x40d69d80" loc="110:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RootControl" scoped="" ref="0x40d69d80"/></type-interface>
      <instance>
        <interfacedef-ref qname="RootControl"/>
      </instance>
      <interface-functions>
        <function-ref name="isRoot" scoped="" ref="0x40d68010"/>
        <function-ref name="setRoot" scoped="" ref="0x40d680f0"/>
        <function-ref name="unsetRoot" scoped="" ref="0x40d681d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="updateRouteTask" ref="0x40d5c468" loc="271:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="updateRouteTask" scoped="" ref="0x40d5c468"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40d5c640"/>
        <function-ref name="runTask" scoped="" ref="0x40d5c720"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CollectionDebug" ref="0x40d5e230" loc="125:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionDebug" scoped="" ref="0x40d5e230"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionDebug"/>
      </instance>
      <interface-functions>
        <function-ref name="logEvent" scoped="" ref="0x40d5e408"/>
        <function-ref name="logEventMsg" scoped="" ref="0x40d5e4e8"/>
        <function-ref name="logEventSimple" scoped="" ref="0x40d5e5c8"/>
        <function-ref name="logEventRoute" scoped="" ref="0x40d5e6a8"/>
        <function-ref name="logEventDbg" scoped="" ref="0x40d5e788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="LinkEstimator" ref="0x40d669e0" loc="119:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="LinkEstimator" scoped="" ref="0x40d669e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="LinkEstimator"/>
      </instance>
      <interface-functions>
        <function-ref name="getReverseQuality" scoped="" ref="0x40d65470"/>
        <function-ref name="txAck" scoped="" ref="0x40d66c98"/>
        <function-ref name="pinNeighbor" scoped="" ref="0x40d66d78"/>
        <function-ref name="txNoAck" scoped="" ref="0x40d66e58"/>
        <function-ref name="insertNeighbor" scoped="" ref="0x40d65010"/>
        <function-ref name="evicted" scoped="" ref="0x40d650f0"/>
        <function-ref name="clearDLQ" scoped="" ref="0x40d651d0"/>
        <function-ref name="unpinNeighbor" scoped="" ref="0x40d652b0"/>
        <function-ref name="getForwardQuality" scoped="" ref="0x40d65390"/>
        <function-ref name="getLinkQuality" scoped="" ref="0x40d66bb8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpRoutingPacket" ref="0x40d67300" loc="113:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpRoutingPacket" scoped="" ref="0x40d67300"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpRoutingPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="clearOptions" scoped="" ref="0x40d674d8"/>
        <function-ref name="setEtx" scoped="" ref="0x40d675b8"/>
        <function-ref name="clearOption" scoped="" ref="0x40d67698"/>
        <function-ref name="getEtx" scoped="" ref="0x40d67778"/>
        <function-ref name="setOption" scoped="" ref="0x40d67858"/>
        <function-ref name="setParent" scoped="" ref="0x40d67938"/>
        <function-ref name="getParent" scoped="" ref="0x40d67a18"/>
        <function-ref name="getOption" scoped="" ref="0x40d67af8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RadioControl" ref="0x40d64250" loc="121:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RadioControl" scoped="" ref="0x40d64250"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40d64428"/>
        <function-ref name="stopDone" scoped="" ref="0x40d64508"/>
        <function-ref name="start" scoped="" ref="0x40d645e8"/>
        <function-ref name="stop" scoped="" ref="0x40d646c8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Random" ref="0x40d5fd98" loc="124:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Random" scoped="" ref="0x40d5fd98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Random"/>
      </instance>
      <interface-functions>
        <function-ref name="rand16" scoped="" ref="0x40d5e010"/>
        <function-ref name="rand32" scoped="" ref="0x40d5e0f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CtpInfo" ref="0x40d68310" loc="111:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpInfo" scoped="" ref="0x40d68310"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="getNeighborLinkQuality" scoped="" ref="0x40d684e8"/>
        <function-ref name="recomputeRoutes" scoped="" ref="0x40d685c8"/>
        <function-ref name="numNeighbors" scoped="" ref="0x40d686a8"/>
        <function-ref name="triggerRouteUpdate" scoped="" ref="0x40d68788"/>
        <function-ref name="getEtx" scoped="" ref="0x40d68868"/>
        <function-ref name="triggerImmediateRouteUpdate" scoped="" ref="0x40d68948"/>
        <function-ref name="setNeighborCongested" scoped="" ref="0x40d68a28"/>
        <function-ref name="getNeighborAddr" scoped="" ref="0x40d68b08"/>
        <function-ref name="getParent" scoped="" ref="0x40d68be8"/>
        <function-ref name="getNeighborRouteQuality" scoped="" ref="0x40d68cc8"/>
        <function-ref name="isNeighborCongested" scoped="" ref="0x40d68da8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="sendBeaconTask" ref="0x40d5c030" loc="390:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="sendBeaconTask" scoped="" ref="0x40d5c030"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40d5c208"/>
        <function-ref name="runTask" scoped="" ref="0x40d5c2e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40d67c38" loc="114:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40d67c38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40d67e10"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconSend" ref="0x40d66010" loc="117:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconSend" scoped="" ref="0x40d66010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40d661e8"/>
        <function-ref name="getPayload" scoped="" ref="0x40d662c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d663a8"/>
        <function-ref name="cancel" scoped="" ref="0x40d66488"/>
        <function-ref name="sendDone" scoped="" ref="0x40d66568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconTimer" ref="0x40d648b8" loc="122:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconTimer" scoped="" ref="0x40d648b8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40d613d8"/>
        <function-ref name="fired" scoped="" ref="0x40d63678"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40d63d80"/>
        <function-ref name="isOneShot" scoped="" ref="0x40d63b28"/>
        <function-ref name="getdt" scoped="" ref="0x40d61888"/>
        <function-ref name="gett0" scoped="" ref="0x40d61630"/>
        <function-ref name="isRunning" scoped="" ref="0x40d638d0"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40d64ee0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40d610b8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40d631a0"/>
        <function-ref name="stop" scoped="" ref="0x40d63420"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RouteTimer" ref="0x40d61b48" loc="123:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RouteTimer" scoped="" ref="0x40d61b48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40d5f6d8"/>
        <function-ref name="fired" scoped="" ref="0x40d60970"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40d5f098"/>
        <function-ref name="isOneShot" scoped="" ref="0x40d60e20"/>
        <function-ref name="getdt" scoped="" ref="0x40d5fb88"/>
        <function-ref name="gett0" scoped="" ref="0x40d5f930"/>
        <function-ref name="isRunning" scoped="" ref="0x40d60bc8"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40d60218"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40d5f3b8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40d60498"/>
        <function-ref name="stop" scoped="" ref="0x40d60718"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CtpCongestion" ref="0x40d5e8c8" loc="126:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CtpCongestion" scoped="" ref="0x40d5e8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="CtpCongestion"/>
      </instance>
      <interface-functions>
        <function-ref name="isCongested" scoped="" ref="0x40d5eaa0"/>
        <function-ref name="setClientCongested" scoped="" ref="0x40d5eb80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CompareBit" ref="0x40d5ecc0" loc="128:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareBit" scoped="" ref="0x40d5ecc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="CompareBit"/>
      </instance>
      <interface-functions>
        <function-ref name="shouldInsert" scoped="" ref="0x40d5ee98"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="BeaconReceive" ref="0x40d666c8" loc="118:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="BeaconReceive" scoped="" ref="0x40d666c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40d668a0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40d655b0" loc="120:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40d655b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40d65788"/>
        <function-ref name="source" scoped="" ref="0x40d65868"/>
        <function-ref name="address" scoped="" ref="0x40d65948"/>
        <function-ref name="destination" scoped="" ref="0x40d65a28"/>
        <function-ref name="setSource" scoped="" ref="0x40d65b08"/>
        <function-ref name="setDestination" scoped="" ref="0x40d65be8"/>
        <function-ref name="type" scoped="" ref="0x40d65cc8"/>
        <function-ref name="setType" scoped="" ref="0x40d65da8"/>
        <function-ref name="isForMe" scoped="" ref="0x40d65e88"/>
        <function-ref name="setGroup" scoped="" ref="0x40d64010"/>
        <function-ref name="localGroup" scoped="" ref="0x40d640f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40d68ee8" loc="112:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40d68ee8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40d670e0"/>
        <function-ref name="stop" scoped="" ref="0x40d671c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Routing" ref="0x40d697c8" loc="109:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingEngineP.nc">
      <component-ref qname="CtpP.Router"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Routing" scoped="" ref="0x40d697c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
      </instance>
      <interface-functions>
        <function-ref name="hasRoute" scoped="" ref="0x40d699a0"/>
        <function-ref name="routeFound" scoped="" ref="0x40d69a80"/>
        <function-ref name="nextHop" scoped="" ref="0x40d69b60"/>
        <function-ref name="noRoute" scoped="" ref="0x40d69c40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40d576a8" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="CtpP.RetxmitTimer"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40d576a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40d85248"/>
        <function-ref name="fired" scoped="" ref="0x40d564e8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40d56bf0"/>
        <function-ref name="isOneShot" scoped="" ref="0x40d56998"/>
        <function-ref name="getdt" scoped="" ref="0x40d856f8"/>
        <function-ref name="gett0" scoped="" ref="0x40d854a0"/>
        <function-ref name="isRunning" scoped="" ref="0x40d56740"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40d57cd0"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40d56f10"/>
        <function-ref name="startOneShot" scoped="" ref="0x40d56010"/>
        <function-ref name="stop" scoped="" ref="0x40d56290"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40d82a58" loc="49:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40d82a58"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40d82c30"/>
        <function-ref name="getPayload" scoped="" ref="0x40d82d10"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d82df0"/>
        <function-ref name="cancel" scoped="" ref="0x40d82ed0"/>
        <function-ref name="sendDone" scoped="" ref="0x40d81010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40d81150" loc="50:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40d81150"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40d81328"/>
        <function-ref name="payloadLength" scoped="" ref="0x40d81408"/>
        <function-ref name="getPayload" scoped="" ref="0x40d814e8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d815c8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40d816a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40d817e8" loc="51:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40d817e8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40d819c0"/>
        <function-ref name="source" scoped="" ref="0x40d81aa0"/>
        <function-ref name="address" scoped="" ref="0x40d81b80"/>
        <function-ref name="destination" scoped="" ref="0x40d81c60"/>
        <function-ref name="setSource" scoped="" ref="0x40d81d40"/>
        <function-ref name="setDestination" scoped="" ref="0x40d81e20"/>
        <function-ref name="type" scoped="" ref="0x40d81f00"/>
        <function-ref name="setType" scoped="" ref="0x40d7f010"/>
        <function-ref name="isForMe" scoped="" ref="0x40d7f0f0"/>
        <function-ref name="setGroup" scoped="" ref="0x40d7f1d0"/>
        <function-ref name="localGroup" scoped="" ref="0x40d7f2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x40d7f410" loc="52:/root/Projects/tinyos-main-read-only/tos/system/AMSenderC.nc">
      <component-ref qname="CtpP.SendControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x40d7f410"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40d7f5e8"/>
        <function-ref name="noAck" scoped="" ref="0x40d7f6c8"/>
        <function-ref name="wasAcked" scoped="" ref="0x40d7f7a8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x41316010" loc="49:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x41316010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x413161e8"/>
        <function-ref name="getPayload" scoped="" ref="0x413162c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x413163a8"/>
        <function-ref name="cancel" scoped="" ref="0x41316488"/>
        <function-ref name="sendDone" scoped="" ref="0x41316568"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x413166a8" loc="50:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x413166a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41316880"/>
        <function-ref name="payloadLength" scoped="" ref="0x41316960"/>
        <function-ref name="getPayload" scoped="" ref="0x41316a40"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x41316b20"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x41316c00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x41316d40" loc="51:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x41316d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x41316f18"/>
        <function-ref name="source" scoped="" ref="0x41315010"/>
        <function-ref name="address" scoped="" ref="0x413150f0"/>
        <function-ref name="destination" scoped="" ref="0x413151d0"/>
        <function-ref name="setSource" scoped="" ref="0x413152b0"/>
        <function-ref name="setDestination" scoped="" ref="0x41315390"/>
        <function-ref name="type" scoped="" ref="0x41315470"/>
        <function-ref name="setType" scoped="" ref="0x41315550"/>
        <function-ref name="isForMe" scoped="" ref="0x41315630"/>
        <function-ref name="setGroup" scoped="" ref="0x41315710"/>
        <function-ref name="localGroup" scoped="" ref="0x413157f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x41315950" loc="52:/root/Projects/tinyos-main-read-only/tos/system/DirectAMSenderC.nc">
      <component-ref qname="CtpP.SendControl.SenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x41315950"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x41315b28"/>
        <function-ref name="noAck" scoped="" ref="0x41315c08"/>
        <function-ref name="wasAcked" scoped="" ref="0x41315ce8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x41310728" loc="44:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x41310728"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x41310900"/>
        <function-ref name="getPayload" scoped="" ref="0x413109e0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x41310ac0"/>
        <function-ref name="cancel" scoped="" ref="0x41310ba0"/>
        <function-ref name="sendDone" scoped="" ref="0x41310c80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x41310df0" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x41310df0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x4130f010"/>
        <function-ref name="getPayload" scoped="" ref="0x4130f0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x4130f1d0"/>
        <function-ref name="cancel" scoped="" ref="0x4130f2b0"/>
        <function-ref name="sendDone" scoped="" ref="0x4130f390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x4130f4d0" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="CtpP.SendControl.SenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x4130f4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x4130f6a8"/>
        <function-ref name="source" scoped="" ref="0x4130f788"/>
        <function-ref name="address" scoped="" ref="0x4130f868"/>
        <function-ref name="destination" scoped="" ref="0x4130f948"/>
        <function-ref name="setSource" scoped="" ref="0x4130fa28"/>
        <function-ref name="setDestination" scoped="" ref="0x4130fb08"/>
        <function-ref name="type" scoped="" ref="0x4130fbe8"/>
        <function-ref name="setType" scoped="" ref="0x4130fcc8"/>
        <function-ref name="isForMe" scoped="" ref="0x4130fda8"/>
        <function-ref name="setGroup" scoped="" ref="0x4130fe88"/>
        <function-ref name="localGroup" scoped="" ref="0x4130e010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40d7ed60" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40d7ed60"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40d7d010"/>
        <function-ref name="payloadLength" scoped="" ref="0x40d7d0f0"/>
        <function-ref name="getPayload" scoped="" ref="0x40d7d1d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d7d2b0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40d7d390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40d7ea48" loc="45:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40d7ea48"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40d7ec20"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40d7d4d0" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMReceiverC.nc">
      <component-ref qname="CtpP.ReceiveControl"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40d7d4d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40d7d6a8"/>
        <function-ref name="source" scoped="" ref="0x40d7d788"/>
        <function-ref name="address" scoped="" ref="0x40d7d868"/>
        <function-ref name="destination" scoped="" ref="0x40d7d948"/>
        <function-ref name="setSource" scoped="" ref="0x40d7da28"/>
        <function-ref name="setDestination" scoped="" ref="0x40d7db08"/>
        <function-ref name="type" scoped="" ref="0x40d7dbe8"/>
        <function-ref name="setType" scoped="" ref="0x40d7dcc8"/>
        <function-ref name="isForMe" scoped="" ref="0x40d7dda8"/>
        <function-ref name="setGroup" scoped="" ref="0x40d7de88"/>
        <function-ref name="localGroup" scoped="" ref="0x40d7c010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40d9cd40" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="EasyCollectionAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40d9cd40"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40d9cf18"/>
        <function-ref name="payloadLength" scoped="" ref="0x40d9b010"/>
        <function-ref name="getPayload" scoped="" ref="0x40d9b0f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d9b1d0"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40d9b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40d9c6a8" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderC.nc">
      <component-ref qname="EasyCollectionAppC.CollectionSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40d9c6a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40d9c880"/>
        <function-ref name="getPayload" scoped="" ref="0x40d9c960"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d9ca40"/>
        <function-ref name="cancel" scoped="" ref="0x40d9cb20"/>
        <function-ref name="sendDone" scoped="" ref="0x40d9cc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x41346230" loc="38:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="EasyCollectionAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x41346230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x41346408"/>
        <function-ref name="payloadLength" scoped="" ref="0x413464e8"/>
        <function-ref name="getPayload" scoped="" ref="0x413465c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x413466a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x41346788"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x41348ae0" loc="37:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CollectionSenderP.nc">
      <component-ref qname="EasyCollectionAppC.CollectionSenderC.CollectionSenderP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x41348ae0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x41348cb8"/>
        <function-ref name="getPayload" scoped="" ref="0x41348d98"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x41348e78"/>
        <function-ref name="cancel" scoped="" ref="0x41346010"/>
        <function-ref name="sendDone" scoped="" ref="0x413460f0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CollectionId" ref="0x41343328" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionIdP.nc">
      <component-ref qname="EasyCollectionAppC.CollectionSenderC.CollectionSenderP.CollectionIdP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CollectionId" scoped="" ref="0x41343328"/></type-interface>
      <instance>
        <interfacedef-ref qname="CollectionId"/>
      </instance>
      <interface-functions>
        <function-ref name="fetch" scoped="" ref="0x41343500"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40d9bf28" loc="45:/root/Projects/tinyos-main-read-only/tos/system/TimerMilliC.nc">
      <component-ref qname="EasyCollectionAppC.TimerMilliC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40d9bf28"/></type-interface>
      <instance>
        <interfacedef-ref qname="Timer"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036fc50"/>
            <typename><typedef-ref name="TMilli" ref="0x4036fe18"/></typename>
          </type-tag>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="getNow" scoped="" ref="0x40d8fa18"/>
        <function-ref name="fired" scoped="" ref="0x40d90cb8"/>
        <function-ref name="startPeriodicAt" scoped="" ref="0x40d8f3d8"/>
        <function-ref name="isOneShot" scoped="" ref="0x40d8f180"/>
        <function-ref name="getdt" scoped="" ref="0x40d8fec8"/>
        <function-ref name="gett0" scoped="" ref="0x40d8fc70"/>
        <function-ref name="isRunning" scoped="" ref="0x40d90f10"/>
        <function-ref name="startPeriodic" scoped="" ref="0x40d90560"/>
        <function-ref name="startOneShotAt" scoped="" ref="0x40d8f6f8"/>
        <function-ref name="startOneShot" scoped="" ref="0x40d907e0"/>
        <function-ref name="stop" scoped="" ref="0x40d90a60"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40d8eb90" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40d8eb90"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40d8ed68"/>
        <function-ref name="stopDone" scoped="" ref="0x40d8ee48"/>
        <function-ref name="start" scoped="" ref="0x40d8ef28"/>
        <function-ref name="stop" scoped="" ref="0x40d8a018"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40d8a478" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40d8a478"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40d8a650"/>
        <function-ref name="getPayload" scoped="" ref="0x40d8a730"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d8a810"/>
        <function-ref name="cancel" scoped="" ref="0x40d8a8f0"/>
        <function-ref name="sendDone" scoped="" ref="0x40d8a9d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40d891d0" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40d891d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40d893a8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40d89488"/>
        <function-ref name="getPayload" scoped="" ref="0x40d89568"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40d89648"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40d89728"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40d8ae38" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40d8ae38"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40d89050"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40d88ae8" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40d88ae8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40d88cc0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40d88da0"/>
        <function-ref name="led1On" scoped="" ref="0x40d88e80"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40db7010"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40db70f0"/>
        <function-ref name="get" scoped="" ref="0x40db71d0"/>
        <function-ref name="led1Off" scoped="" ref="0x40db72b0"/>
        <function-ref name="led2Off" scoped="" ref="0x40db7630"/>
        <function-ref name="set" scoped="" ref="0x40db7390"/>
        <function-ref name="led0On" scoped="" ref="0x40db7470"/>
        <function-ref name="led2On" scoped="" ref="0x40db7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40d885b0" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40d885b0"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40d88788"/>
        <function-ref name="noAck" scoped="" ref="0x40d88868"/>
        <function-ref name="wasAcked" scoped="" ref="0x40d88948"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40d898c0" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageC.nc">
      <component-ref qname="SerialActiveMessageC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40d898c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40d89a98"/>
        <function-ref name="source" scoped="" ref="0x40d89b78"/>
        <function-ref name="address" scoped="" ref="0x40d89c58"/>
        <function-ref name="destination" scoped="" ref="0x40d89d38"/>
        <function-ref name="setSource" scoped="" ref="0x40d89e18"/>
        <function-ref name="setDestination" scoped="" ref="0x40d89ef8"/>
        <function-ref name="type" scoped="" ref="0x40d88010"/>
        <function-ref name="setType" scoped="" ref="0x40d880f0"/>
        <function-ref name="isForMe" scoped="" ref="0x40d881d0"/>
        <function-ref name="setGroup" scoped="" ref="0x40d882b0"/>
        <function-ref name="localGroup" scoped="" ref="0x40d88390"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubSend" ref="0x40de5360" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubSend" scoped="" ref="0x40de5360"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40de5538"/>
        <function-ref name="getPayload" scoped="" ref="0x40de5618"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40de56f8"/>
        <function-ref name="cancel" scoped="" ref="0x40de57d8"/>
        <function-ref name="sendDone" scoped="" ref="0x40de58b8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SubReceive" ref="0x40de5a18" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SubReceive" scoped="" ref="0x40de5a18"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40de5bf0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40db6108" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40db6108"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40db62f0"/>
        <function-ref name="getPayload" scoped="" ref="0x40db63d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40db64b0"/>
        <function-ref name="cancel" scoped="" ref="0x40db6590"/>
        <function-ref name="sendDone" scoped="" ref="0x40db6670"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40db5770" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40db5770"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40db5948"/>
        <function-ref name="payloadLength" scoped="" ref="0x40db5a28"/>
        <function-ref name="getPayload" scoped="" ref="0x40db5b08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40db5be8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40db5cc8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40db6848" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40db6848"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40db6a30"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="PacketAcknowledgements" ref="0x40db5e08" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketAcknowledgements" scoped="" ref="0x40db5e08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40de5010"/>
        <function-ref name="noAck" scoped="" ref="0x40de50f0"/>
        <function-ref name="wasAcked" scoped="" ref="0x40de51d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40db6b70" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialActiveMessageP.nc">
      <component-ref qname="SerialActiveMessageC.AM"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40db6b70"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40db6d48"/>
        <function-ref name="source" scoped="" ref="0x40db6e28"/>
        <function-ref name="address" scoped="" ref="0x40db6f08"/>
        <function-ref name="destination" scoped="" ref="0x40db5010"/>
        <function-ref name="setSource" scoped="" ref="0x40db50f0"/>
        <function-ref name="setDestination" scoped="" ref="0x40db51d0"/>
        <function-ref name="type" scoped="" ref="0x40db52b0"/>
        <function-ref name="setType" scoped="" ref="0x40db5390"/>
        <function-ref name="isForMe" scoped="" ref="0x40db5470"/>
        <function-ref name="setGroup" scoped="" ref="0x40db5550"/>
        <function-ref name="localGroup" scoped="" ref="0x40db5630"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40de11d0" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40de11d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40de13a8"/>
        <function-ref name="stopDone" scoped="" ref="0x40de1488"/>
        <function-ref name="start" scoped="" ref="0x40de1568"/>
        <function-ref name="stop" scoped="" ref="0x40de1648"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40ddf100" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40ddf100"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ddf2d8"/>
        <function-ref name="getPayload" scoped="" ref="0x40ddf3b8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40ddf498"/>
        <function-ref name="cancel" scoped="" ref="0x40ddf578"/>
        <function-ref name="sendDone" scoped="" ref="0x40ddf658"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40de4e10" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40de4e10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40de1010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40de1a90" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40de1a90"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40de1c68"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40ddaca8" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40ddaca8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40ddae80"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40dde010"/>
        <function-ref name="led1On" scoped="" ref="0x40dde0f0"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40dde1d0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40dde2b0"/>
        <function-ref name="get" scoped="" ref="0x40dde390"/>
        <function-ref name="led1Off" scoped="" ref="0x40dde470"/>
        <function-ref name="led2Off" scoped="" ref="0x40dde7f0"/>
        <function-ref name="set" scoped="" ref="0x40dde550"/>
        <function-ref name="led0On" scoped="" ref="0x40dde630"/>
        <function-ref name="led2On" scoped="" ref="0x40dde710"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialPacketInfo" ref="0x40dda7a0" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherC.nc">
      <component-ref qname="SerialDispatcherC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialPacketInfo" scoped="" ref="0x40dda7a0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40dda978"/>
        <function-ref name="offset" scoped="" ref="0x40ddaa58"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40ddab38"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SplitControl" ref="0x40dd81d0" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SplitControl" scoped="" ref="0x40dd81d0"/></type-interface>
      <instance>
        <interfacedef-ref qname="SplitControl"/>
      </instance>
      <interface-functions>
        <function-ref name="startDone" scoped="" ref="0x40dd83a8"/>
        <function-ref name="stopDone" scoped="" ref="0x40dd8488"/>
        <function-ref name="start" scoped="" ref="0x40dd8568"/>
        <function-ref name="stop" scoped="" ref="0x40dd8648"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="stopDoneTask" ref="0x40e33350" loc="332:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="stopDoneTask" scoped="" ref="0x40e33350"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e33528"/>
        <function-ref name="runTask" scoped="" ref="0x40e33608"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialControl" ref="0x40dd0340" loc="74:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialControl" scoped="" ref="0x40dd0340"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40dd0518"/>
        <function-ref name="stop" scoped="" ref="0x40dd05f8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="RunTx" ref="0x40def788" loc="191:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="RunTx" scoped="" ref="0x40def788"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40def960"/>
        <function-ref name="runTask" scoped="" ref="0x40defa40"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40ddede8" loc="65:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40ddede8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40dd8010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFlush" ref="0x40dfc358" loc="75:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFlush" scoped="" ref="0x40dfc358"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFlush"/>
      </instance>
      <interface-functions>
        <function-ref name="flushDone" scoped="" ref="0x40dfc530"/>
        <function-ref name="flush" scoped="" ref="0x40dfc610"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="startDoneTask" ref="0x40e04bd0" loc="322:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="startDoneTask" scoped="" ref="0x40e04bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e04da8"/>
        <function-ref name="runTask" scoped="" ref="0x40e04e88"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SerialFrameComm" ref="0x40e00c80" loc="72:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40e00c80"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40e00e58"/>
        <function-ref name="resetSend" scoped="" ref="0x40dd2010"/>
        <function-ref name="dataReceived" scoped="" ref="0x40dd20f0"/>
        <function-ref name="resetReceive" scoped="" ref="0x40dd21d0"/>
        <function-ref name="putData" scoped="" ref="0x40dd22b0"/>
        <function-ref name="putDone" scoped="" ref="0x40dd2390"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40dd2470"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40dd25e0" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40dd25e0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40dd27b8"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40dd2898"/>
        <function-ref name="led1On" scoped="" ref="0x40dd2978"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40dd2a58"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40dd2b38"/>
        <function-ref name="get" scoped="" ref="0x40dd2c18"/>
        <function-ref name="led1Off" scoped="" ref="0x40dd2cf8"/>
        <function-ref name="led2Off" scoped="" ref="0x40dd00f0"/>
        <function-ref name="set" scoped="" ref="0x40dd2dd8"/>
        <function-ref name="led0On" scoped="" ref="0x40dd2eb8"/>
        <function-ref name="led2On" scoped="" ref="0x40dd0010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="defaultSerialFlushTask" ref="0x40e31010" loc="341:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="defaultSerialFlushTask" scoped="" ref="0x40e31010"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e311e8"/>
        <function-ref name="runTask" scoped="" ref="0x40e312c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SendBytePacket" ref="0x40dd3960" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40dd3960"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40dd3b38"/>
        <function-ref name="nextByte" scoped="" ref="0x40dd3c18"/>
        <function-ref name="startSend" scoped="" ref="0x40dd3cf8"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40dd3dd8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="ReceiveBytePacket" ref="0x40dd1a80" loc="68:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialP.nc">
      <component-ref qname="SerialP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40dd1a80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40dd1c58"/>
        <function-ref name="byteReceived" scoped="" ref="0x40dd1d38"/>
        <function-ref name="endPacket" scoped="" ref="0x40dd1e18"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="receiveTask" ref="0x40e8b510" loc="275:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="receiveTask" scoped="" ref="0x40e8b510"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e8b6e8"/>
        <function-ref name="runTask" scoped="" ref="0x40e8b7c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40e8e108" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40e8e108"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e8e2f0"/>
        <function-ref name="getPayload" scoped="" ref="0x40e8e3d0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40e8e4b0"/>
        <function-ref name="cancel" scoped="" ref="0x40e8e590"/>
        <function-ref name="sendDone" scoped="" ref="0x40e8e670"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="signalSendDone" ref="0x40e8b948" loc="158:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="signalSendDone" scoped="" ref="0x40e8b948"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40e8bb20"/>
        <function-ref name="runTask" scoped="" ref="0x40e8bc00"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Receive" ref="0x40e5ed10" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Receive" scoped="" ref="0x40e5ed10"/></type-interface>
      <instance>
        <interfacedef-ref qname="Receive"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="receive" scoped="" ref="0x40e5eef8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="PacketInfo" ref="0x40e8e898" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="PacketInfo" scoped="" ref="0x40e8e898"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uart_id_t" ref="0x4041f348"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40e8ea80"/>
        <function-ref name="offset" scoped="" ref="0x40e8eb60"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40e8ec40"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40e8d8c8" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40e8d8c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40e8daa0"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40e8db80"/>
        <function-ref name="led1On" scoped="" ref="0x40e8dc60"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40e8dd40"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40e8de20"/>
        <function-ref name="get" scoped="" ref="0x40e8df00"/>
        <function-ref name="led1Off" scoped="" ref="0x40e8b010"/>
        <function-ref name="led2On" scoped="" ref="0x40e8b390"/>
        <function-ref name="set" scoped="" ref="0x40e8b1d0"/>
        <function-ref name="led2Off" scoped="" ref="0x40e8b0f0"/>
        <function-ref name="led0On" scoped="" ref="0x40e8b2b0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="SendBytePacket" ref="0x40e8d310" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SendBytePacket" scoped="" ref="0x40e8d310"/></type-interface>
      <instance>
        <interfacedef-ref qname="SendBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="completeSend" scoped="" ref="0x40e8d4e8"/>
        <function-ref name="nextByte" scoped="" ref="0x40e8d5c8"/>
        <function-ref name="startSend" scoped="" ref="0x40e8d6a8"/>
        <function-ref name="sendCompleted" scoped="" ref="0x40e8d788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="ReceiveBytePacket" ref="0x40e8ed80" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialDispatcherP.nc">
      <component-ref qname="SerialDispatcherC.SerialDispatcherP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="ReceiveBytePacket" scoped="" ref="0x40e8ed80"/></type-interface>
      <instance>
        <interfacedef-ref qname="ReceiveBytePacket"/>
      </instance>
      <interface-functions>
        <function-ref name="startPacket" scoped="" ref="0x40e8d010"/>
        <function-ref name="byteReceived" scoped="" ref="0x40e8d0f0"/>
        <function-ref name="endPacket" scoped="" ref="0x40e8d1d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="UartStream" ref="0x40eb20f0" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40eb20f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40eb22c8"/>
        <function-ref name="receivedByte" scoped="" ref="0x40eb23a8"/>
        <function-ref name="receive" scoped="" ref="0x40eb2488"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40eb2568"/>
        <function-ref name="receiveDone" scoped="" ref="0x40eb2648"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40eb2728"/>
        <function-ref name="sendDone" scoped="" ref="0x40eb2808"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="SerialFrameComm" ref="0x40e8ad48" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="SerialFrameComm" scoped="" ref="0x40e8ad48"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialFrameComm"/>
      </instance>
      <interface-functions>
        <function-ref name="putDelimiter" scoped="" ref="0x40e8af20"/>
        <function-ref name="resetSend" scoped="" ref="0x40e87018"/>
        <function-ref name="dataReceived" scoped="" ref="0x40e870f8"/>
        <function-ref name="resetReceive" scoped="" ref="0x40e871d8"/>
        <function-ref name="putData" scoped="" ref="0x40e872b8"/>
        <function-ref name="putDone" scoped="" ref="0x40e87398"/>
        <function-ref name="delimiterReceived" scoped="" ref="0x40e87478"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Leds" ref="0x40eb2978" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/HdlcTranslateC.nc">
      <component-ref qname="HdlcTranslateC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Leds" scoped="" ref="0x40eb2978"/></type-interface>
      <instance>
        <interfacedef-ref qname="Leds"/>
      </instance>
      <interface-functions>
        <function-ref name="led0Off" scoped="" ref="0x40eb2b50"/>
        <function-ref name="led0Toggle" scoped="" ref="0x40eb2c30"/>
        <function-ref name="led1On" scoped="" ref="0x40eb2d10"/>
        <function-ref name="led1Toggle" scoped="" ref="0x40eb2df0"/>
        <function-ref name="led2Toggle" scoped="" ref="0x40eb2ed0"/>
        <function-ref name="get" scoped="" ref="0x40e86010"/>
        <function-ref name="led1Off" scoped="" ref="0x40e860f0"/>
        <function-ref name="led2Off" scoped="" ref="0x40e86470"/>
        <function-ref name="set" scoped="" ref="0x40e861d0"/>
        <function-ref name="led0On" scoped="" ref="0x40e862b0"/>
        <function-ref name="led2On" scoped="" ref="0x40e86390"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40ea1c28" loc="42:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40ea1c28"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ea1e00"/>
        <function-ref name="receive" scoped="" ref="0x40ea1ee0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40e89dc0" loc="41:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40e89dc0"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ea4010"/>
        <function-ref name="receivedByte" scoped="" ref="0x40ea40f0"/>
        <function-ref name="receive" scoped="" ref="0x40ea41d0"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40ea42b0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40ea4390"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40ea4470"/>
        <function-ref name="sendDone" scoped="" ref="0x40ea4550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40e89940" loc="40:/root/Projects/tinyos-main-read-only/tos/platforms/mica/PlatformSerialC.nc">
      <component-ref qname="PlatformSerialC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40e89940"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40e89b18"/>
        <function-ref name="stop" scoped="" ref="0x40e89bf8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40ea3ac8" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40ea3ac8"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40ea3ca0"/>
        <function-ref name="receive" scoped="" ref="0x40ea3d80"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40e9f010" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40e9f010"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e9f1e8"/>
        <function-ref name="receivedByte" scoped="" ref="0x40e9f2c8"/>
        <function-ref name="receive" scoped="" ref="0x40e9f3a8"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40e9f488"/>
        <function-ref name="receiveDone" scoped="" ref="0x40e9f568"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40e9f648"/>
        <function-ref name="sendDone" scoped="" ref="0x40e9f728"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40e9fa88" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40e9fa88"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40e9e200"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40e9e6f0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40e9e478"/>
        <function-ref name="overflow" scoped="" ref="0x40e9e968"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40ea3658" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128Uart0C.nc">
      <component-ref qname="Atm128Uart0C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40ea3658"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ea3830"/>
        <function-ref name="stop" scoped="" ref="0x40ea3910"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartByte" ref="0x40e9c250" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartByte" scoped="" ref="0x40e9c250"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartByte"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e9c428"/>
        <function-ref name="receive" scoped="" ref="0x40e9c508"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartTxControl" ref="0x40e9cf00" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartTxControl" scoped="" ref="0x40e9cf00"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ede0f0"/>
        <function-ref name="stop" scoped="" ref="0x40ede1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40e9dab0" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40e9dab0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40e9dc88"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="UartStream" ref="0x40e9c668" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="UartStream" scoped="" ref="0x40e9c668"/></type-interface>
      <instance>
        <interfacedef-ref qname="UartStream"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40e9c840"/>
        <function-ref name="receivedByte" scoped="" ref="0x40e9c920"/>
        <function-ref name="receive" scoped="" ref="0x40e9ca00"/>
        <function-ref name="enableReceiveInterrupt" scoped="" ref="0x40e9cae0"/>
        <function-ref name="receiveDone" scoped="" ref="0x40e9cbc0"/>
        <function-ref name="disableReceiveInterrupt" scoped="" ref="0x40e9cca0"/>
        <function-ref name="sendDone" scoped="" ref="0x40e9cd80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Counter" ref="0x40edd450" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40edd450"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40eddba0"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40edc0a8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40edde18"/>
        <function-ref name="overflow" scoped="" ref="0x40edc320"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUart" ref="0x40ede788" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart" scoped="" ref="0x40ede788"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40ede960"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40edea40"/>
        <function-ref name="rxDone" scoped="" ref="0x40edeb20"/>
        <function-ref name="txDone" scoped="" ref="0x40edec00"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40edece0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40ededc0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40edeea0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40edd010"/>
        <function-ref name="tx" scoped="" ref="0x40edd0f0"/>
        <function-ref name="rx" scoped="" ref="0x40edd1d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="StdControl" ref="0x40e9dde8" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="StdControl" scoped="" ref="0x40e9dde8"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40e9c010"/>
        <function-ref name="stop" scoped="" ref="0x40e9c0f0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="HplUartRxControl" ref="0x40ede350" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/Atm128UartP.nc">
      <component-ref qname="Atm128Uart0C.UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUartRxControl" scoped="" ref="0x40ede350"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ede528"/>
        <function-ref name="stop" scoped="" ref="0x40ede608"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40f00880" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40f00880"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40f00a58"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40f00b38"/>
        <function-ref name="rxDone" scoped="" ref="0x40f00c18"/>
        <function-ref name="txDone" scoped="" ref="0x40f00cf8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40f00dd8"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40f00eb8"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40eff010"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40eff0f0"/>
        <function-ref name="tx" scoped="" ref="0x40eff1d0"/>
        <function-ref name="rx" scoped="" ref="0x40eff2b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40efff10" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40efff10"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40efe108"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40efe1e8"/>
        <function-ref name="rxDone" scoped="" ref="0x40efe2c8"/>
        <function-ref name="txDone" scoped="" ref="0x40efe3a8"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40efe488"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40efe568"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40efe648"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40efe728"/>
        <function-ref name="tx" scoped="" ref="0x40efe808"/>
        <function-ref name="rx" scoped="" ref="0x40efe8e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40f00388" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40f00388"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40f00560"/>
        <function-ref name="stop" scoped="" ref="0x40f00640"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40eff508" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40eff508"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40eff6e0"/>
        <function-ref name="stop" scoped="" ref="0x40eff7c0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40effa18" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40effa18"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40effbf0"/>
        <function-ref name="stop" scoped="" ref="0x40effcd0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40f01e38" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartC.nc">
      <component-ref qname="HplAtm128UartC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40f01e38"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40f00050"/>
        <function-ref name="stop" scoped="" ref="0x40f00130"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0Init" ref="0x40efb110" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0Init" scoped="" ref="0x40efb110"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40efb2e8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart0" ref="0x40efa010" loc="83:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart0" scoped="" ref="0x40efa010"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40efa1e8"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40efa2c8"/>
        <function-ref name="rxDone" scoped="" ref="0x40efa3a8"/>
        <function-ref name="txDone" scoped="" ref="0x40efa488"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40efa568"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40efa648"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40efa728"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40efa808"/>
        <function-ref name="tx" scoped="" ref="0x40efa8e8"/>
        <function-ref name="rx" scoped="" ref="0x40efa9c8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1Init" ref="0x40efabd8" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1Init" scoped="" ref="0x40efabd8"/></type-interface>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40efadb0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="HplUart1" ref="0x40ef9b08" loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="HplUart1" scoped="" ref="0x40ef9b08"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Uart"/>
      </instance>
      <interface-functions>
        <function-ref name="isTxEmpty" scoped="" ref="0x40ef9ce0"/>
        <function-ref name="enableRxIntr" scoped="" ref="0x40ef9dc0"/>
        <function-ref name="rxDone" scoped="" ref="0x40ef9ea0"/>
        <function-ref name="txDone" scoped="" ref="0x40ef7010"/>
        <function-ref name="enableTxIntr" scoped="" ref="0x40ef70f0"/>
        <function-ref name="disableTxIntr" scoped="" ref="0x40ef71d0"/>
        <function-ref name="disableRxIntr" scoped="" ref="0x40ef72b0"/>
        <function-ref name="isRxEmpty" scoped="" ref="0x40ef7390"/>
        <function-ref name="tx" scoped="" ref="0x40ef7470"/>
        <function-ref name="rx" scoped="" ref="0x40ef7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0RxControl" ref="0x40efba90" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0RxControl" scoped="" ref="0x40efba90"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40efbc68"/>
        <function-ref name="stop" scoped="" ref="0x40efbd48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1TxControl" ref="0x40ef90c0" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1TxControl" scoped="" ref="0x40ef90c0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ef9298"/>
        <function-ref name="stop" scoped="" ref="0x40ef9378"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart1RxControl" ref="0x40ef95f0" loc="87:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart1RxControl" scoped="" ref="0x40ef95f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40ef97c8"/>
        <function-ref name="stop" scoped="" ref="0x40ef98a8"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Atm128Calibrate" ref="0x40ef7748" loc="90:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Atm128Calibrate" scoped="" ref="0x40ef7748"/></type-interface>
      <instance>
        <interfacedef-ref qname="Atm128Calibrate"/>
      </instance>
      <interface-functions>
        <function-ref name="baudrateRegister" scoped="" ref="0x40ef7920"/>
        <function-ref name="cyclesPerJiffy" scoped="" ref="0x40ef7a00"/>
        <function-ref name="calibrateMicro" scoped="" ref="0x40ef7ae0"/>
        <function-ref name="actualMicro" scoped="" ref="0x40ef7bc0"/>
        <function-ref name="adcPrescaler" scoped="" ref="0x40ef7ca0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="McuPowerState" ref="0x40ef7e88" loc="91:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="McuPowerState" scoped="" ref="0x40ef7e88"/></type-interface>
      <instance>
        <interfacedef-ref qname="McuPowerState"/>
      </instance>
      <interface-functions>
        <function-ref name="update" scoped="" ref="0x40ef6070"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Uart0TxControl" ref="0x40efb560" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128UartP.nc">
      <component-ref qname="HplAtm128UartP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Uart0TxControl" scoped="" ref="0x40efb560"/></type-interface>
      <instance>
        <interfacedef-ref qname="StdControl"/>
      </instance>
      <interface-functions>
        <function-ref name="start" scoped="" ref="0x40efb738"/>
        <function-ref name="stop" scoped="" ref="0x40efb818"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40ea0e98" loc="24:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterMicro32C.nc">
      <component-ref qname="CounterMicro32C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40ea0e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40f2d600"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40f2daf0"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40f2d878"/>
        <function-ref name="overflow" scoped="" ref="0x40f2dd68"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40f2b900" loc="24:/root/Projects/tinyos-main-read-only/tos/platforms/mica/CounterThree16C.nc">
      <component-ref qname="CounterThree16C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40f2b900"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TThree" ref="0x4038fe08"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40f27068"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40f27558"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40f272e0"/>
        <function-ref name="overflow" scoped="" ref="0x40f277d0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40f21530" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40f21530"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40f21708"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x40f217e8"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40f218c8"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x40f219a8"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40f21a88"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40f21b68"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x40f21c48"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x40f21d28"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x40f21e08"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x40f21ee8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40f20258" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x40f20258"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40f55cc0"/>
        <function-ref name="test" scoped="" ref="0x40f557d0"/>
        <function-ref name="get" scoped="" ref="0x40f208a0"/>
        <function-ref name="captured" scoped="" ref="0x40f20db8"/>
        <function-ref name="reset" scoped="" ref="0x40f55068"/>
        <function-ref name="isOn" scoped="" ref="0x40f55a48"/>
        <function-ref name="set" scoped="" ref="0x40f20b18"/>
        <function-ref name="start" scoped="" ref="0x40f552e0"/>
        <function-ref name="stop" scoped="" ref="0x40f55558"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Compare" ref="0x40f543f8" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Compare" scoped="" ref="0x40f543f8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40f529f0"/>
        <function-ref name="fired" scoped="" ref="0x40f52010"/>
        <function-ref name="get" scoped="" ref="0x40f54a40"/>
        <function-ref name="reset" scoped="" ref="0x40f52288"/>
        <function-ref name="isOn" scoped="" ref="0x40f52c68"/>
        <function-ref name="set" scoped="" ref="0x40f54cb8"/>
        <function-ref name="start" scoped="" ref="0x40f52500"/>
        <function-ref name="stop" scoped="" ref="0x40f52778"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40f24240" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3C.nc">
      <component-ref qname="HplAtm128Timer3C"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40f24240"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40f23ca0"/>
        <function-ref name="test" scoped="" ref="0x40f237b0"/>
        <function-ref name="get" scoped="" ref="0x40f24888"/>
        <function-ref name="setScale" scoped="" ref="0x40f23f18"/>
        <function-ref name="getScale" scoped="" ref="0x40f211d0"/>
        <function-ref name="reset" scoped="" ref="0x40f23048"/>
        <function-ref name="overflow" scoped="" ref="0x40f24da0"/>
        <function-ref name="isOn" scoped="" ref="0x40f23a28"/>
        <function-ref name="set" scoped="" ref="0x40f24b00"/>
        <function-ref name="start" scoped="" ref="0x40f232c0"/>
        <function-ref name="stop" scoped="" ref="0x40f23538"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="TimerCtrl" ref="0x40f4ca18" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="TimerCtrl" scoped="" ref="0x40f4ca18"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
      </instance>
      <interface-functions>
        <function-ref name="getInterruptFlag" scoped="" ref="0x40f4cbf0"/>
        <function-ref name="setCtrlCapture" scoped="" ref="0x40f4ccd0"/>
        <function-ref name="getInterruptMask" scoped="" ref="0x40f4cdb0"/>
        <function-ref name="getCtrlCompare" scoped="" ref="0x40f4ce90"/>
        <function-ref name="setInterruptMask" scoped="" ref="0x40f4b010"/>
        <function-ref name="setInterruptFlag" scoped="" ref="0x40f4b0f0"/>
        <function-ref name="getCtrlClock" scoped="" ref="0x40f4b1d0"/>
        <function-ref name="getCtrlCapture" scoped="" ref="0x40f4b2b0"/>
        <function-ref name="setCtrlCompare" scoped="" ref="0x40f4b390"/>
        <function-ref name="setCtrlClock" scoped="" ref="0x40f4b470"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareA" ref="0x40f496c8" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareA" scoped="" ref="0x40f496c8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40f47c90"/>
        <function-ref name="fired" scoped="" ref="0x40f472b0"/>
        <function-ref name="get" scoped="" ref="0x40f49d10"/>
        <function-ref name="reset" scoped="" ref="0x40f47528"/>
        <function-ref name="isOn" scoped="" ref="0x40f47f08"/>
        <function-ref name="set" scoped="" ref="0x40f47010"/>
        <function-ref name="start" scoped="" ref="0x40f477a0"/>
        <function-ref name="stop" scoped="" ref="0x40f47a18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Capture" ref="0x40f4b7a8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Capture" scoped="" ref="0x40f4b7a8"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="setEdge" scoped="" ref="0x40f49288"/>
        <function-ref name="test" scoped="" ref="0x40f4ad30"/>
        <function-ref name="get" scoped="" ref="0x40f4bdf0"/>
        <function-ref name="captured" scoped="" ref="0x40f4a328"/>
        <function-ref name="reset" scoped="" ref="0x40f4a5c8"/>
        <function-ref name="isOn" scoped="" ref="0x40f49010"/>
        <function-ref name="set" scoped="" ref="0x40f4a088"/>
        <function-ref name="start" scoped="" ref="0x40f4a840"/>
        <function-ref name="stop" scoped="" ref="0x40f4aab8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareB" ref="0x40f46340" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareB" scoped="" ref="0x40f46340"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40f45898"/>
        <function-ref name="fired" scoped="" ref="0x40f46ea0"/>
        <function-ref name="get" scoped="" ref="0x40f46988"/>
        <function-ref name="reset" scoped="" ref="0x40f45130"/>
        <function-ref name="isOn" scoped="" ref="0x40f45b10"/>
        <function-ref name="set" scoped="" ref="0x40f46c00"/>
        <function-ref name="start" scoped="" ref="0x40f453a8"/>
        <function-ref name="stop" scoped="" ref="0x40f45620"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="CompareC" ref="0x40f45f28" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CompareC" scoped="" ref="0x40f45f28"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="test" scoped="" ref="0x40f42500"/>
        <function-ref name="fired" scoped="" ref="0x40f43a98"/>
        <function-ref name="get" scoped="" ref="0x40f43580"/>
        <function-ref name="reset" scoped="" ref="0x40f43d10"/>
        <function-ref name="isOn" scoped="" ref="0x40f42778"/>
        <function-ref name="set" scoped="" ref="0x40f437f8"/>
        <function-ref name="start" scoped="" ref="0x40f42010"/>
        <function-ref name="stop" scoped="" ref="0x40f42288"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Timer" ref="0x40f516f0" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer3P.nc">
      <component-ref qname="HplAtm128Timer3P"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40f516f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40f4c1a0"/>
        <function-ref name="test" scoped="" ref="0x40f4ec90"/>
        <function-ref name="get" scoped="" ref="0x40f51d38"/>
        <function-ref name="setScale" scoped="" ref="0x40f4c418"/>
        <function-ref name="getScale" scoped="" ref="0x40f4c6b8"/>
        <function-ref name="reset" scoped="" ref="0x40f4e528"/>
        <function-ref name="overflow" scoped="" ref="0x40f4e2b0"/>
        <function-ref name="isOn" scoped="" ref="0x40f4ef08"/>
        <function-ref name="set" scoped="" ref="0x40f4e010"/>
        <function-ref name="start" scoped="" ref="0x40f4e7a0"/>
        <function-ref name="stop" scoped="" ref="0x40f4ea18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Init" ref="0x40f9e2b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Init" scoped="" ref="0x40f9e2b0"/></type-interface>
      <attribute-value>
        <attribute-ref name="atleastonce" ref="0x403195d0"/>
        <value-structured>
          <type-tag size="I:0" alignment="I:1"><attribute-ref name="atleastonce" ref="0x403195d0"/></type-tag>
        </value-structured>
      </attribute-value>
      <instance>
        <interfacedef-ref qname="Init"/>
      </instance>
      <interface-functions>
        <function-ref name="init" scoped="" ref="0x40f9e488"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40f9e698" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128TimerInitC.nc">
      <component-ref qname="InitThreeP.InitThree"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40f9e698"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40f9b1a0"/>
        <function-ref name="test" scoped="" ref="0x40f9cc90"/>
        <function-ref name="get" scoped="" ref="0x40f9ece0"/>
        <function-ref name="setScale" scoped="" ref="0x40f9b418"/>
        <function-ref name="getScale" scoped="" ref="0x40f9b6b8"/>
        <function-ref name="reset" scoped="" ref="0x40f9c528"/>
        <function-ref name="overflow" scoped="" ref="0x40f9c2b0"/>
        <function-ref name="isOn" scoped="" ref="0x40f9cf08"/>
        <function-ref name="set" scoped="" ref="0x40f9c010"/>
        <function-ref name="start" scoped="" ref="0x40f9c7a0"/>
        <function-ref name="stop" scoped="" ref="0x40f9ca18"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40fa1980" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40fa1980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TThree" ref="0x4038fe08"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40fa00f8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40fa05e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40fa0370"/>
        <function-ref name="overflow" scoped="" ref="0x40fa0860"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Timer" ref="0x40fa0b40" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128CounterC.nc">
      <component-ref qname="CounterThree16C.NCounter"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Timer" scoped="" ref="0x40fa0b40"/></type-interface>
      <instance>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <arguments>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="off" scoped="" ref="0x40f97600"/>
        <function-ref name="test" scoped="" ref="0x40f97110"/>
        <function-ref name="get" scoped="" ref="0x40f98200"/>
        <function-ref name="setScale" scoped="" ref="0x40f97878"/>
        <function-ref name="getScale" scoped="" ref="0x40f97b18"/>
        <function-ref name="reset" scoped="" ref="0x40f98990"/>
        <function-ref name="overflow" scoped="" ref="0x40f98718"/>
        <function-ref name="isOn" scoped="" ref="0x40f97388"/>
        <function-ref name="set" scoped="" ref="0x40f98478"/>
        <function-ref name="start" scoped="" ref="0x40f98c08"/>
        <function-ref name="stop" scoped="" ref="0x40f98e80"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CounterFrom" ref="0x40f94bd0" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CounterFrom" scoped="" ref="0x40f94bd0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TThree" ref="0x4038fe08"/></typename>
          </type-tag>
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40f93340"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40f93830"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40f935b8"/>
        <function-ref name="overflow" scoped="" ref="0x40f93aa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Counter" ref="0x40f95980" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/timer/TransformCounterC.nc">
      <component-ref qname="CounterMicro32C.Transform32"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Counter" scoped="" ref="0x40f95980"/></type-interface>
      <instance>
        <interfacedef-ref qname="Counter"/>
        <arguments>
          <type-tag size="I:2" alignment="I:1"><struct-ref ref="0x4036e4e0"/>
            <typename><typedef-ref name="TMicro" ref="0x4036e6a8"/></typename>
          </type-tag>
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
        </arguments>
      </instance>
      <interface-functions>
        <function-ref name="get" scoped="" ref="0x40f940f8"/>
        <function-ref name="clearOverflow" scoped="" ref="0x40f945e8"/>
        <function-ref name="isOverflowPending" scoped="" ref="0x40f94370"/>
        <function-ref name="overflow" scoped="" ref="0x40f94860"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Info" ref="0x40f90568" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfoActiveMessageP.nc">
      <component-ref qname="SerialPacketInfoActiveMessageP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Info" scoped="" ref="0x40f90568"/></type-interface>
      <instance>
        <interfacedef-ref qname="SerialPacketInfo"/>
      </instance>
      <interface-functions>
        <function-ref name="upperLength" scoped="" ref="0x40f90740"/>
        <function-ref name="offset" scoped="" ref="0x40f90820"/>
        <function-ref name="dataLinkLength" scoped="" ref="0x40f90900"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x40fae258" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40fae258"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40fae430"/>
        <function-ref name="getPayload" scoped="" ref="0x40fae510"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40fae5f0"/>
        <function-ref name="cancel" scoped="" ref="0x40fae6d0"/>
        <function-ref name="sendDone" scoped="" ref="0x40fae7b0"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Packet" ref="0x40fae8f0" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40fae8f0"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40faeac8"/>
        <function-ref name="payloadLength" scoped="" ref="0x40faeba8"/>
        <function-ref name="getPayload" scoped="" ref="0x40faec88"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40faed68"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40faee48"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMPacket" ref="0x40fad010" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40fad010"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40fad1e8"/>
        <function-ref name="source" scoped="" ref="0x40fad2c8"/>
        <function-ref name="address" scoped="" ref="0x40fad3a8"/>
        <function-ref name="destination" scoped="" ref="0x40fad488"/>
        <function-ref name="setSource" scoped="" ref="0x40fad568"/>
        <function-ref name="setDestination" scoped="" ref="0x40fad648"/>
        <function-ref name="type" scoped="" ref="0x40fad728"/>
        <function-ref name="setType" scoped="" ref="0x40fad808"/>
        <function-ref name="isForMe" scoped="" ref="0x40fad8e8"/>
        <function-ref name="setGroup" scoped="" ref="0x40fad9c8"/>
        <function-ref name="localGroup" scoped="" ref="0x40fadaa8"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Acks" ref="0x40fadc08" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMSenderC.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Acks" scoped="" ref="0x40fadc08"/></type-interface>
      <instance>
        <interfacedef-ref qname="PacketAcknowledgements"/>
      </instance>
      <interface-functions>
        <function-ref name="requestAck" scoped="" ref="0x40fadde0"/>
        <function-ref name="noAck" scoped="" ref="0x40fadec0"/>
        <function-ref name="wasAcked" scoped="" ref="0x40fac010"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="AMSend" ref="0x413bcc50" loc="44:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x413bcc50"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x413bce28"/>
        <function-ref name="getPayload" scoped="" ref="0x413bcf08"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x413b8010"/>
        <function-ref name="cancel" scoped="" ref="0x413b80f0"/>
        <function-ref name="sendDone" scoped="" ref="0x413b81d0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Send" ref="0x413b8340" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x413b8340"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x413b8518"/>
        <function-ref name="getPayload" scoped="" ref="0x413b85f8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x413b86d8"/>
        <function-ref name="cancel" scoped="" ref="0x413b87b8"/>
        <function-ref name="sendDone" scoped="" ref="0x413b8898"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x413b89d8" loc="47:/root/Projects/tinyos-main-read-only/tos/system/AMQueueEntryP.nc">
      <component-ref qname="EasyCollectionAppC.SerialAMSenderC.AMQueueEntryP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x413b89d8"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x413b8bb0"/>
        <function-ref name="source" scoped="" ref="0x413b8c90"/>
        <function-ref name="address" scoped="" ref="0x413b8d70"/>
        <function-ref name="destination" scoped="" ref="0x413b8e50"/>
        <function-ref name="setSource" scoped="" ref="0x413b7010"/>
        <function-ref name="setDestination" scoped="" ref="0x413b70f0"/>
        <function-ref name="type" scoped="" ref="0x413b71d0"/>
        <function-ref name="setType" scoped="" ref="0x413b72b0"/>
        <function-ref name="isForMe" scoped="" ref="0x413b7390"/>
        <function-ref name="setGroup" scoped="" ref="0x413b7470"/>
        <function-ref name="localGroup" scoped="" ref="0x413b7550"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40fb6010" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialAMQueueP.nc">
      <component-ref qname="SerialAMQueueP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40fb6010"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40fb61e8"/>
        <function-ref name="getPayload" scoped="" ref="0x40fb62c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40fb63a8"/>
        <function-ref name="cancel" scoped="" ref="0x40fb6488"/>
        <function-ref name="sendDone" scoped="" ref="0x40fb6568"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMSend" ref="0x40fb4e98" loc="48:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMSend" scoped="" ref="0x40fb4e98"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMSend"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40fb30c0"/>
        <function-ref name="getPayload" scoped="" ref="0x40fb31a0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40fb3280"/>
        <function-ref name="cancel" scoped="" ref="0x40fb3360"/>
        <function-ref name="sendDone" scoped="" ref="0x40fb3440"/>
      </interface-functions>
    </interface>
    <interface provided="1" name="Send" ref="0x40fb4728" loc="46:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Send" scoped="" ref="0x40fb4728"/></type-interface>
      <instance>
        <interfacedef-ref qname="Send"/>
      </instance>
      <interface-parameters>
        <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
          <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
        </type-int>
      </interface-parameters>
      <interface-functions>
        <function-ref name="send" scoped="" ref="0x40fb4910"/>
        <function-ref name="getPayload" scoped="" ref="0x40fb49f0"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40fb4ad0"/>
        <function-ref name="cancel" scoped="" ref="0x40fb4bb0"/>
        <function-ref name="sendDone" scoped="" ref="0x40fb4c90"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="Packet" ref="0x40fb2230" loc="50:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="Packet" scoped="" ref="0x40fb2230"/></type-interface>
      <instance>
        <interfacedef-ref qname="Packet"/>
      </instance>
      <interface-functions>
        <function-ref name="clear" scoped="" ref="0x40fb2408"/>
        <function-ref name="payloadLength" scoped="" ref="0x40fb24e8"/>
        <function-ref name="getPayload" scoped="" ref="0x40fb25c8"/>
        <function-ref name="maxPayloadLength" scoped="" ref="0x40fb26a8"/>
        <function-ref name="setPayloadLength" scoped="" ref="0x40fb2788"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="errorTask" ref="0x40fb2908" loc="169:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="errorTask" scoped="" ref="0x40fb2908"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fb2ae0"/>
        <function-ref name="runTask" scoped="" ref="0x40fb2bc0"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="CancelTask" ref="0x40fb2d40" loc="126:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="CancelTask" scoped="" ref="0x40fb2d40"/></type-interface>
      <instance>
        <interfacedef-ref qname="TaskBasic"/>
      </instance>
      <interface-functions>
        <function-ref name="postTask" scoped="" ref="0x40fb2f18"/>
        <function-ref name="runTask" scoped="" ref="0x40fb1010"/>
      </interface-functions>
    </interface>
    <interface provided="0" name="AMPacket" ref="0x40fb3580" loc="49:/root/Projects/tinyos-main-read-only/tos/system/AMQueueImplP.nc">
      <component-ref qname="SerialAMQueueP.AMQueueImplP"/>
      <type-interface size="I:2" alignment="I:1"><interface-ref name="AMPacket" scoped="" ref="0x40fb3580"/></type-interface>
      <instance>
        <interfacedef-ref qname="AMPacket"/>
      </instance>
      <interface-functions>
        <function-ref name="group" scoped="" ref="0x40fb3758"/>
        <function-ref name="source" scoped="" ref="0x40fb3838"/>
        <function-ref name="address" scoped="" ref="0x40fb3918"/>
        <function-ref name="destination" scoped="" ref="0x40fb39f8"/>
        <function-ref name="setSource" scoped="" ref="0x40fb3ad8"/>
        <function-ref name="setDestination" scoped="" ref="0x40fb3bb8"/>
        <function-ref name="type" scoped="" ref="0x40fb3c98"/>
        <function-ref name="setType" scoped="" ref="0x40fb3d78"/>
        <function-ref name="isForMe" scoped="" ref="0x40fb3e58"/>
        <function-ref name="setGroup" scoped="" ref="0x40fb2010"/>
        <function-ref name="localGroup" scoped="" ref="0x40fb20f0"/>
      </interface-functions>
    </interface>
  </interfaces>
  <interfacedefs>
    <interfacedef qname="RootControl" loc="40:/root/Projects/tinyos-main-read-only/tos/lib/net/RootControl.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/RootControl.nc">
        <short> Controls whether the current node is a root of the tree&#10;  </short>
        <long> Controls whether the current node is a root of the tree&#10;  @author Rodrigo Fonseca&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isRoot" ref="0x404458f0" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRoot" ref="0x40445138" loc="41:/root/Projects/tinyos-main-read-only/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="unsetRoot" ref="0x40445530" loc="42:/root/Projects/tinyos-main-read-only/tos/lib/net/RootControl.nc">
        <interfacedef-ref qname="RootControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Boot" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/Boot.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/Boot.nc">
        <short>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.</short>
        <long>&#10; Interface that notifies components when TinyOS has booted&#10; (initialized all of its components), as discussed in TEP 107.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10;</long>
      </documentation>
      <function event="" provided="0" name="booted" ref="0x4040a8e8" loc="60:/root/Projects/tinyos-main-read-only/tos/interfaces/Boot.nc">
        <documentation loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/Boot.nc">
          <short>&#10; Signaled when the system has booted successfully.</short>
          <long>&#10; Signaled when the system has booted successfully. Components can&#10; assume the system has been initialized properly. Services may&#10; need to be started to work, however.&#10;&#10; @see StdControl&#10; @see SplitConrol&#10; @see TEP 107: Boot Sequence&#10;</long>
        </documentation>
        <interfacedef-ref qname="Boot"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Intercept" loc="15:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="forward" ref="0x4043cc10" loc="31:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
        <documentation loc="16:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
          <short>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination.</short>
          <long>&#10; Signals that a message has been received, which is supposed to be&#10; forwarded to another destination. &#10;&#10; @param 'message_t* ONE msg' The complete message received.&#10;&#10; @param 'void* COUNT(len) payload' The payload portion of the packet for this&#10; protocol layer.&#10;&#10; @param len The length of the payload buffer.&#10;&#10; @return TRUE indicates the packet should be forwarded, FALSE&#10; indicates that it should not be forwarded.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Intercept"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4043c6e8" loc="31:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x4043c8c8" loc="31:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4043caa8" loc="31:/root/Projects/tinyos-main-read-only/tos/interfaces/Intercept.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SplitControl" loc="87:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
      <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the split-phase counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  For each &#60;code>start()&#60;/code> or&#10; &#60;code>stop()&#60;/code> command, if the command returns SUCCESS, then a&#10; corresponding  &#60;code>startDone()&#60;/code> or &#60;code>stopDone()&#60;/code> event&#10; must be signalled.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function event="" provided="0" name="startDone" ref="0x40410010" loc="113:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
        <documentation loc="106:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
          <short> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.</short>
          <long> &#10; Notify caller that the component has been started and is ready to&#10; receive other commands.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned on, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40413e48" loc="113:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="stopDone" ref="0x40410d58" loc="138:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
        <documentation loc="132:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
          <short>&#10; Notify caller that the component has been stopped.</short>
          <long>&#10; Notify caller that the component has been stopped.&#10;&#10; @param &#60;b>error&#60;/b> -- SUCCESS if the component was successfully&#10;                        turned off, FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40410c00" loc="138:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x40413760" loc="104:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
        <documentation loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         starting or the device was off and the device is now ready to turn &#10;         on.  After receiving this return value, you should expect a &#10;         &#60;code>startDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering down&#10;               i.e. a &#60;code>stop()&#60;/code> command has been called,&#10;               and a &#60;code>stopDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already on &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40410520" loc="130:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
        <documentation loc="115:/root/Projects/tinyos-main-read-only/tos/interfaces/SplitControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.  Return&#10; values of SUCCESS will always result in a &#60;code>startDone()&#60;/code>&#10; event being signalled.&#10;&#10; @return SUCCESS if the device is already in the process of &#10;         stopping or the device was on and the device is now ready to turn &#10;         off.  After receiving this return value, you should expect a &#10;         &#60;code>stopDone&#60;/code> event in the near future.&#60;br>&#10;         EBUSY if the component is in the middle of powering up&#10;               i.e. a &#60;code>start()&#60;/code> command has been called,&#10;               and a &#60;code>startDone()&#60;/code> event is pending&#60;br>&#10;         EALREADY if the device is already off &#60;br>&#10;         FAIL Otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="SplitControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Send" loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
      <function command="" provided="0" name="send" ref="0x404294e8" loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt>. To determine&#10; the maximum available size, use the Packet interface of the&#10; component providing Send. If send returns SUCCESS, then the&#10; component will signal the sendDone event in the future; if send&#10; returns an error, it will not signal sendDone.  Note that a&#10; component may accept a send request which it later finds it&#10; cannot satisfy; in this case, it will signal sendDone with an&#10; appropriate error code.&#10;&#10; @param   'message_t* ONE msg'     the packet to send&#10; @param   len     the length of the packet payload&#10; @return          SUCCESS if the request was accepted and will issue&#10;                  a sendDone event, EBUSY if the component cannot accept&#10;                  the request now but will be able to later, FAIL&#10;                  if the stack is in a state that cannot accept requests&#10;                  (e.g., it's off).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404291a8" loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40429388" loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x4042f190" loc="125:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
        <documentation loc="115:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet which&#10; at least a certain length.  If the payload region is smaller than&#10; the len parameter, then getPayload returns NULL. This command&#10; behaves identicallt to &#60;tt>Packet.getPayload&#60;/tt> and is&#10; included in this interface as a convenience.&#10;&#10; @param   'message_t* ONE msg'    the packet&#10; @return  'void* COUNT_NOK(len)'  a pointer to the packet's payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40431d78" loc="125:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4042f010" loc="125:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x40431818" loc="112:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
        <documentation loc="102:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return  the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x40428168" loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
        <documentation loc="77:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was cancelled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully cancelled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10;&#10; @param   'message_t* ONE msg'    the packet whose transmission should be cancelled&#10; @return         SUCCESS if the packet was successfully cancelled, FAIL&#10;                 otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40428010" loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40428e00" loc="100:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
        <documentation loc="91:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt>&#10; is the sent buffer, and &#60;tt>error&#60;/tt> indicates whether the&#10; send was succesful, and if not, the cause of the failure.&#10; &#10; @param 'message_t* ONE msg'   the message which was requested to send&#10; @param error SUCCESS if it was transmitted successfully, FAIL if&#10;              it was not, ECANCEL if it was cancelled via &#60;tt>cancel&#60;/tt>&#10;</long>
        </documentation>
        <interfacedef-ref qname="Send"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40428aa8" loc="100:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40428ca0" loc="100:/root/Projects/tinyos-main-read-only/tos/interfaces/Send.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Control" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
      <documentation loc="40:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <short>&#10; CC1000 internal radio control interface.</short>
        <long>&#10; CC1000 internal radio control interface.&#10; @author Philip Buonadonna&#10; @aythor Jaein Jeong&#10;</long>
      </documentation>
      <function command="" provided="0" name="tunePreset" ref="0x40417858" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.</short>
          <long>&#10; Tune the radio to one of the frequencies available in the CC1K_Params&#10; table.  Calling Tune will allso reset the rfpower and LockVal&#10; selections to the table values.&#10; &#10; @param freq The index into the CC1K_Params table that holds the&#10; desired preset frequency parameters.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="freq" ref="0x40417700" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="biasOn" ref="0x404146a0" loc="104:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="98:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the bias power on.</short>
          <long>&#10; Turn the bias power on. This function must be followed by a call to&#10; either rxMode() or txMode() to place the radio in a recieve/transmit&#10; state respectively. There is approximately a 200us delay when&#10; restoring bias power.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getRFPower" ref="0x4041d278" loc="121:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="116:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the present RF power index.</short>
          <long>&#10; Get the present RF power index.&#10;&#10; @return The power index value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tuneManual" ref="0x40415010" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="62:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Tune the radio to a given frequency.</short>
          <long>&#10; Tune the radio to a given frequency. Since the CC1000 uses a digital&#10; frequency synthesizer, it cannot tune to just an arbitrary frequency.&#10; This routine will determine the closest achievable channel, compute&#10; the necessary parameters and tune the radio.&#10; &#10; @param The desired channel frequency, in Hz.&#10; &#10; @return The actual computed channel frequency, in Hz.  A return value&#10; of '0' indicates that no frequency was computed and the radio was not&#10; tuned.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="DesiredFreq" ref="0x40417e58" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="selectLock" ref="0x4041d848" loc="129:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="123:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.</short>
          <long> &#10; Select the signal to monitor at the CHP_OUT pin of the CC1000.  See&#10; the CC1000 data sheet for the available signals.&#10; &#10; @param LockVal The index of the signal to monitor at the CHP_OUT pin&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="LockVal" ref="0x4041d6f0" loc="129:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="init" ref="0x404172b0" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Initialise the radio to its default state.</short>
          <long>&#10; Initialise the radio to its default state.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLock" ref="0x4041dd48" loc="137:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="131:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Get the binary value from the CHP_OUT pin.</short>
          <long>&#10; Get the binary value from the CHP_OUT pin.  Analog signals cannot be&#10; read using function.&#10;&#10; @return 1 - Pin is high or 0 - Pin is low&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="coreOn" ref="0x404141d8" loc="96:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="91:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.</short>
          <long>&#10; Turn off the bias power on the CC1000 radio, but leave the core and&#10; crystal oscillator powered.  This will result in approximately a 750&#10; uA power savings.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x40415980" loc="84:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="81:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio into transmit mode.</short>
          <long>&#10; Shift the CC1000 Radio into transmit mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOStatus" ref="0x4041c280" loc="147:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="139:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.</short>
          <long>&#10; Returns whether the present frequency set is using high-side LO&#10; injection or not.  This information is used to determine if the data&#10; from the CC1000 needs to be inverted or not.&#10;&#10; @return TRUE if high-side LO injection is being used (i.e. data does NOT need to be inverted&#10; at the receiver.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x40415da0" loc="89:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="86:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Shift the CC1000 Radio in receive mode.</short>
          <long>&#10; Shift the CC1000 Radio in receive mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x404155a8" loc="79:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="76:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Turn the CC1000 off&#10;</short>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setRFPower" ref="0x40414cf8" loc="114:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
        <documentation loc="106:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
          <short>&#10; Set the transmit RF power value.</short>
          <long>&#10; Set the transmit RF power value.  The input value is simply an&#10; arbitrary index that is programmed into the CC1000 registers.  Consult&#10; the CC1000 datasheet for the resulting power output/current&#10; consumption values.&#10;&#10; @param power A power index between 1 and 255.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Control"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="power" ref="0x40414ba0" loc="114:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Control.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="StdControl" loc="86:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
      <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface is used to switch between&#10; the on and off power states of the component providing it.  A call to the&#10; &#60;code>start()&#60;/code> command is a request to switch a component into the&#10; on state, and a call to the &#60;code>stop()&#60;/code> is a request to switch a&#10; component into the off state.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x40418010" loc="95:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
        <documentation loc="88:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x404184d8" loc="105:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
        <documentation loc="97:/root/Projects/tinyos-main-read-only/tos/interfaces/StdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="StdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Receive" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function event="" provided="0" name="receive" ref="0x4043db28" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
          <short>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception.</short>
          <long>&#10; Receive a packet buffer, returning a buffer for the signaling&#10; component to use for the next reception. The return value&#10; can be the same as &#60;tt>msg&#60;/tt>, as long as the handling&#10; component copies out the data it needs.&#10;&#10; &#60;b>Note&#60;/b> that misuse of this interface is one of the most&#10; common bugs in TinyOS code. For example, if a component both calls a&#10; send on the passed message and returns it, then it is possible&#10; the buffer will be reused before the send occurs, overwriting&#10; the component's data. This would cause the mote to possibly&#10; instead send a packet it most recently received.&#10;&#10; @param  'message_t* ONE msg'        the receied packet&#10; @param  'void* COUNT(len) payload'  a pointer to the packet's payload&#10; @param  len      the length of the data region pointed to by payload&#10; @return 'message_t* ONE'              a packet buffer for the stack to use for the next&#10;                  received packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Receive"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
              <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4043d5e0" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x4043d7c0" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4043d9a0" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Receive.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Packet" loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <short> &#10; The basic message data type accessors.</short>
        <long> &#10; The basic message data type accessors. Protocols may use&#10; additional packet interfaces for their protocol specific&#10; data/metadata.&#10;&#10; @author Philip Levis&#10; @date   January 5 2005&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="clear" ref="0x4044a168" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
          <short>&#10; Clear out this packet.</short>
          <long>&#10; Clear out this packet.  Note that this is a deep operation and&#10; total operation: calling clear() on any layer will completely&#10; clear the packet for reuse.&#10; @param  'message_t* ONE msg'    the packet to clear&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4044a010" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="payloadLength" ref="0x4044ab38" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
          <short>&#10; Return the length of the payload of msg.</short>
          <long>&#10; Return the length of the payload of msg. This value may be less&#10; than what maxPayloadLength() returns, if the packet is smaller than&#10; the MTU. If a communication component does not support variably&#10; sized data regions, then payloadLength() will always return&#10; the same value as maxPayloadLength(). &#10;&#10; @param  'message_t* ONE msg'    the packet to examine&#10; @return        the length of its current payload&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4044a9e0" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x40448af0" loc="126:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <documentation loc="109:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; If the caller intends to write to the payload region then&#10; the &#60;tt>len&#60;/tt> parameter must reflect the maximum required&#10; length. If the caller (only) wants to read from the payload&#10; region, then &#60;tt>len&#60;/tt> may be set to the value of&#10; payloadLength(). If the payload region is smaller than &#10; &#60;tt>len&#60;/tt> this command returns NULL. The offset where&#10; the payload region starts within a packet is fixed, i.e. for&#10; a given &#60;tt>msg&#60;/tt> this command will always return the same&#10; pointer or NULL.&#10;&#10; @param 'message_t* ONE msg'   the packet &#10; @param len   the length of payload required&#10; @return 'void* COUNT_NOK(len)'     a pointer to the packet's data payload for this layer&#10;              or NULL if &#60;tt>len&#60;/tt> is too big&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40448790" loc="126:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40448970" loc="126:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x404481a8" loc="106:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <documentation loc="96:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. Note that, depending on protocol fields, a given&#10; request to send a packet may not be able to send the maximum&#10; payload length (e.g., if there are variable length&#10; fields). Protocols may provide specialized interfaces for these&#10; circumstances.&#10;&#10; @return   the maximum size payload allowed by this layer&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPayloadLength" ref="0x404467e8" loc="94:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
        <documentation loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
          <short>&#10; Set the length field of the packet.</short>
          <long>&#10; Set the length field of the packet. This value is not checked&#10; for validity (e.g., if it is larger than the maximum payload&#10; size). This command is not used when sending packets, as calls&#10; to send include a length parameter. Rather, it is used by&#10; components, such as queues, that need to buffer requests to&#10; send.  This command allows the component to store the length&#10; specified in the request and later recover it when actually&#10; sending.&#10;&#10; @param 'message_t* ONE msg'   the packet&#10; @param len   the value to set its length field to&#10;</long>
        </documentation>
        <interfacedef-ref qname="Packet"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x404464a8" loc="94:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40446688" loc="94:/root/Projects/tinyos-main-read-only/tos/interfaces/Packet.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Leds" loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/types/Leds.h">
        <short>&#10; Constants for manipulating LEDs.</short>
        <long>&#10; Constants for manipulating LEDs.&#10;&#10; @author Philip Levis&#10; @date   March 21, 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="led0Off" ref="0x40435460" loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 0.</short>
          <long>&#10; Turn off LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led0Toggle" ref="0x404358a8" loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 0; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1On" ref="0x40435d28" loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 1.</short>
          <long>&#10; Turn on LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Toggle" ref="0x404335b0" loc="83:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="79:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 1; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Toggle" ref="0x404322b8" loc="100:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="96:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.</short>
          <long>&#10; Toggle LED 2; if it was off, turn it on, if was on, turn it off.&#10; The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x40432760" loc="117:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="103:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Get the current LED settings as a bitmask.</short>
          <long>&#10; Get the current LED settings as a bitmask. Each bit corresponds to&#10; whether an LED is on; bit 0 is LED 0, bit 1 is LED 1, etc. You can&#10; also use the enums LEDS_LED0, LEDS_LED1. For example, this expression&#10; will determine whether LED 2 is on:&#10;&#10; &#60;pre> (call Leds.get() &#38; LEDS_LED2) &#60;/pre>&#10;&#10; This command supports up to 8 LEDs; if a platform has fewer, then&#10; those LEDs should always be off (their bit is zero). Also see&#10; &#60;tt>set()&#60;/tt>.&#10;&#10; @return a bitmask describing which LEDs are on and which are off&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led1Off" ref="0x40433168" loc="77:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="74:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 1.</short>
          <long>&#10; Turn off LED 1. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40432ea0" loc="134:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="120:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Set the current LED configuration using a bitmask.</short>
          <long>&#10; Set the current LED configuration using a bitmask.  Each bit&#10; corresponds to whether an LED is on; bit 0 is LED 0, bit 1 is LED&#10; 1, etc. You can also use the enums LEDS_LED0, LEDS_LED1. For example,&#10; this statement will configure the LEDs so LED 0 and LED 2 are on:&#10;&#10; &#60;pre> call Leds.set(LEDS_LED0 | LEDS_LED2); &#60;/pre>&#10;&#10; This statement will turn LED 1 on if it was not already:&#10;&#10; &#60;pre>call Leds.set(call Leds.get() | LEDS_LED1);&#60;/pre>&#10;&#10; @param  val   a bitmask describing the on/off settings of the LEDs&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="val" ref="0x40432d48" loc="134:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="led0On" ref="0x40435038" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 0.</short>
          <long>&#10; Turn on LED 0. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2On" ref="0x40433a30" loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="86:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn on LED 2.</short>
          <long>&#10; Turn on LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="led2Off" ref="0x40433e58" loc="94:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
        <documentation loc="91:/root/Projects/tinyos-main-read-only/tos/interfaces/Leds.nc">
          <short>&#10; Turn off LED 2.</short>
          <long>&#10; Turn off LED 2. The color of this LED depends on the platform.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Leds"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMSend" loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40444ea8" loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
          <short> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>.</short>
          <long> &#10; Send a packet with a data payload of &#60;tt>len&#60;/tt> to address&#10; &#60;tt>addr&#60;/tt>. To determine the maximum available size, use the&#10; Packet interface of the component providing AMSend. If send&#10; returns SUCCESS, then the component will signal the sendDone&#10; event in the future; if send returns an error, it will not&#10; signal the event.  Note that a component may accept a send&#10; request which it later finds it cannot satisfy; in this case, it&#10; will signal sendDone with error code.&#10;&#10; @param addr   address to which to send the packet&#10; @param 'message_t* ONE msg'    the packet&#10; @param len    the length of the data in the packet payload&#10; @return       SUCCESS if the request to send succeeded and a&#10;               sendDone will be signaled later, EBUSY if the&#10;               abstraction cannot send now but will be able to&#10;               later, or FAIL if the communication layer is not&#10;               in a state that can send (e.g., off).&#10; @see          sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x40444948" loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x40444b60" loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40444d40" loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getPayload" ref="0x4045aa88" loc="135:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
        <documentation loc="126:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
          <short>&#10; Return a pointer to a protocol's payload region in a packet.</short>
          <long>&#10; Return a pointer to a protocol's payload region in a packet.&#10; This command behaves identically to &#60;tt>Packet.getPayload&#60;/tt>&#10; (minus the length parameter) and is included in this interface&#10; as a convenience.&#10;&#10; @param  'message_t* ONE msg'    the packet&#10; @return 'void* COUNT(len)'      the payload of the packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-void size="I:1" alignment="I:1"></type-void>
          </type-pointer>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4045a728" loc="135:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x4045a908" loc="135:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxPayloadLength" ref="0x4045a1c8" loc="123:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
        <documentation loc="113:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
          <short>&#10; Return the maximum payload length that this communication layer&#10; can provide.</short>
          <long>&#10; Return the maximum payload length that this communication layer&#10; can provide. This command behaves identically to&#10; &#60;tt>Packet.maxPayloadLength&#60;/tt> and is included in this&#10; interface as a convenience.&#10;&#10; @return the maximum payload length&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x4045bb80" loc="96:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
        <documentation loc="82:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
          <short>&#10; Cancel a requested transmission.</short>
          <long>&#10; Cancel a requested transmission. Returns SUCCESS if the &#10; transmission was canceled properly (not sent in its&#10; entirety). Note that the component may not know&#10; if the send was successfully canceled, if the radio is&#10; handling much of the logic; in this case, a component&#10; should be conservative and return an appropriate error code.&#10; A successful call to cancel must always result in a &#10; sendFailed event, and never a sendSucceeded event.&#10; &#10; @param  'message_t* ONE msg'    the packet whose transmission should be cancelled.&#10; @return SUCCESS if the transmission was cancelled, FAIL otherwise.&#10; @see    sendDone&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4045ba28" loc="96:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40459898" loc="110:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
        <documentation loc="98:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
          <short> &#10; Signaled in response to an accepted send request.</short>
          <long> &#10; Signaled in response to an accepted send request. &#60;tt>msg&#60;/tt> is&#10; the message buffer sent, and &#60;tt>error&#60;/tt> indicates whether&#10; the send was successful.&#10;&#10; @param  'message_t* ONE msg'   the packet which was submitted as a send request&#10; @param  error SUCCESS if it was sent successfully, FAIL if it was not,&#10;               ECANCEL if it was cancelled&#10; @see send&#10; @see cancel&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMSend"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40459540" loc="110:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="error" ref="0x40459738" loc="110:/root/Projects/tinyos-main-read-only/tos/interfaces/AMSend.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AMPacket" loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <short>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets.</short>
        <long>&#10; The Active Message accessors, which provide the AM local address and&#10; functionality for querying packets. Active Messages are a single-hop&#10; communication protocol. Therefore, fields such as source and destination&#10; represent the single-hop source and destination. Multihop sources and&#10; destinations are defined by the corresponding multihop protocol (if any).&#10; Also see the Packet interface.&#10;&#10; @author Philip Levis &#10; @date   January 18 2005&#10; @see    Packet&#10; @see    AMSend&#10; @see    TEP 116: Packet Protocols&#10;</long>
      </documentation>
      <function command="" provided="0" name="group" ref="0x40455d40" loc="177:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="164:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Get the AM group of the AM packet.</short>
          <long>&#10; Get the AM group of the AM packet. The AM group is a logical&#10; identifier that distinguishes sets of nodes which may share&#10; a physical communication medium but wish to not communicate.&#10; The AM group logically separates the sets of nodes. When&#10; a node sends a packet, it fills in its AM group, and typically&#10; nodes only receive packets whose AM group field matches their&#10; own.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @return the AM group of this packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40455be8" loc="177:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="source" ref="0x4044c648" loc="88:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the source of the AM packet.</short>
          <long>&#10; Return the AM address of the source of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'  the packet&#10; @return      the source address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4044c4f0" loc="88:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="address" ref="0x40450588" loc="68:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the node's active message address associated with this AM stack.</short>
          <long>&#10; Return the node's active message address associated with this AM stack.&#10; @return The address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="destination" ref="0x40450c20" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="70:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM address of the destination of the AM packet.</short>
          <long>&#10; Return the AM address of the destination of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10; @param 'message_t* ONE amsg'    the packet&#10; @return        the destination address of the packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40450ac8" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setSource" ref="0x4044b010" loc="121:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="105:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the source field of the AM packet.</short>
          <long>&#10; Set the AM address of the source field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the source address&#10; and then recover it when actually sending. As an AM layer generally&#10; sets the source address to be the local address, this interface&#10; is not commonly used except when a system is bypassing the AM&#10; layer (e.g., a protocol bridge). If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4044dc18" loc="121:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4044de20" loc="121:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setDestination" ref="0x4044d298" loc="103:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM address of the destination field of the AM packet.</short>
          <long>&#10; Set the AM address of the destination field of the AM packet.  As&#10; the AM address is set as part of sending with the AMSend&#10; interface, this command is not used for sending packets.  Rather,&#10; it is used when a component, such as a queue, needs to buffer a&#10; request to send. The component can save the destination address&#10; and then recover it when actually sending. If &#60;tt>amsg&#60;/tt> is&#10; not an AM packet, the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @param  addr   the address&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4044cec8" loc="103:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x4044d138" loc="103:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="type" ref="0x40454700" loc="147:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="138:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Return the AM type of the AM packet.</short>
          <long>&#10; Return the AM type of the AM packet.&#10; If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of this command&#10; are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x404545a8" loc="147:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40455260" loc="162:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="149:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM type of the AM packet.</short>
          <long>&#10; Set the AM type of the AM packet.  As the AM type is set as part&#10; of sending with the AMSend interface, this command is not used&#10; for sending packets. Instead, it is used when a component, such&#10; as a queue, needs to buffer a request to send. The component can&#10; save the AM type in the packet then recover it when actually&#10; sending. If &#60;tt>amsg&#60;/tt> is not an AM packet, the results of&#10; this command are undefined.&#10; &#10; @param  'message_t* ONE amsg'    the packet&#10; @param  t       the AM type&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40454f08" loc="162:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="t" ref="0x40455100" loc="162:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_id_t" ref="0x40419248"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isForMe" ref="0x4044bbb0" loc="136:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="123:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote.</short>
          <long>&#10; Return whether &#60;tt>amsg&#60;/tt> is destined for this mote. This is&#10; partially a shortcut for testing whether the return value of&#10; &#60;tt>destination&#60;/tt> and &#60;tt>address&#60;/tt> are the same. It&#10; may, however, include additional logic. For example, there&#10; may be an AM broadcast address: &#60;tt>destination&#60;/tt> will return&#10; the broadcast address, but &#60;tt>address&#60;/tt> will still be&#10; the mote's local address. If &#60;tt>amsg&#60;/tt> is not an AM packet,&#10; the results of this command are undefined.&#10;&#10; @param  'message_t* ONE amsg'   the packet&#10; @return        whether the packet is addressed to this AM stack&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x4044ba58" loc="136:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setGroup" ref="0x40453b88" loc="187:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="179:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Set the AM group field of a packet.</short>
          <long>&#10; Set the AM group field of a packet. Note that most data link&#10; stacks will set this field automatically on a send request, which&#10; may overwrite changes made with this command.&#10;&#10; @param 'message_t* ONE amsg' the packet&#10; @param group the packet's new AM group value&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="amsg" ref="0x40453828" loc="187:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="grp" ref="0x40453a28" loc="187:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="localGroup" ref="0x4045c418" loc="195:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
        <documentation loc="189:/root/Projects/tinyos-main-read-only/tos/interfaces/AMPacket.nc">
          <short>&#10; Provides the current AM group of this communication interface.</short>
          <long>&#10; Provides the current AM group of this communication interface.&#10;&#10; @return The AM group.&#10;</long>
        </documentation>
        <interfacedef-ref qname="AMPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Timer" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <short>&#10; A Timer is TinyOS's general purpose timing interface.</short>
        <long>&#10; A Timer is TinyOS's general purpose timing interface. For more precise&#10; timing, you may wish to use a (platform-specific) component offering&#10; an Alarm interface.&#10;&#10; &#60;p>A Timer is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4041a458" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <interfacedef-ref qname="Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4041a458"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x40440c28" loc="136:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="132:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x40439a00" loc="83:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="80:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).</short>
          <long>&#10; Signaled when the timer expires (one-shot) or repeats (periodic).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodicAt" ref="0x40437bc0" loc="114:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="100:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. The &#60;code>fired&#60;/code> will be signaled every&#10; dt units (first event at t0+dt units). Periodic timers set in the past&#10; will get a bunch of events in succession, until the timer &#34;catches up&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x40437878" loc="114:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x40437a60" loc="114:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isOneShot" ref="0x404373d0" loc="98:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="94:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Check if this is a one-shot timer.</short>
          <long>&#10; Check if this is a one-shot timer.&#10; @return TRUE for one-shot timers, FALSE for periodic timers.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getdt" ref="0x4043f5c0" loc="151:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="146:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Return the delay or period for the previously started timer.</short>
          <long>&#10; Return the delay or period for the previously started timer. The next&#10; fired event will occur at gett0() + getdt().&#10; @return Timer's interval.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="gett0" ref="0x4043f090" loc="144:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="138:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers.</short>
          <long>&#10; Return the time anchor for the previously started timer or the time of&#10; the previous event for periodic timers. The next fired event will occur&#10; at gett0() + getdt().&#10; @return Timer's base time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x40439e90" loc="92:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="86:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Check if timer is running.</short>
          <long>&#10; Check if timer is running. Periodic timers run until stopped or&#10; replaced, one-shot timers run until their deadline expires.&#10;&#10; @return TRUE if the timer is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startPeriodic" ref="0x4041aab0" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="56:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Set a periodic timer to repeat every dt time units.</short>
          <long>&#10; Set a periodic timer to repeat every dt time units. Replaces any&#10; current timer settings. Equivalent to startPeriodicAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled every dt units (first&#10; event in dt units).&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4041a958" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShotAt" ref="0x40440608" loc="129:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="116:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to time t0+dt.</short>
          <long>&#10; Set a single-short timer to time t0+dt. Replaces any current timer&#10; settings. The &#60;code>fired&#60;/code> will be signaled when the timer&#10; expires. Timers set in the past will fire &#34;soon&#34;.&#10;&#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for timer.&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x404402c0" loc="129:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
          <variable name="dt" ref="0x404404a8" loc="129:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="startOneShot" ref="0x40439168" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Set a single-short timer to some time units in the future.</short>
          <long>&#10; Set a single-short timer to some time units in the future. Replaces&#10; any current timer settings. Equivalent to startOneShotAt(getNow(),&#10; dt). The &#60;code>fired&#60;/code> will be signaled when the timer expires.&#10;&#10; @param dt Time until the timer fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x40439010" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x40439638" loc="78:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
        <documentation loc="75:/root/Projects/tinyos-main-read-only/tos/lib/timer/Timer.nc">
          <short>&#10; Cancel a timer.</short>
          <long>&#10; Cancel a timer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Init" loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/Init.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4048f138" loc="62:/root/Projects/tinyos-main-read-only/tos/interfaces/Init.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/Init.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components.  &#10; &#10; @return SUCCESS if initialized properly, FAIL otherwise.&#10; @see TEP 107: Boot Sequence&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Init"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128Calibrate" loc="26:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <short>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent.</short>
        <long>&#10; This interface provides functions to compute ATmega128 configuration&#10; values that are clock-rate dependent. These include:&#60;ul>&#10; &#60;li>the ADC prescaler value necessary for full precision&#10; &#60;li>values for the UBRR registers to achieve a specific baud rate&#10; &#60;li>any adjustment necessary to values passed to some platform-provided&#10;   AlarmMicroXXC components to get more accurate timing&#10; &#60;li>the number of cycles per 1/32768s (a typical implementation of this&#10;   interface will measure this value at boot time and use it to compute&#10;   the values above)&#10; &#60;/ul>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="baudrateRegister" ref="0x404964e8" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate.</short>
          <long>&#10; Return the value to use for the baudrate register to achieve a&#10; particular baud rate. Assumes U2X=1 (the USART is being run at&#10; double speed).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="baudrate" ref="0x40496390" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cyclesPerJiffy" ref="0x4048ea88" loc="31:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return CPU cycles per 1/32768s.</short>
          <long>&#10; Return CPU cycles per 1/32768s.&#10; @return CPU cycles.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="calibrateMicro" ref="0x40497168" loc="39:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.</short>
          <long>&#10; Convert n microseconds into a value suitable for use with&#10; AlarmMicro32C Alarms.&#10; @param n Time in microseconds.&#10; @return AlarmMicro argument that best approximates n microseconds.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40497010" loc="39:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="actualMicro" ref="0x40497830" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.</short>
          <long>&#10; Convert values used by AlarmMicro32C Alarms into actual microseconds.&#10; @param n A time expressed in AlarmMicro time units.&#10; @return Time in microseconds that corresponds to AlarmMicro argument n.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x404976d8" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
            <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
              <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="adcPrescaler" ref="0x40497d88" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/Atm128Calibrate.nc">
          <short>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.</short>
          <long>&#10; Return the smallest ADC prescaler value which guaranteers full&#10; ADC precision.&#10; @return ADC prescaler value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128Calibrate"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="GeneralIO" loc="38:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <short>&#10; </short>
        <long>&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function command="" provided="0" name="makeInput" ref="0x404a1c38" loc="44:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isInput" ref="0x4049f038" loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="toggle" ref="0x404a14a8" loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOutput" ref="0x4049f808" loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x404a1868" loc="43:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="makeOutput" ref="0x4049f410" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x404a4d40" loc="40:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clr" ref="0x404a10f8" loc="41:/root/Projects/tinyos-main-read-only/tos/interfaces/GeneralIO.nc">
        <interfacedef-ref qname="GeneralIO"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcConfig" loc="19:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
      <documentation loc="13:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <short>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.</short>
        <long>&#10; Clients of the higher-level A/D system must implement this interface to&#10; specify which channel to sample, and with what parameters.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getRefVoltage" ref="0x404db650" loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain reference voltage&#10; </short>
          <long>&#10; Obtain reference voltage&#10; @return The reference voltage to use. Must be one of the &#10;   ATM128_ADC_VREF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getChannel" ref="0x404db158" loc="25:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="20:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain channel.</short>
          <long>&#10; Obtain channel.&#10; @return The A/D channel to use. Must be one of the ATM128_ADC_SNGL_xxx&#10;   or ATM128_ADC_DIFF_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPrescaler" ref="0x404dbb40" loc="39:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
        <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcConfig.nc">
          <short>&#10; Obtain prescaler value.</short>
          <long>&#10; Obtain prescaler value.&#10; @return The prescaler value to use. Must be one of the &#10;   ATM128_ADC_PRESCALE_xxx values from Atm128Adc.h.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcConfig"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
      <documentation loc="49:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
        <short>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.</short>
        <long>&#10; Low-level CC1000 radio-access operations that must be provided by a&#10; platform wishing to use this CC1000 implementation.&#10;&#10; @author Jason Hill&#10; @author David Gay&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x404cf010" loc="63:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Initialize CC1K pins&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="read" ref="0x404cfd60" loc="77:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read a value from a CC1000 register.</short>
          <long>&#10; Read a value from a CC1000 register.&#10; @param addr Which CC1000 register&#10; @return Value of register&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x404cfc08" loc="77:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="write" ref="0x404cf758" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="65:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Write a value to a CC1000 register.</short>
          <long>&#10; Write a value to a CC1000 register.&#10; @param addr Which CC1000 register&#10; @param data Value to write&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="addr" ref="0x404cf408" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="data" ref="0x404cf5f8" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLOCK" ref="0x404dc210" loc="83:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
        <documentation loc="79:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000.nc">
          <short>&#10; Read the state of the CHP_OUT pin&#10; </short>
          <long>&#10; Read the state of the CHP_OUT pin&#10; @return State of CHP_OUT as a boolean (TRUE for high)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplCC1000Spi" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <short>&#10; Interface to the CC1000 chip's serial bus.</short>
        <long>&#10; Interface to the CC1000 chip's serial bus. This isn't really an SPI,&#10; but the mica2 interface was done using the Atmega128 SPI hardware. Hence&#10; the name.&#10;&#10; @author Jaein Jeong&#10; @author Philip buonadonna&#10;</long>
      </documentation>
      <function command="" provided="0" name="isBufBusy" ref="0x404ef5e0" loc="62:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Is write buffer busy with the last transmission?&#10; </short>
          <long>&#10; Is write buffer busy with the last transmission?&#10; @return TRUE if the buffer is busy, FALSE otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="initSlave" ref="0x404ee848" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="82:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Initialise the interface to the CC1000 bus.</short>
          <long>&#10; Initialise the interface to the CC1000 bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableIntr" ref="0x404ee418" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="77:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Disable CC1000 bus interrupts.</short>
          <long>&#10; Disable CC1000 bus interrupts.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="writeByte" ref="0x404ef168" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Write a byte to the CC1000 bus.</short>
          <long>&#10; Write a byte to the CC1000 bus.&#10; @param data Byte to write.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x404ef010" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableIntr" ref="0x404eff18" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="70:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus.</short>
          <long>&#10; Enable dataReady events on every byte sent or received from the CC1000&#10; bus. After this is called, dataReady events will be signaled every&#10; 8 CC1000 data clocks.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="txMode" ref="0x404eec68" loc="90:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="87:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus &#34;transmit&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="readByte" ref="0x404efaa8" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="64:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Get the last byte received from the CC1000 bus.</short>
          <long>&#10; Get the last byte received from the CC1000 bus.&#10; @return Last byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rxMode" ref="0x404ed0c8" loc="95:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.</short>
          <long>&#10; Switch the interface to the CC1000 bus to &#34;receive&#34; mode.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x404ed6a8" loc="103:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
        <documentation loc="97:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
          <short>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks.</short>
          <long>&#10; If enableIntr() is called, this event will be signaled every 8 CC1000&#10; data clocks. &#10; @param data In &#34;receive&#34; mode, the last value received from the CC1000 &#10;   bus.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplCC1000Spi"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x404ed550" loc="103:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/HplCC1000Spi.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Scheduler" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
        <short> &#10; The interface to a TinyOS task scheduler.</short>
        <long> &#10; The interface to a TinyOS task scheduler.&#10;&#10; @author Philip Levis&#10; @date   January 19 2005&#10; @see TEP 106: Tasks and Schedulers&#10; @see TEP 107: Boot Sequence&#10;</long>
      </documentation>
      <function command="" provided="0" name="init" ref="0x4031c3f0" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
        <documentation loc="54:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
          <short> &#10; Initialize the scheduler.</short>
          <long> &#10; Initialize the scheduler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="taskLoop" ref="0x4031ccf8" loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
          <short>&#10; Enter an infinite task-running loop.</short>
          <long>&#10; Enter an infinite task-running loop. Put the MCU into a low power&#10; state when the processor is idle (task queue empty, waiting for&#10; interrupts). This call never returns.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="runNextTask" ref="0x4031c830" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/Scheduler.nc">
          <short> &#10; Run the next task if one is waiting, otherwise return immediately.</short>
          <long> &#10; Run the next task if one is waiting, otherwise return immediately. &#10;&#10; @return        whether a task was run -- TRUE indicates a task&#10;                ran, FALSE indicates there was no task to run.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Scheduler"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="TaskBasic" loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/TaskBasic.nc">
      <function command="" provided="0" name="postTask" ref="0x40323c58" loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/TaskBasic.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/TaskBasic.nc">
          <short>&#10; Post this task to the TinyOS scheduler.</short>
          <long>&#10; Post this task to the TinyOS scheduler. At some later time,&#10; depending on the scheduling policy, the scheduler will signal the&#10; &#60;tt>run()&#60;/tt> event. &#10;&#10; @return SUCCESS if task was successfuly&#10; posted; the semantics of a non-SUCCESS return value depend on the&#10; implementation of this interface (the class of task).&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="runTask" ref="0x403221a8" loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/TaskBasic.nc">
        <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/interfaces/TaskBasic.nc">
          <short>&#10; Event from the scheduler to run this task.</short>
          <long>&#10; Event from the scheduler to run this task. Following the TinyOS&#10; concurrency model, the codes invoked from &#60;tt>run()&#60;/tt> signals&#10; execute atomically with respect to one another, but can be&#10; preempted by async commands/events.&#10;</long>
        </documentation>
        <interfacedef-ref qname="TaskBasic"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuSleep" loc="74:/root/Projects/tinyos-main-read-only/tos/interfaces/McuSleep.nc">
      <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/McuSleep.nc">
        <short>&#10; Interface to instruct the MCU to enter a low power state.</short>
        <long>&#10; Interface to instruct the MCU to enter a low power state. TEP112&#10; describes how an MCU computes this state and how the Scheduler uses&#10; this interface to manage system power draw.&#10; &#10; @author Philip Levis&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @date   Oct 26, 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="sleep" ref="0x40397138" loc="76:/root/Projects/tinyos-main-read-only/tos/interfaces/McuSleep.nc">
        <documentation loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/McuSleep.nc">
          <short> Called by the scheduler to put the MCU to sleep.</short>
          <long> Called by the scheduler to put the MCU to sleep. *</long>
        </documentation>
        <interfacedef-ref qname="McuSleep"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerOverride" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
        <short>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state.</short>
        <long>&#10; Interface to allow high-level components to set a lower bound for a&#10; microcontroller's low power state. This is sometimes necessary,&#10; e.g., if a very low power state has a long wakeup latency that will&#10; violate application timing requirements. TEP 112 describes how&#10; TinyOS incorporates this information when the Scheduler tells&#10; the MCU to enter a low power state.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microconroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="lowestState" ref="0x403a6548" loc="62:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerOverride.nc">
          <short>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound.</short>
          <long>&#10; Called when computing the low power state, in order to allow&#10; a high-level component to institute a lower bound. Because&#10; this command originates deep within the basic TinyOS scheduling&#10; mechanisms, it should be used very sparingly. Refer to TEP 112 for&#10; details.&#10;&#10; @return    the lowest power state the system can enter to meet the &#10;            requirements of this component&#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerOverride"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="mcu_power_t" ref="0x40358470"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="McuPowerState" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerState.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerState.nc">
        <short>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed.</short>
        <long>&#10; Interface to instruct TinyOS that the low-power state of the MCU&#10; may have changed. TEP 112 describes how an MCU computes this state&#10; and how the Scheduler uses this interface to manage system power&#10; draw.&#10; &#10; @author Philip Levis&#10; @date   Oct 26, 2005&#10; @see    TEP 112: Microcontroller Power Management&#10;</long>
      </documentation>
      <function command="" provided="0" name="update" ref="0x403a9648" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerState.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/McuPowerState.nc">
          <short> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed.</short>
          <long> &#10; Called by any component to tell TinyOS that the MCU low&#10; power state may have changed. Generally, this should be&#10; called whenever a peripheral/timer is started/stopped. &#10;</long>
        </documentation>
        <interfacedef-ref qname="McuPowerState"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeStamp" loc="35:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
      <parameters>
        <typedef name="precision_tag" ref="0x4060d178" loc="35:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4060d178"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4060d2e0" loc="35:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <interfacedef-ref qname="PacketTimeStamp"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4060d2e0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="timestamp" ref="0x4060c4d8" loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to get timestamp from.&#10;&#10; Return the time stamp for the given message. Please check with the&#10; isValid command if this value can be relied upon. If this command is&#10; called after transmission, then the transmit time of the packet&#10; is returned (the time when the frame synchronization byte was&#10; transmitted). If this command is called after the message is received,&#10; the tne receive time of the message is returned. It is recommended that&#10; the timestamp command be called only from the receive or sendDone event&#10; handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4060d2e0"/></type-var>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060c380" loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clear" ref="0x4060a010" loc="70:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to FALSE.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060ce18" loc="70:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isValid" ref="0x4060d968" loc="49:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="37:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to examine.&#10;&#10; Returns TRUE if the time stamp of the message is valid. Under special&#10; circumstances the radio chip might not be able to correctly assign a&#10; precise time value to an incoming packet (e.g. under very heavy traffic&#10; multiple interrupts can occur before they could be serviced, and even&#10; if capture registers are used, it is not possible to get the time stamp&#10; for the first or last unserviced event), in which case the time stamp&#10; value should not be used. It is recommended that the isValid command be&#10; called from the receive or sendDone event handler.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060d810" loc="49:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x4060aad0" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
        <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' Message to modify.&#10;&#10; Sets the isValid flag to TRUE and the time stamp value to the&#10; specified value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeStamp"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4060d2e0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060a760" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="value" ref="0x4060a970" loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketTimeStamp.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4060d2e0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LowPowerListening" loc="41:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
        <short>&#10; Low Power Listening interface&#10;&#10; </short>
        <long>&#10; Low Power Listening interface&#10;&#10; @author Jonathan Hui&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="setRemoteWakeupInterval" ref="0x40616b60" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.</short>
          <long>&#10; Configure this outgoing message so it can be transmitted to a neighbor mote&#10; with the specified wakeup interval.&#10; @param 'message_t* ONE msg' Pointer to the message that will be sent&#10; @param intervalMs The receiving node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406167c8" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="intervalMs" ref="0x40616a00" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getRemoteWakeupInterval" ref="0x40613650" loc="71:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t* ONE msg'&#10; @return the destination node's wakeup interval configured in this message&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406134f8" loc="71:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLocalWakeupInterval" ref="0x406162f0" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
        <documentation loc="54:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
          <short>&#10; </short>
          <long>&#10; @return the local node's wakeup interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setLocalWakeupInterval" ref="0x40619bb8" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
        <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
          <short>&#10; Set this this node's radio wakeup interval, in milliseconds.</short>
          <long>&#10; Set this this node's radio wakeup interval, in milliseconds. After&#10; each interval, the node will wakeup and check for radio activity.&#10;&#10; Note: The wakeup interval can be set to 0 to indicate that the radio&#10; should stay on all the time but in order to get a startDone this&#10; should only be done when the duty-cycling is off (after a stopDone).&#10;&#10; @param intervalMs the length of this node's Rx check interval, in [ms]&#10;</long>
        </documentation>
        <interfacedef-ref qname="LowPowerListening"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="intervalMs" ref="0x40619a60" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/LowPowerListening.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketAcknowledgements" loc="44:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
        <short>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.</short>
        <long>&#10; This interface allows a component to enable or disable acknowledgments&#10; on a per-packet basis.&#10;&#10; @author Jonathan Hui&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   June 21 2006&#10;</long>
      </documentation>
      <function command="" provided="0" name="requestAck" ref="0x40601ad8" loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should use synchronous&#10; acknowledgments.&#10; The acknowledgment is synchronous as the caller can check whether the&#10; ack was received through the wasAcked() command as soon as a send operation&#10; completes.&#10;&#10; @param 'message_t* ONE msg' - A message which should be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are enabled, EBUSY&#10; if the communication layer cannot enable them at this time, FAIL&#10; if it does not support them.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40601980" loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="noAck" ref="0x4060e5f8" loc="71:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.</short>
          <long>&#10; Tell a protocol that when it sends this packet, it should not use&#10; synchronous acknowledgments.&#10;&#10; @param 'message_t* ONE msg' - A message which should not be acknowledged when transmitted.&#10; @return SUCCESS if acknowledgements are disabled, EBUSY&#10; if the communication layer cannot disable them at this time, FAIL&#10; if it cannot support unacknowledged communication.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060e4a0" loc="71:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="wasAcked" ref="0x4060f090" loc="85:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
        <documentation loc="73:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
          <short>&#10; Tell a caller whether or not a transmitted packet was acknowledged.</short>
          <long>&#10; Tell a caller whether or not a transmitted packet was acknowledged.&#10; If acknowledgments on the packet had been disabled through noAck(),&#10; then the return value is undefined. If a packet&#10; layer does not support acknowledgements, this command must return always&#10; return FALSE.&#10;&#10; @param 'message_t* ONE msg' - A transmitted message.&#10; @return Whether the packet was acknowledged.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketAcknowledgements"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4060ef28" loc="85:/root/Projects/tinyos-main-read-only/tos/interfaces/PacketAcknowledgements.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PacketTimeSyncOffset" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
      <function command="" provided="0" name="get" ref="0x40629670" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns the offset of where the timesync timestamp is sotred in a&#10; CC2420 packet&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40629518" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isSet" ref="0x4061bd40" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
        <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to examine.&#10;&#10; Returns TRUE if the current message should be timestamped.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x4061bbe8" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x406288f8" loc="72:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10; Cancels any pending requests to timestamp the message in MAC.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x406287a0" loc="72:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x40628010" loc="65:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
          <short>&#10; </short>
          <long>&#10; @param 'message_t *ONE msg' message to modify.&#10;&#10;  Sets the current message to be timestamped in the MAC layer.&#10;</long>
        </documentation>
        <interfacedef-ref qname="PacketTimeSyncOffset"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40629df0" loc="65:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/PacketTimeSyncOffset.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkPacketMetadata" loc="37:/root/Projects/tinyos-main-read-only/tos/interfaces/LinkPacketMetadata.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/interfaces/LinkPacketMetadata.nc">
        <short>&#10; This interface provides metadata associated with a link layer packet.</short>
        <long>&#10; This interface provides metadata associated with a link layer packet.&#10; @author Philip Levis&#10;</long>
      </documentation>
      <function command="" provided="0" name="highChannelQuality" ref="0x406207d8" loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/LinkPacketMetadata.nc">
        <documentation loc="39:/root/Projects/tinyos-main-read-only/tos/interfaces/LinkPacketMetadata.nc">
          <short>&#10; Return true if the channel during this packet had high quality (few bit errors).</short>
          <long>&#10; Return true if the channel during this packet had high quality (few bit errors).&#10; A good rule of thumb for &#34;high quality&#34; is that the channel quality&#10; would enable MTU packets to have a reception rate of 90% or greater.&#10;&#10; @param 'message_t* ONE msg' A received packet during which the channel was measured.&#10; @return Whether the channel had high quality.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LinkPacketMetadata"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40620680" loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/LinkPacketMetadata.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaControl" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
        <short>&#10; Interface for activating/deactivating congestion control.</short>
        <long>&#10; Interface for activating/deactivating congestion control.&#10;&#10; @author Philip Levis&#10; @author Joe Polastre&#10; @date   August 31 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="disableCca" ref="0x406537c8" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Disable congestion control.</short>
          <long>&#10; Disable congestion control.&#10; @return SUCCESS if congestion control disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableCca" ref="0x40653318" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
        <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CsmaControl.nc">
          <short>&#10; Enable congestion control.</short>
          <long>&#10; Enable congestion control.&#10; @return SUCCESS if congestion control enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CsmaBackoff" loc="40:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
        <short>&#10; Interface for MAC Backoff values from the radio stack.</short>
        <long>&#10; Interface for MAC Backoff values from the radio stack.&#10; Allows application to change the backoff on a per packet basis.&#10; Only used if congestion control is enabled.&#10;&#10; @author Joe Polastre&#10;</long>
      </documentation>
      <function event="" provided="0" name="congestion" ref="0x40651058" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return backoff time after message m could not be send due to congestion.</short>
          <long>&#10; Return backoff time after message m could not be send due to congestion.&#10; The units are raio dependent.&#10; @param 'message_t* ONE m'&#10; @return Backoff time after congestion&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x40652ec0" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="initial" ref="0x40652668" loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
        <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
          <short>&#10; Return initial backoff time before attempting to send message m.</short>
          <long>&#10; Return initial backoff time before attempting to send message m. The&#10; units are radio dependent.&#10; @param 'message_t* ONE m'&#10; @return Initial backoff time&#10;</long>
        </documentation>
        <interfacedef-ref qname="CsmaBackoff"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m" ref="0x40652510" loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/CsmaBackoff.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="BusyWait" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
        <short>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.</short>
        <long>&#10; BusyWait is a low-level interface intended for busy waiting for short&#10; durations.&#10;&#10; &#60;p>BusyWait is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>BusyWait's second parameter is its &#34;width&#34;, i.e., the number of bits&#10; used to represent time values. Width is indicated by including the&#10; appropriate size integer type as a BusyWait parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this BusyWait&#10;   interface.&#10; @param size_type An integer type representing time values for this &#10;   BusyWait interface.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x4068b468" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x4068b468"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x4068b5d0" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
          <interfacedef-ref qname="BusyWait"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4068b5d0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="wait" ref="0x4068bbe8" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
        <documentation loc="61:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
          <short>&#10; Busy wait for (at least) dt time units.</short>
          <long>&#10; Busy wait for (at least) dt time units. Use sparingly, when the&#10; cost of using an Alarm or Timer would be too high.&#10; @param dt Time to busy wait for.&#10;</long>
        </documentation>
        <interfacedef-ref qname="BusyWait"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4068b5d0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x4068ba90" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/BusyWait.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x4068b5d0"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReadNow" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
        <short>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values.</short>
        <long>&#10; The ReadNow interface is intended for split-phase low-latency&#10; reading of small values. The type of the value is given as a&#10; template argument. Because this interface is split-phase, these&#10; values may be backed by hardware. Providers of this interface&#10; should also provide a Resource interface, and this interface should&#10; only be used after the resource has been acquired. Otherwise, the&#10; low-latency requirement may be impossible to meet.&#10;&#10; &#60;p>&#10; This interface has the same calling semantics as the Read interface&#10; described in TEP 114, except that it is async.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-16 18:58:51 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x40689010" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
          <interfacedef-ref qname="ReadNow"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40689010"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x406894e0" loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x40689cb0" loc="66:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReadNow"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40689010"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40689980" loc="66:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x40689b50" loc="66:/root/Projects/tinyos-main-read-only/tos/interfaces/ReadNow.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x40689010"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Random" loc="40:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
        <short> &#10; Interface for generating 16-bit and 32-bit random numbers.</short>
        <long> &#10; Interface for generating 16-bit and 32-bit random numbers.&#10;&#10; @author Barbara Hohlt &#10; @date   March 1 2005 &#10;</long>
      </documentation>
      <function command="" provided="0" name="rand16" ref="0x4067b3d8" loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns low 16 bits of the pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="rand32" ref="0x4067cf10" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
        <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/interfaces/Random.nc">
          <short> &#10; Produces a 32-bit pseudorandom number.</short>
          <long> &#10; Produces a 32-bit pseudorandom number. &#10; @return Returns the 32-bit pseudorandom number.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Random"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CC1000Squelch" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
        <short>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; </short>
        <long>&#10; CC1000 internal noise floor (aka squelch value) interface&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="get" ref="0x40671d20" loc="57:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Return current estimated noise floor&#10; </short>
          <long>&#10; Return current estimated noise floor&#10; @return Noise floor value&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="settled" ref="0x4067c1a8" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; </short>
          <long>&#10; Check if noise floor estimate is considered stable (typically after&#10; some number of measurements)&#10; @return TRUE if noise floor estimate considered stable, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="adjust" ref="0x40671898" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
          <short>&#10; Adjust noise floor based on new noise measurement&#10; </short>
          <long>&#10; Adjust noise floor based on new noise measurement&#10; @param data noise measurement&#10;</long>
        </documentation>
        <interfacedef-ref qname="CC1000Squelch"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40671740" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/CC1000Squelch.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ByteRadio" loc="19:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
      <documentation loc="10:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <short>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission).</short>
        <long>&#10; Radio logic is split between Csma (media-access control, low-power&#10; listening and general control) and SendReceive (packet reception and&#10; transmission). This interface specifies the interaction between these&#10; two components.&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function event="" provided="0" name="rts" ref="0x40674c78" loc="25:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="21:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive wants to send a packet.</short>
          <long>&#10; SendReceive wants to send a packet.&#10; @param msg Message to be sent.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40674b20" loc="25:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="listen" ref="0x4066ea80" loc="61:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Enable listening for incoming packets.</short>
          <long>&#10; Enable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="syncing" ref="0x406819c0" loc="85:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="76:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Detect if SendReceive is attempting to sync with an incoming packet.</short>
          <long>&#10; Detect if SendReceive is attempting to sync with an incoming packet.&#10; During sync, idleByte events are not signaled. If sync is successful,&#10; an rx() event will be signaled, if it fails, idleByte events will&#10; resume. If syncing() returns TRUE, the last idleByte() event must&#10; have had preamble = TRUE.&#10;&#10; @return TRUE if a sync attempt is in progress, FALSE if not.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x4067f310" loc="95:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Message reception is complete.</short>
          <long>&#10; Message reception is complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getPreambleLength" ref="0x4066e658" loc="56:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Get message preamble length.</short>
          <long>&#10; Get message preamble length.&#10; @return Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="idleByte" ref="0x40681468" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="68:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.</short>
          <long>&#10; SendReceive signals this event for every radio-byte-time while&#10; listening is enabled and a message isn't being received or&#10; transmitted.&#10; @param preamble TRUE if a message preamble byte has been received&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="preamble" ref="0x40681310" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cts" ref="0x4066f0c8" loc="32:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="27:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Access to the media granted.</short>
          <long>&#10; Access to the media granted. Start sending. SendReceive must signal&#10; sendDone when transmission is complete. Note: the media-access-contro&#10; layer must have enabled listening before calling cts().&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPreambleLength" ref="0x4066e168" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="46:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Set message preamble length.</short>
          <long>&#10; Set message preamble length.&#10; @param bytes Preamble length in bytes&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="bytes" ref="0x4066e010" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x4066faf0" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Transmission complete.</short>
          <long>&#10; Transmission complete.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="off" ref="0x4066ee80" loc="66:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Disable listening for incoming packets.</short>
          <long>&#10; Disable listening for incoming packets.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getTxMessage" ref="0x4066f630" loc="39:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.</short>
          <long>&#10; Between the rts() and sendDone() events, this must return the&#10; message under transmission.&#10; @return Message being transmitted.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
              <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
            </type-tag>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rx" ref="0x40681f10" loc="90:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
        <documentation loc="87:/root/Projects/tinyos-main-read-only/tos/chips/cc1000/ByteRadio.nc">
          <short>&#10; A message is being received&#10;</short>
        </documentation>
        <interfacedef-ref qname="ByteRadio"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LocalTime" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
        <short>&#10; A LocalTime interface counts time in some units.</short>
        <long>&#10; A LocalTime interface counts time in some units. If you need to detect&#10; time overflow, you should use a component offering the Counter&#10; interface.&#10;&#10; &#60;p>The LocalTime interface is parameterised by its &#34;precision&#34;&#10; (milliseconds, microseconds, etc), identified by a type. This prevents,&#10; e.g., unintentionally mixing components expecting milliseconds with&#10; those expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x406e53c8" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
          <interfacedef-ref qname="LocalTime"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x406e53c8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x406e58a8" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/lib/timer/LocalTime.nc">
          <short> &#10; Return current time.</short>
          <long> &#10; Return current time. Time starts counting at boot - some time sources&#10; may stop counting while the processor is in low-power mode.&#10;&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="LocalTime"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned long" unsigned="" size="I:4" alignment="I:1">
            <typename><typedef-ref name="uint32_t" ref="0x40038848"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Resource" loc="77:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
      <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The Resource interface can be used to gain access to&#10; shared resources.  It is always offered as a parameterized&#10; interface, and its users gain access to the resource through some&#10; predefined arbitration policy.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.6 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x407630f8" loc="120:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <documentation loc="104:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
          <short>&#10; Release a shared resource you previously acquired.</short>
          <long>&#10; Release a shared resource you previously acquired.  &#10;&#10; @return SUCCESS The resource has been released &#60;br>&#10;         FAIL You tried to release but you are not the&#10;              owner of the resource &#10;&#10; @note This command should never be called between putting in a request &#9;  &#10;       and waiting for a granted event.  Doing so will result in a&#10;       potential race condition.  There are ways to guarantee that no&#10;       race will occur, but they are clumsy and overly complicated.&#10;       Since it doesn't logically make since to be calling&#10;       &#60;code>release&#60;/code> before receiving a &#60;code>granted&#60;/code> event, &#10;       we have opted to keep thing simple and warn you about the potential &#10;       race.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="immediateRequest" ref="0x407647a8" loc="97:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <documentation loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
          <short>&#10; Request immediate access to a shared resource.</short>
          <long>&#10; Request immediate access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. &#60;br>&#10;            FAIL The request cannot be fulfilled&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="request" ref="0x407641a8" loc="88:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <documentation loc="78:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
          <short>&#10; Request access to a shared resource.</short>
          <long>&#10; Request access to a shared resource. You must call release()&#10; when you are done with it.&#10;&#10; @return SUCCESS When a request has been accepted. The granted()&#10;                 event will be signaled once you have control of the&#10;                 resource.&#60;br>&#10;         EBUSY You have already requested this resource and a&#10;               granted event is pending&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40764c58" loc="102:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <documentation loc="99:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
          <short>&#10; You are now in control of the resource.</short>
          <long>&#10; You are now in control of the resource.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x407637f0" loc="128:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
        <documentation loc="122:/root/Projects/tinyos-main-read-only/tos/interfaces/Resource.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10;  @return TRUE  It is the owner &#60;br>&#10;             FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="Resource"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceConfigure" loc="54:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10; &#10; This interface is provided by a Resource arbiter in order to allow&#10; users of a shared resource to configure that resource just before being&#10; granted access to it.  It will always be parameterized along side &#10; a parameterized Resource interface, with the ids from one mapping directly&#10; onto the ids of the other.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="unconfigure" ref="0x407c40f8" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to unconfigure a resource just before releasing it.</short>
          <long>&#10; Used to unconfigure a resource just before releasing it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="configure" ref="0x407c8c08" loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceConfigure.nc">
          <short>&#10; Used to configure a resource just before being granted access to it.</short>
          <long>&#10; Used to configure a resource just before being granted access to it.&#10; Must always be used in conjuntion with the Resource interface.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceConfigure"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Read" loc="49:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
        <short>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values.</short>
        <long>&#10; The Read interface is intended for split-phase low-rate or&#10; high-latency reading of small values. The type of the value is&#10; given as a template argument. Because this interface is&#10; split-phase, these values may be backed by hardware, or a&#10; long-running computation.&#10;&#10; &#60;p>&#10; See TEP114 - SIDs: Source and Sink Independent Drivers for details.&#10; &#10; @param val_t the type of the object that will be returned&#10;&#10; @author Gilman Tolle &#60;gtolle@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:14 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="val_t" ref="0x407da270" loc="49:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
          <interfacedef-ref qname="Read"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x407da270"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="read" ref="0x407da720" loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
        <documentation loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
          <short>&#10; Initiates a read of the value.</short>
          <long>&#10; Initiates a read of the value.&#10; &#10; @return SUCCESS if a readDone() event will eventually come back.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="readDone" ref="0x407daed0" loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
          <short>&#10; Signals the completion of the read().</short>
          <long>&#10; Signals the completion of the read().&#10;&#10; @param result SUCCESS if the read() was successful&#10; @param val the value that has been read&#10;</long>
        </documentation>
        <interfacedef-ref qname="Read"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x407da270"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x407daba0" loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
          <variable name="val" ref="0x407dad70" loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Read.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="val_t" scoped="" ref="0x407da270"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcMultiple" loc="77:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring data&#10; from multiple channels using the ATmega128's free-running mode.&#10; &#60;p>&#10; Because of the possibility that samples may be imprecise after &#10; switching channels and/or reference voltages, and because there&#10; is a one sample delay on swithcing channels and reference voltages,&#10; Atm128ADCMultiple is complex. Two straightforward uses are:&#10; &#60;ol type=&#34;A&#34;>&#10; &#60;li>Acquire N samples from channel C:&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C at the desired rate&#10;       (note that the choice of prescalers is very limited, so you&#10;       don't have many choices for sampling rate)&#10;    &#60;li>ignore the first dataReady event&#10;    &#60;li>use the results of the next N dataReady() events, return FALSE&#10;       on the last one&#10;    &#60;/ol>&#10; &#60;li>Acquire one sample each from channels C1, ..., Cn (this pseudocode&#10;    assumes that none of these channels are differential)&#10;    &#60;ol>&#10;    &#60;li>call getData to start sampling on channel C1&#10;    &#60;li>on the ith dataReady event switch to channel Ci+1 by changing&#10;       *newChannel&#10;    &#60;li>the data passed to the ith dataReady event is for channel Ci-1&#10;       (the data from the first dataReady event is ignored)&#10;    &#60;/ol>&#10; &#60;/ol>&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x407e7180" loc="100:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="79:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.</short>
          <long>&#10; Initiates free-running ADC conversions, with the ability to switch &#10; channels and reference-voltage with a one sample delay.&#10;&#10; @param channel Initial A/D conversion channel. The channel can &#10;   be changed in the dataReady event, though these changes happen&#10;   with a one-sample delay (this is a hardware restriction).&#10; @param refVoltage Initial A/D reference voltage. See the&#10;   ATM128_ADC_VREF_xxx constants in Atm128ADC.h. Like the channel,&#10;   the reference voltage can be changed in the dataReady event with&#10;   a one-sample delay.&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in reference voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x407e88e8" loc="100:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x407e8b10" loc="100:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x407e8d38" loc="101:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x407e7010" loc="101:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x407e64f0" loc="119:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
        <documentation loc="103:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
          <short>&#10; Returns the next sample in a free-running conversion.</short>
          <long>&#10; Returns the next sample in a free-running conversion. Allow the user&#10; to switch channels and/or reference voltages with a one sample delay.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if this conversion was precise, FALSE if it wasn't &#10;   (we assume that the second conversion after a change of reference&#10;   voltage or after switching to a differential channel is precise)&#10; @param channel Channel this sample was from.&#10; @param newChannel Change this parameter to switch to a new channel&#10;   for the second next sample.&#10; @param newRefVoltage Change this parameter to change the reference &#10;   voltage for the second next sample.&#10;&#10; @return TRUE to continue sampling, FALSE to stop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcMultiple"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407e7aa0" loc="119:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x407e7c90" loc="119:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
          <variable name="channel" ref="0x407e7e98" loc="119:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="newChannel" ref="0x407e6110" loc="120:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="newRefVoltage" ref="0x407e6378" loc="120:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcMultiple.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Atm128AdcSingle" loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
      <documentation loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <short>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.</short>
        <long>&#10; Hardware Abstraction Layer interface of Atmega128 for acquiring&#10; a single sample from a channel.&#10;&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="getData" ref="0x407d13a0" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Initiates an ADC conversion on a given channel.</short>
          <long>&#10; Initiates an ADC conversion on a given channel.&#10;&#10; @param channel A/D conversion channel.&#10; @param refVoltage Select reference voltage for A/D conversion. See&#10;   the ATM128_ADC_VREF_xxx constants in Atm128ADC.h&#10; @param leftJustify TRUE to place A/D result in high-order bits &#10;   (i.e., shifted left by 6 bits), low to place it in the low-order bits&#10; @param prescaler Prescaler value for the A/D conversion clock. If you &#10;  specify ATM128_ADC_PRESCALE, a prescaler will be chosen that guarantees&#10;  full precision. Other prescalers can be used to get faster conversions. &#10;  See the ATmega128 manual for details.&#10; @return TRUE if the conversion will be precise, FALSE if it will be &#10;   imprecise (due to a change in refernce voltage, or switching to a&#10;   differential input channel)&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="channel" ref="0x407d4b88" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="refVoltage" ref="0x407d4db0" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="leftJustify" ref="0x407d1010" loc="71:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
          <variable name="prescaler" ref="0x407d1230" loc="71:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x407d0450" loc="91:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Cancel an outstanding getData operation.</short>
          <long>&#10; Cancel an outstanding getData operation. Use with care, to&#10; avoid problems with races between the dataReady event and cancel.&#10; @return TRUE if a conversion was in-progress or an interrupt&#10;   was pending. dataReady will not be signaled. FALSE if the&#10;   conversion was already complete. dataReady will be (or has&#10;   already been) signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x407d1e50" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
        <documentation loc="73:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
          <short>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.</short>
          <long>&#10; Indicates a sample has been recorded by the ADC as the result&#10; of a &#60;code>getData()&#60;/code> command.&#10;&#10; @param data a 2 byte unsigned data value sampled by the ADC.&#10; @param precise if the conversion precise, FALSE if it wasn't. This&#10;   values matches the result from the &#60;code>getData&#60;/code> call.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Atm128AdcSingle"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407d1b00" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="precise" ref="0x407d1cf0" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/Atm128AdcSingle.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Adc" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <short>&#10; HPL interface to the Atmega128 A/D conversion subsystem.</short>
        <long>&#10; HPL interface to the Atmega128 A/D conversion subsystem. Please see the&#10; Atmega128 manual for full details on the functioning of this subsystem.&#10; &#60;p>&#10; A word of warning: the Atmega128 SLEEP instruction initiates an A/D&#10; conversion when the ADC and ADC interrupt are enabled.&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10; @author Hu Siquan &#60;husq@xbow.com>&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSingle" ref="0x407f51a8" loc="114:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="111:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdmux" ref="0x407e38b0" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Read the ADMUX (ADC selection) register&#10; @return Current ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4036d8f0"/>
            <typename><typedef-ref name="Atm128Admux_t" ref="0x4036db78"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setPrescaler" ref="0x407f36b8" loc="140:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="135:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set ADC prescaler selection bits&#10; </short>
          <long>&#10; Set ADC prescaler selection bits&#10; @param scale New ADC prescaler. Must be one of the ATM128_ADC_PRESCALE_xxx&#10;   values from Atm128Adc.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x407f3560" loc="140:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnabled" ref="0x407f5668" loc="122:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="118:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is ADC enabled?&#10; </short>
          <long>&#10; Is ADC enabled?&#10; @return TRUE if the ADC is enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableAdc" ref="0x407dd360" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="79:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdmux" ref="0x407e3ec8" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADMUX (ADC selection) register&#10; </short>
          <long>&#10; Set the ADMUX (ADC selection) register&#10; @param admux New ADMUX value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4036d8f0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4036db78"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="admux" ref="0x407e3d70" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x4036d8f0"/>
              <typename><typedef-ref name="Atm128Admux_t" ref="0x4036db78"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableInterruption" ref="0x407ddbb0" loc="91:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isComplete" ref="0x407f3010" loc="133:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="128:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.</short>
          <long>&#10; Is A/D conversion complete? Note that this flag is automatically&#10; cleared when an A/D interrupt occurs.&#10; @return TRUE if the A/D conversion is complete, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="cancel" ref="0x407f3b60" loc="150:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="142:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Cancel A/D conversion and any pending A/D interrupt.</short>
          <long>&#10; Cancel A/D conversion and any pending A/D interrupt. Also disables the&#10; ADC interruption (otherwise a sample might start at the next sleep&#10; instruction). This command can assume that the A/D converter is enabled. &#10; @return TRUE if an A/D conversion was in progress or an A/D interrupt&#10;   was pending, FALSE otherwise. In single conversion mode, a return&#10;   of TRUE implies that the dataReady event will not be signaled.&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableAdc" ref="0x407dd760" loc="86:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetInterrupt" ref="0x407dc468" loc="99:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="96:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Clear the ADC interrupt flag&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableInterruption" ref="0x407dc038" loc="95:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Disable ADC interrupt&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startConversion" ref="0x407dc8a0" loc="106:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="101:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Start ADC conversion.</short>
          <long>&#10; Start ADC conversion. If ADC interrupts are enabled, the dataReady event&#10; will be signaled once (in non-continuous mode) or repeatedly (in&#10; continuous mode).&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isStarted" ref="0x407f5ad8" loc="127:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="123:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Is A/D conversion in progress?&#10; </short>
          <long>&#10; Is A/D conversion in progress?&#10; @return TRUE if the A/D conversion is in progress, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAdcsra" ref="0x407dea18" loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="65:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Set the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Set the ADCSRA (ADC control) register&#10; @param adcsra New ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40371bc0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x4036f010"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="adcsra" ref="0x407de8c0" loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40371bc0"/>
              <typename><typedef-ref name="Atm128Adcsra_t" ref="0x4036f010"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setContinuous" ref="0x407dcd68" loc="110:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="107:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Enable continuous sampling&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAdcsra" ref="0x407de3e8" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the ADCSRA (ADC control) register&#10; </short>
          <long>&#10; Read the ADCSRA (ADC control) register&#10; @return Current ADCSRA value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><struct-ref ref="0x40371bc0"/>
            <typename><typedef-ref name="Atm128Adcsra_t" ref="0x4036f010"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getValue" ref="0x407deec8" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="71:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; Read the latest A/D conversion result&#10; </short>
          <long>&#10; Read the latest A/D conversion result&#10; @return A/D value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReady" ref="0x407f22c8" loc="156:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
        <documentation loc="152:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
          <short>&#10; A/D interrupt occured&#10; </short>
          <long>&#10; A/D interrupt occured&#10; @param data Latest A/D conversion result&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Adc"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x407f2170" loc="156:/root/Projects/tinyos-main-read-only/tos/chips/atm128/adc/HplAtm128Adc.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="AsyncStdControl" loc="86:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
      <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This is the asynchronous counterpart to the StdContol interface.  It&#10; should be used for switching between the on and off power states of&#10; the component providing it.  This interface differs from the&#10; StdControl interface only in the fact that any of its commands can&#10; be called from asynchronous context.&#10;&#10; @author Joe Polastre&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="start" ref="0x407e49f8" loc="95:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="88:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Start this component and all of its subcomponents.</short>
          <long>&#10; Start this component and all of its subcomponents.&#10;&#10; @return SUCCESS if the component was either already on or was &#10;         successfully turned on&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x407e4ee0" loc="105:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
        <documentation loc="97:/root/Projects/tinyos-main-read-only/tos/interfaces/AsyncStdControl.nc">
          <short>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).</short>
          <long>&#10; Stop the component and any pertinent subcomponents (not all&#10; subcomponents may be turned off due to wakeup timers, etc.).&#10;&#10; @return SUCCESS if the component was either already off or was &#10;         successfully turned off&#60;br>&#10;         FAIL otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="AsyncStdControl"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceRequested" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ResourceRequested interface can be used in conjunction with the &#10; Resource interface in order to receive events based on other users&#10; requests.&#10; &#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10; @version $Revision: 1.5 $&#10; @date $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="requested" ref="0x40830458" loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x40830a30" loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceRequested.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceRequested"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceDefaultOwner" loc="40:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
      <documentation loc="31:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; </short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; @author Kevin Klues (klues@tkn.tu-berlin.edu)&#10; @version $ $&#10; @date $Date: 2007-02-04 20:06:42 $ &#10;</long>
      </documentation>
      <function command="" provided="0" name="release" ref="0x4082e1a8" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Release control of the resource&#10;&#10; </short>
          <long>&#10; Release control of the resource&#10;&#10; @return SUCCESS The resource has been released and pending requests&#10;                 can resume. &#60;br>&#10;             FAIL You tried to release but you are not the&#10;                  owner of the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="requested" ref="0x4082eb90" loc="73:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.request() command. You may want to&#10; consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="granted" ref="0x40832c58" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle.</short>
          <long>&#10; Event sent to the resource controller giving it control whenever a resource&#10; goes idle. That is to say, whenever no one currently owns the resource,&#10; and there are no more pending requests&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOwner" ref="0x4082e6b8" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  </short>
          <long>&#10;  Check if the user of this interface is the current&#10;  owner of the Resource&#10; &#10;  @return TRUE  It is the owner &#60;br>&#10;          FALSE It is not the owner&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="immediateRequested" ref="0x4082d1a8" loc="81:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
        <documentation loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceDefaultOwner.nc">
          <short>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command.</short>
          <long>&#10; This event is signalled whenever the user of this interface&#10; currently has control of the resource, and another user requests&#10; it through the Resource.immediateRequest() command. You may&#10; want to consider releasing a resource based on this event&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceDefaultOwner"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ArbiterInfo" loc="82:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
      <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
        <short>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.</short>
        <long>&#10; Please refer to TEP 108 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; The ArbiterInfo interface allows a component to query the current &#10; status of an arbiter.  It must be provided by ALL arbiter implementations,&#10; and can be used for a variety of different purposes.  Normally it will be&#10; used in conjunction with the Resource interface for performing run time&#10; checks on access rights to a particular shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="inUse" ref="0x4082c4e8" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Check whether a resource is currently allocated.</short>
          <long>&#10; Check whether a resource is currently allocated.&#10;&#10; @return TRUE If the resource being arbitrated is currently allocated&#10;              to any of its users&#60;br>&#10;         FALSE Otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="userId" ref="0x4082c9e8" loc="98:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/interfaces/ArbiterInfo.nc">
          <short>&#10; Get the id of the client currently using a resource.</short>
          <long>&#10; Get the id of the client currently using a resource.&#10; &#10; @return Id of the current owner of the resource&#60;br>&#10;         0xFF if no one currently owns the resource&#10;</long>
        </documentation>
        <interfacedef-ref qname="ArbiterInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ResourceQueue" loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
        <short>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration.</short>
        <long>&#10;  A queue interface for managing client ids when performing resource &#10;  arbitration. A single slot in the queue is guaranteed to each resource&#10;  client, with the actual queing policy determined by the implementation&#10;  of the interface.&#10;&#10;  @author Kevin Klues &#60;klueska@cs.wustl.edu>&#10;  @date   $Date: 2010-06-29 22:07:46 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="enqueue" ref="0x4083e8c0" loc="79:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
        <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Enqueue a client id&#10;&#10; </short>
          <long>&#10; Enqueue a client id&#10;&#10; @param clientId - the client id to enqueue&#10; @return SUCCESS if the client id was enqueued successfully &#60;br>&#10;         EBUSY   if it has already been enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40843200"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x4083e768" loc="79:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40843200"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isEmpty" ref="0x4083f550" loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if the queue is empty.</short>
          <long>&#10; Check to see if the queue is empty.&#10;&#10; @return TRUE  if the queue is empty. &#60;br>&#10;         FALSE if there is at least one entry in the queue&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isEnqueued" ref="0x4083fc10" loc="62:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.</short>
          <long>&#10; Check to see if a given client id has already been enqueued&#10; and is waiting to be processed.&#10;&#10; @return TRUE  if the client id is in the queue. &#60;br>&#10;         FALSE if it does not&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40843200"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="id" ref="0x4083fab8" loc="62:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="resource_client_id_t" ref="0x40843200"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x4083e1d8" loc="70:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
        <documentation loc="64:/root/Projects/tinyos-main-read-only/tos/interfaces/ResourceQueue.nc">
          <short>&#10; Retreive the client id of the next resource in the queue.</short>
          <long>&#10; Retreive the client id of the next resource in the queue. &#10; If the queue is empty, the return value is undefined.&#10;&#10; @return The client id at the head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ResourceQueue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="resource_client_id_t" ref="0x40843200"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="PowerDownCleanup" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/power/PowerDownCleanup.nc">
      <documentation loc="41:/root/Projects/tinyos-main-read-only/tos/lib/power/PowerDownCleanup.nc">
        <short>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.</short>
        <long>&#10; Please refer to TEP 115 for more information about this interface and its&#10; intended use.&#60;br>&#60;br>&#10;&#10; This interface exists to allow a Resource user to cleanup any state&#10; information before a shared Resource is shutdown.  It should be provided&#10; by the user of a shared Resource, and used by the&#10; power managment component for that Resource.  The &#60;code>cleanup()&#60;/code>&#10; command will be called by the power manager just before powering down&#10; the shared resource.&#10;&#10; @author Kevin Klues (klueska@cs.wustl.edu)&#10;</long>
      </documentation>
      <function command="" provided="0" name="cleanup" ref="0x4086e4d8" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/power/PowerDownCleanup.nc">
        <documentation loc="56:/root/Projects/tinyos-main-read-only/tos/lib/power/PowerDownCleanup.nc">
          <short>&#10; This command will be called by the power management component of&#10; a shared Resource.</short>
          <long>&#10; This command will be called by the power management component of&#10; a shared Resource.  The implementation of this command defines&#10; what must be done just before that shared Resource is shut off.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="PowerDownCleanup"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ParameterInit" loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/ParameterInit.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/types/TinyError.h">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Gay&#10; Revision:  $Revision: 1.12 $&#10;&#10; Defines global error codes for error_t in TinyOS.&#10;</long>
      </documentation>
      <parameters>
        <typedef name="parameter" ref="0x408bd118" loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/ParameterInit.nc">
          <interfacedef-ref qname="ParameterInit"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x408bd118"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="init" ref="0x408bd768" loc="64:/root/Projects/tinyos-main-read-only/tos/interfaces/ParameterInit.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/ParameterInit.nc">
          <short>&#10; Initialize this component.</short>
          <long>&#10; Initialize this component. Initialization should not assume that&#10; any component is running: init() cannot call any commands besides&#10; those that initialize other components. This command behaves&#10; identically to Init.init, except that it takes a parameter.&#10;&#10; @param   param   the initialization parameter&#10; @return          SUCCESS if initialized properly, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ParameterInit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x408bd118"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="param" ref="0x408bd610" loc="64:/root/Projects/tinyos-main-read-only/tos/interfaces/ParameterInit.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="parameter" scoped="" ref="0x408bd118"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Counter" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
        <short>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.</short>
        <long>&#10; A Counter counts time in some units and in some width, signaling&#10; overflow.&#10;&#10; &#60;p>A Counter is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>A Counter's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as a Counter parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Counter.&#10; @param size_type An integer type representing time values for this Counter.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408d0500" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408d0500"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x408d0668" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <interfacedef-ref qname="Counter"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d0668"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x408d0b50" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <short> &#10; Return counter value.</short>
          <long> &#10; Return counter value. Counters start at boot - some time sources may&#10; stop counting while the processor is in low-power mode.&#10; @return Current counter value.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d0668"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOverflow" ref="0x408cf590" loc="76:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
        <documentation loc="73:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <short>&#10; Cancel a pending overflow interrupt.</short>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOverflowPending" ref="0x408cf090" loc="71:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
        <documentation loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <short> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.</short>
          <long> &#10; Return TRUE if an overflow event will occur after the outermost atomic&#10; block is exits.  FALSE otherwise.&#10; @return Counter pending overflow status.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x408cf990" loc="82:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
        <documentation loc="78:/root/Projects/tinyos-main-read-only/tos/lib/timer/Counter.nc">
          <short>&#10; Signals that the current time has overflowed.</short>
          <long>&#10; Signals that the current time has overflowed.  That is, the current&#10; time has wrapped around from its maximum value to zero.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Counter"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Alarm" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
      <documentation loc="36:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <short>&#10; An Alarm is a low-level interface intended for precise timing.</short>
        <long>&#10; An Alarm is a low-level interface intended for precise timing.&#10;&#10; &#60;p>An Alarm is parameterised by its &#34;precision&#34; (milliseconds,&#10; microseconds, etc), identified by a type. This prevents, e.g.,&#10; unintentionally mixing components expecting milliseconds with those&#10; expecting microseconds as those interfaces have a different type.&#10;&#10; &#60;p>An Alarm's second parameter is its &#34;width&#34;, i.e., the number of&#10; bits used to represent time values. Width is indicated by including&#10; the appropriate size integer type as an Alarm parameter.&#10;&#10; &#60;p>See TEP102 for more details.&#10;&#10; @param precision_tag A type indicating the precision of this Alarm.&#10; @param size_type An integer type representing time values for this Alarm.&#10;&#10; @author Cory Sharp &#60;cssharp@eecs.berkeley.edu>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="precision_tag" ref="0x408d9690" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="precision_tag" scoped="" ref="0x408d9690"/></type-var>
        </typedef>
        <typedef name="size_type" ref="0x408d97f8" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <interfacedef-ref qname="Alarm"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="getNow" ref="0x408d4b68" loc="109:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="105:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the current time.</short>
          <long>&#10; Return the current time.&#10; @return Current time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x408d6830" loc="78:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="75:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Signaled when the alarm expires.</short>
          <long>&#10; Signaled when the alarm expires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startAt" ref="0x408d4520" loc="103:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="90:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to time t0+dt.</short>
          <long>&#10; Set a single-short alarm to time t0+dt. Replaces any current alarm&#10; time. The &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10; Alarms set in the past will fire &#34;soon&#34;.&#10; &#10; &#60;p>Because the current time may wrap around, it is possible to use&#10; values of t0 greater than the &#60;code>getNow&#60;/code>'s result. These&#10; values represent times in the past, i.e., the time at which getNow()&#10; would last of returned that value.&#10;&#10; @param t0 Base time for alarm.&#10; @param dt Alarm time as offset from t0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t0" ref="0x408d41d0" loc="103:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          </variable>
          <variable name="dt" ref="0x408d43c0" loc="103:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isRunning" ref="0x408d6ca0" loc="88:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="81:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Check if alarm is running.</short>
          <long>&#10; Check if alarm is running. Note that a FALSE return does not indicate&#10; that the &#60;code>fired&#60;/code> event will not be signaled (it may have&#10; already started executing, but not reached your code yet).&#10;&#10; @return TRUE if the alarm is still running.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAlarm" ref="0x408d3010" loc="116:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="111:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.</short>
          <long>&#10; Return the time the currently running alarm will fire or the time that&#10; the previously running alarm was set to fire.&#10; @return Alarm time.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x408d9e28" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Set a single-short alarm to some time units in the future.</short>
          <long>&#10; Set a single-short alarm to some time units in the future. Replaces&#10; any current alarm time. Equivalent to start(getNow(), dt). The&#10; &#60;code>fired&#60;/code> will be signaled when the alarm expires.&#10;&#10; @param dt Time until the alarm fires.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="dt" ref="0x408d9cd0" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408d97f8"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x408d63d0" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
        <documentation loc="68:/root/Projects/tinyos-main-read-only/tos/lib/timer/Alarm.nc">
          <short>&#10; Cancel an alarm.</short>
          <long>&#10; Cancel an alarm. Note that the &#60;code>fired&#60;/code> event may have&#10; already been signaled (even if your code has not yet started&#10; executing).&#10;</long>
        </documentation>
        <interfacedef-ref qname="Alarm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl8" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <short>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 8-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getControl" ref="0x408f9be0" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Timer control register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40378010"/>
            <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40378238"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptFlag" ref="0x408ef1a8" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40381040"/>
            <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40381268"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x408f16e0" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037c900"/>
            <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x4037cb28"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x408f1ce8" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037c900"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x4037cb28"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x408f1b90" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037c900"/>
              <typename><typedef-ref name="Atm128_TIMSK_t" ref="0x4037cb28"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x408ef7b0" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40381040"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40381268"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x408ef658" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40381040"/>
              <typename><typedef-ref name="Atm128_TIFR_t" ref="0x40381268"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setControl" ref="0x408f1228" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl8"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40378010"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40378238"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x408f10d0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl8.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40378010"/>
              <typename><typedef-ref name="Atm128TimerControl_t" ref="0x40378238"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerAsync" loc="15:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
      <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <short>&#10;&#10; </short>
        <long>&#10;&#10; @author David Gay&#10;</long>
      </documentation>
      <function command="" provided="0" name="controlBusy" ref="0x40906ce8" loc="38:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if control register TCCR0 is busy (should not be updated if true)&#10; @return TRUE if TCCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="compareBusy" ref="0x409051c8" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if compare register OCR0 is busy (should not be updated if true)&#10; @return TRUE if OCR0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setTimer0Asynchronous" ref="0x409068d0" loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="29:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Turn on timer 0 asynchronous mode&#10;</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="countBusy" ref="0x40905688" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; </short>
          <long>&#10; Check if current timer value (TCNT0) is busy (should not be updated if true)&#10; @return TRUE if TCNT0 is busy, FALSE otherwise (can be updated)&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="int" size="I:2" alignment="I:1"></type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getAssr" ref="0x40909de8" loc="21:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="17:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Read timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Read timer0 asynchronous status register (ASSR)&#10; @return Current value of ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037d1a8"/>
            <typename><typedef-ref name="Atm128Assr_t" ref="0x4037d3d0"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAssr" ref="0x409063f0" loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
        <documentation loc="23:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
          <short>&#10; Set timer0 asynchronous status register (ASSR)&#10; </short>
          <long>&#10; Set timer0 asynchronous status register (ASSR)&#10; @param x New value for ASSR&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerAsync"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037d1a8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4037d3d0"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="x" ref="0x40906298" loc="27:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerAsync.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037d1a8"/>
              <typename><typedef-ref name="Atm128Assr_t" ref="0x4037d3d0"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Compare" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <short>&#10; HPL Interface to Atmega128 compare registers.</short>
        <long>&#10; HPL Interface to Atmega128 compare registers.&#10; @param size_type Integer type of compare register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x408f35c0" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <interfacedef-ref qname="HplAtm128Compare"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408f35c0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="test" ref="0x4090a4f0" loc="74:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Did compare interrupt occur? &#10; </short>
          <long> &#10; Did compare interrupt occur? &#10; @return TRUE if compare triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="fired" ref="0x408ed498" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Signalled on  interrupt.</short>
          <long> Signalled on  interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x408f3ab8" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Get the compare time to fire on.</short>
          <long> &#10; Get the compare time to fire on.&#10; @return  the compare time value&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408f35c0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x408ed8a0" loc="62:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Clear the compare interrupt flag.</short>
          <long> Clear the compare interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x4090a950" loc="80:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="76:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Is compare interrupt on?&#10; </short>
          <long> &#10; Is compare interrupt on?&#10; @return TRUE if compare enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x408ed058" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> &#10; Set the compare time to fire on.</short>
          <long> &#10; Set the compare time to fire on.&#10; @param t     the compare time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408f35c0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x408f3ee8" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x408f35c0"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x408edca8" loc="65:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="64:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Enable the compare interrupt.</short>
          <long> Enable the compare interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x4090a0c8" loc="68:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Compare.nc">
          <short> Turn off comparee interrupts.</short>
          <long> Turn off comparee interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Compare"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Timer" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <short>&#10; Basic interface to the hardware timers on an ATmega128.</short>
        <long>&#10; Basic interface to the hardware timers on an ATmega128.  &#10; &#60;p>&#10; This interface is designed to be independent of whether the underlying &#10; hardware is an 8-bit or 16-bit wide counter.  As such, timer_size is &#10; specified via a generics parameter.  Because this is exposing a common &#10; subset of functionality that all ATmega128 hardware timers share, all &#10; that is exposed is access to the overflow capability.  Compare and capture&#10; functionality are exposed on separate interfaces to allow easy &#10; configurability via wiring.&#10; &#60;p>&#10; This interface provides four major groups of functionality:&#60;ol>&#10;      &#60;li>Timer Value: get/set current time&#10;      &#60;li>Overflow Interrupt event&#10;      &#60;li>Control of Overflow Interrupt: start/stop/clear...&#10;      &#60;li>Timer Initialization: turn on/off clock source&#10; &#60;/ol>&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="timer_size" ref="0x408dfc80" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <interfacedef-ref qname="HplAtm128Timer"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408dfc80"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="off" ref="0x408f64f0" loc="98:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="97:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off the clock.</short>
          <long> Turn off the clock. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x408f7c38" loc="87:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Did an overflow interrupt occur?&#10; </short>
          <long> &#10; Did an overflow interrupt occur?&#10; @return TRUE if overflow triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x408f81a8" loc="61:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get the current time.</short>
          <long> &#10; Get the current time.&#10; @return  the current time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408dfc80"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setScale" ref="0x408f6a80" loc="104:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="100:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Turn on the clock.</short>
          <long> &#10; Turn on the clock.&#10; @param scale   Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="scale" ref="0x408f6928" loc="104:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getScale" ref="0x408f6f10" loc="110:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="106:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Get prescaler setting.</short>
          <long> &#10; Get prescaler setting.&#10; @return  Prescaler setting of clock -- see Atm128Timer.h&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x408f7010" loc="75:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="74:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Clear the overflow interrupt flag.</short>
          <long> Clear the overflow interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="overflow" ref="0x408f8b50" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Signalled on timer overflow interrupt.</short>
          <long> Signalled on timer overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x408f60c8" loc="93:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="89:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Is overflow interrupt on? &#10; </short>
          <long> &#10; Is overflow interrupt on? &#10; @return TRUE if overflow enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x408f8720" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> &#10; Set the current time.</short>
          <long> &#10; Set the current time.&#10; @param t     the time to set&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408dfc80"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x408f85c8" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="timer_size" scoped="" ref="0x408dfc80"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x408f7418" loc="78:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="77:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Enable the overflow interrupt.</short>
          <long> Enable the overflow interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x408f7810" loc="81:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
        <documentation loc="80:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Timer.nc">
          <short> Turn off overflow interrupts.</short>
          <long> Turn off overflow interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Timer"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ActiveMessageAddress" loc="38:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
        <short>&#10; </short>
        <long>&#10; @author Phil Levis&#10; @author David Moss&#10;</long>
      </documentation>
      <function command="" provided="0" name="amAddress" ref="0x409b7a50" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="47:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the active message address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="changed" ref="0x409b62d8" loc="60:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Notification that the address or group settings changed.</short>
          <long>&#10; Notification that the address or group settings changed.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="amGroup" ref="0x409b7ec0" loc="55:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; </short>
          <long>&#10; @return the group address of this node&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setAddress" ref="0x409b7560" loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
        <documentation loc="40:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
          <short>&#10; Set the active message address of this node&#10; </short>
          <long>&#10; Set the active message address of this node&#10; @param group The node's group ID&#10; @param addr The node's active message address&#10;</long>
        </documentation>
        <interfacedef-ref qname="ActiveMessageAddress"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="group" ref="0x409b71f8" loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="am_group_t" ref="0x404194a0"/></typename>
            </type-int>
          </variable>
          <variable name="addr" ref="0x409b7400" loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/ActiveMessageAddress.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128TimerCtrl16" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <short>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; </short>
        <long>&#10; HPL Interface to Atmega128 16-bit timer control registers&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <function command="" provided="0" name="getInterruptFlag" ref="0x409f7b38" loc="58:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="57:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt flag register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40391b10"/>
            <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40391d38"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCapture" ref="0x409d6580" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40383e80"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403820c8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x409d6428" loc="50:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40383e80"/>
              <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403820c8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getInterruptMask" ref="0x409f7070" loc="54:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Interrupt mask register: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4038a5e8"/>
            <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x4038a810"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCompare" ref="0x409dcec8" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <documentation loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
          <short>Timer control registers: Direct access</short>
        </documentation>
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037fe20"/>
            <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x4037e068"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptMask" ref="0x409f7680" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4038a5e8"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x4038a810"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="mask" ref="0x409f7528" loc="55:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4038a5e8"/>
              <typename><typedef-ref name="Atm128_ETIMSK_t" ref="0x4038a810"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setInterruptFlag" ref="0x409f6168" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40391b10"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40391d38"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="flags" ref="0x409f6010" loc="59:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40391b10"/>
              <typename><typedef-ref name="Atm128_ETIFR_t" ref="0x40391d38"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlClock" ref="0x409d88d8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403884c0"/>
            <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403886e8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getCtrlCapture" ref="0x409d8408" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-tag size="I:1" alignment="I:1"><union-ref ref="0x40383e80"/>
            <typename><typedef-ref name="Atm128TimerCtrlCapture_t" ref="0x403820c8"/></typename>
          </type-tag>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlCompare" ref="0x409d8f20" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037fe20"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x4037e068"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x409d8dc8" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x4037fe20"/>
              <typename><typedef-ref name="Atm128TimerCtrlCompare_t" ref="0x4037e068"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setCtrlClock" ref="0x409d6ba0" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
        <interfacedef-ref qname="HplAtm128TimerCtrl16"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403884c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403886e8"/></typename>
            </type-tag>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="control" ref="0x409d6a48" loc="51:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128TimerCtrl16.nc">
            <type-tag size="I:1" alignment="I:1"><union-ref ref="0x403884c0"/>
              <typename><typedef-ref name="Atm128TimerCtrlClock_t" ref="0x403886e8"/></typename>
            </type-tag>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Capture" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <short>&#10; HPL Interface to Atmega128 capture capabilities.</short>
        <long>&#10; HPL Interface to Atmega128 capture capabilities.&#10; @param size_type Integer type of capture register&#10;&#10; @author Martin Turon &#60;mturon@xbow.com>&#10;</long>
      </documentation>
      <parameters>
        <typedef name="size_type" ref="0x409db300" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <interfacedef-ref qname="HplAtm128Capture"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="setEdge" ref="0x409f2e18" loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="84:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Sets the capture edge.</short>
          <long> &#10; Sets the capture edge.&#10; @param up   TRUE = detect rising edge, FALSE = detect falling edge&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="up" ref="0x409f2cc0" loc="88:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="test" ref="0x409f2430" loc="76:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="72:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Did a capture interrupt occur?&#10; </short>
          <long> &#10; Did a capture interrupt occur?&#10; @return TRUE if capture triggered, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="get" ref="0x409db7f8" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Get the time to be captured.</short>
          <long> &#10; Get the time to be captured.&#10; @return  the capture time&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="captured" ref="0x409f4368" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="56:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Signalled on capture interrupt.</short>
          <long> &#10; Signalled on capture interrupt.&#10; @param t     the time of the capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x409f4210" loc="60:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="reset" ref="0x409f47a8" loc="64:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Clear the capture interrupt flag.</short>
          <long> Clear the capture interrupt flag. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isOn" ref="0x409f2890" loc="82:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="78:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Is capture interrupt on? &#10; </short>
          <long> &#10; Is capture interrupt on? &#10; @return TRUE if capture enabled, FALSE otherwise&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="set" ref="0x409dbd70" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> &#10; Set the time to be captured.</short>
          <long> &#10; Set the time to be captured.&#10; @param t     the time of the next capture event&#10;</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="t" ref="0x409dbc18" loc="53:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="size_type" scoped="" ref="0x409db300"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="start" ref="0x409f4bb0" loc="67:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="66:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Enable the capture interrupt.</short>
          <long> Enable the capture interrupt. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="stop" ref="0x409f2010" loc="70:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
        <documentation loc="69:/root/Projects/tinyos-main-read-only/tos/chips/atm128/timer/HplAtm128Capture.nc">
          <short> Turn off capture interrupts.</short>
          <long> Turn off capture interrupts. *</long>
        </documentation>
        <interfacedef-ref qname="HplAtm128Capture"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionPacket" loc="42:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
      <function command="" provided="0" name="setSequenceNumber" ref="0x40aa0170" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa2dd8" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0x40aa0010" loc="50:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0x40aa3628" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa32c0" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40aa34c8" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40aa2398" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa2010" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0x40aa2238" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0x40aa6eb0" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa6d58" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x40aa2988" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa2830" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0x40aa3c00" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
        <interfacedef-ref qname="CollectionPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40aa3aa8" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionDebug" loc="59:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <short> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure.</short>
        <long> &#10;  The CollectionDebug is an interface for sending debugging events to&#10;  a logging infrastructure. An implementer can choose to send the event&#10;  information to different destinations. Primary examples can include:&#10;  &#60;ul>&#10;    &#60;li> logging to the UART, in case of a testbed of network-connected&#10;         nodes;&#10;    &#60;li> logging to flash, if the logs are to be retrieved later&#10;    &#60;li> logging to the standard output, in the case of TOSSIM.&#10;  &#60;/ul>&#10;  &#10;  The interface does not specify in what format the log is to be produced,&#10;  or if other information, like timestamps, should be added, and this is&#10;  up to the implementer.&#10; &#10;  Some commands are generic, like Event, EventSimple, and EventDbg, while others&#10;  are for more specific events related to collection, like EventRoute and EventMsg.&#10;&#10; @author Rodrigo Fonseca&#10; @author Kyle Jamieson&#10; @date   $Date: 2010-06-29 22:07:47 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="logEvent" ref="0x40ab29a8" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x40ab2850" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventMsg" ref="0x40aae900" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x40aae180" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="msg" ref="0x40aae370" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="origin" ref="0x40aae588" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
          <variable name="node" ref="0x40aae790" loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventSimple" ref="0x40aaf170" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x40ab2e08" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="arg" ref="0x40aaf010" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventRoute" ref="0x40aad5a8" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x40aaed58" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="parent" ref="0x40aad010" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
          <variable name="hopcount" ref="0x40aad228" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="metric" ref="0x40aad438" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="logEventDbg" ref="0x40aafd20" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
        <interfacedef-ref qname="CollectionDebug"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="type" ref="0x40aaf5b0" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
          <variable name="arg1" ref="0x40aaf7b0" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="arg2" ref="0x40aaf9b0" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="arg3" ref="0x40aafbb0" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionDebug.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpInfo" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
      <function command="" provided="0" name="getNeighborLinkQuality" ref="0x40ab6ee8" loc="96:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40ab6d90" loc="96:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="recomputeRoutes" ref="0x40ab8610" loc="83:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="80:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short> &#10; Tell the routing engine it might want to recompute its routes.</short>
          <long> &#10; Tell the routing engine it might want to recompute its routes.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="numNeighbors" ref="0x40ab6900" loc="95:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerRouteUpdate" ref="0x40ab9b70" loc="71:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="66:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.</short>
          <long>&#10; This informs the routing engine that sending a beacon soon is&#10; advisable, e.g., in response to a pull bit.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0x40ab95b8" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the ETX for the current path to the root through the current&#10; parent.</short>
          <long>&#10; Get the ETX for the current path to the root through the current&#10; parent. Sets etx argument to ETX*10.  The pointer is allocated by&#10; the caller.  If the parent is invalid, return FAIL (no info).&#10; The caller MUST NOT use the value in parent if the return is not&#10; SUCCESS. Calling getEtx at the root will set the etx argument to&#10; 0.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="etx" ref="0x40ab9460" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="triggerImmediateRouteUpdate" ref="0x40ab80f8" loc="78:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="73:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.</short>
          <long>&#10; This informs the routing engine that sending a beacon as soon&#10; as possible is advisable, e.g., due to queue overflow or&#10; a detected loop.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setNeighborCongested" ref="0x40ab8e58" loc="88:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="85:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Informs the routing engine that a neighbor is congested&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40ab8af0" loc="88:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
          <variable name="congested" ref="0x40ab8cf8" loc="88:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborAddr" ref="0x40ab5a98" loc="98:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40ab5940" loc="98:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0x40aa5f18" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10; Get the parent of the node in the tree.</short>
          <long>&#10; Get the parent of the node in the tree.  The pointer is allocated&#10; by the caller.  If the parent is invalid, return FAIL.  The&#10; caller MUST NOT use the value in parent if the return is not&#10; SUCCESS.&#10;</long>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
              </type-int>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="parent" ref="0x40aa5dc0" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
                <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
              </type-int>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getNeighborRouteQuality" ref="0x40ab54f0" loc="97:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40ab5398" loc="97:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="isNeighborCongested" ref="0x40ab6498" loc="93:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
        <documentation loc="90:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
          <short>&#10;  Returns the currently known state about a neighbor's congestion state&#10;</short>
        </documentation>
        <interfacedef-ref qname="CtpInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="n" ref="0x40ab6340" loc="93:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpInfo.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpCongestion" loc="1:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpCongestion.nc">
      <function command="" provided="0" name="isCongested" ref="0x40aa4e00" loc="7:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="setClientCongested" ref="0x40ab3460" loc="14:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpCongestion.nc">
        <interfacedef-ref qname="CtpCongestion"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="congested" ref="0x40ab3308" loc="14:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpCongestion.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpPacket" loc="44:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <short>&#10;  ADT for CTP data frames.</short>
        <long>&#10;  ADT for CTP data frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2007-11-28 04:42:52 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="setSequenceNumber" ref="0x40a9a910" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9a5b8" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="seqno" ref="0x40a9a7b0" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="option" ref="0x40a9e3e8" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9e068" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0x40a9e288" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0x40a9cd58" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9ca08" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0x40a9cbf8" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOrigin" ref="0x40a9bab8" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9b750" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40a9b958" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0x40a9fc28" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9f888" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0x40a9fac8" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0x40a9c628" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9c4d0" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOrigin" ref="0x40a9b350" loc="60:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9b1f8" loc="60:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setType" ref="0x40a985e0" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a982a8" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="id" ref="0x40a98480" loc="67:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0x40a9f468" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9f0c8" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="option" ref="0x40a9f308" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchPacket" ref="0x40abb638" loc="70:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0x40abb2c8" loc="70:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0x40abb4d8" loc="70:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getThl" ref="0x40a9e968" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9e810" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getSequenceNumber" ref="0x40a9a168" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9a010" loc="63:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="matchInstance" ref="0x40a98e20" loc="69:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="m1" ref="0x40a98ab0" loc="69:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="m2" ref="0x40a98cc0" loc="69:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getType" ref="0x40a9ae98" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9ad40" loc="66:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setThl" ref="0x40a9c098" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
        <interfacedef-ref qname="CtpPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40a9ed48" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="thl" ref="0x40a9ef28" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CollectionId" loc="45:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionId.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionId.nc">
        <short>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.</short>
        <long>&#10;  Interface for fetching the collection ID associated with a&#10;  collection sender instance.&#10;&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2006-12-12 18:23:28 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="fetch" ref="0x40ab4688" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/CollectionId.nc">
        <interfacedef-ref qname="CollectionId"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="collection_id_t" ref="0x40a86100"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="LinkEstimator" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <short> Provides an additive quality measure for a neighbor.</short>
        <long> Provides an additive quality measure for a neighbor. The&#10; provided quality increases when the true link quality increases.&#10;  @author Rodrigo Fonseca&#10;  @author Omprakash Gnawali&#10;  @date   $Date: 2010-06-29 22:07:49 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="getReverseQuality" ref="0x40ac6360" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac6208" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txAck" ref="0x40ac3188" loc="68:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac3030" loc="68:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="pinNeighbor" ref="0x40ac55e8" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac5490" loc="61:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="txNoAck" ref="0x40ac3738" loc="72:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac35e0" loc="72:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="insertNeighbor" ref="0x40ac5010" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac6e20" loc="58:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="evicted" ref="0x40ac22b8" loc="78:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac2160" loc="78:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearDLQ" ref="0x40ac3cf8" loc="75:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac3ba0" loc="75:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="unpinNeighbor" ref="0x40ac5bd8" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac5a80" loc="64:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getForwardQuality" ref="0x40ac6980" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac6828" loc="55:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getLinkQuality" ref="0x40ac9cf8" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
        <interfacedef-ref qname="LinkEstimator"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="neighbor" ref="0x40ac9ba0" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/le/LinkEstimator.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Cache" loc="44:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
        <short>&#10; A data item cache.</short>
        <long>&#10; A data item cache. The cache does not own the items it caches:&#10; there is no allocation/deallocation policy, or notification of&#10; eviction. Correspondingly, using references (pointers) as data&#10; items can be difficult.&#10; &#10; @author Rodrigo Fonseca&#10; @author Philip Levis &#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40ae2588" loc="44:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
          <interfacedef-ref qname="Cache"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40ae2588"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="insert" ref="0x40ae2b48" loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
        <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
          <short>&#10; Inserts an item in the cache, evicting if necessary.</short>
          <long>&#10; Inserts an item in the cache, evicting if necessary.&#10; An atomic lookup after insert should return true.&#10;&#10; @param item - the data item to insert.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40ae2588"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x40ae29f0" loc="51:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40ae2588"/></type-var>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40b055b8" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
        <documentation loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
          <short>&#10; Flush the cache of all entries.</short>
          <long>&#10; Flush the cache of all entries.&#10;&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="lookup" ref="0x40b05168" loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
        <documentation loc="53:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
          <short>&#10; Return whether the data item is in the cache.</short>
          <long>&#10; Return whether the data item is in the cache.&#10;&#10; @param item - the data item to query&#10; @return Whether the item is in the cache.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Cache"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40ae2588"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="item" ref="0x40b05010" loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/Cache.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40ae2588"/></type-var>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Queue" loc="43:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <short>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type.</short>
        <long>&#10;  Interface to a FIFO list (queue) that contains items&#10;  of a specific type. The queue has a maximum size.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40af22a0" loc="43:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <interfacedef-ref qname="Queue"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="head" ref="0x40aec4a0" loc="73:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; Get the head of the queue without removing it.</short>
          <long>&#10; Get the head of the queue without removing it. If the queue&#10; is empty, the return value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enqueue" ref="0x40aeb3b0" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; Enqueue an element to the tail of the queue.</short>
          <long>&#10; Enqueue an element to the tail of the queue.&#10;&#10; @param 't ONE newVal' - the element to enqueue&#10; @return SUCCESS if the element was enqueued successfully, FAIL&#10;                 if it was not enqueued.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40aeb258" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
            <attribute-value>
              <attribute-ref name="one" ref="0x40035840"/>
              <value-structured>
                <type-tag size="I:2" alignment="I:1"><attribute-ref name="one" ref="0x40035840"/></type-tag>
              </value-structured>
            </attribute-value>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="element" ref="0x40aebca8" loc="101:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail.</short>
          <long>&#10; Return the nth element of the queue without dequeueing it, &#10; where 0 is the head of the queue and (size - 1) is the tail. &#10; If the element requested is larger than the current queue size,&#10; the return value is undefined.&#10;&#10; @param index - the index of the element to return&#10; @return 't ONE' the requested element in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="idx" ref="0x40aebb50" loc="101:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40aec070" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="60:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; The maximum number of elements the queue can hold.</short>
          <long>&#10; The maximum number of elements the queue can hold.&#10;&#10; @return The maximum queue size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dequeue" ref="0x40aecb48" loc="81:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="75:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; Remove the head of the queue.</short>
          <long>&#10; Remove the head of the queue. If the queue is empty, the return&#10; value is undefined.&#10;&#10; @return 't ONE' The head of the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40af22a0"/></type-var>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40af2740" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; Returns if the queue is empty.</short>
          <long>&#10; Returns if the queue is empty.&#10;&#10; @return Whether the queue is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40af2b88" loc="58:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/Queue.nc">
          <short>&#10; The number of elements currently in the queue.</short>
          <long>&#10; The number of elements currently in the queue.&#10; Always less than or equal to maxSize().&#10;&#10; @return The number of elements in the queue.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Queue"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UnicastNameFreeRouting" loc="41:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
        <short>&#10;  Provides a single next hop on a name-free protocol.</short>
        <long>&#10;  Provides a single next hop on a name-free protocol.&#10;&#10;  @author Philip Levis&#10;  @date   $Date: 2006-12-12 18:23:29 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="hasRoute" ref="0x40af08d0" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="routeFound" ref="0x40af0c88" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="nextHop" ref="0x40af03e8" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
        <documentation loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
          <short>&#10; Get the address of the best next hop set to the destination.</short>
          <long>&#10; Get the address of the best next hop set to the destination.&#10; If there is not best next hop, the address is the local address.&#10; @return : The next best hop, or the local address if there is no route.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="noRoute" ref="0x40aee038" loc="52:/root/Projects/tinyos-main-read-only/tos/lib/net/UnicastNameFreeRouting.nc">
        <interfacedef-ref qname="UnicastNameFreeRouting"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="Pool" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <short>&#10;  An allocation pool of a specific type memory objects.</short>
        <long>&#10;  An allocation pool of a specific type memory objects.&#10;  The Pool allows components to allocate (&#60;code>get&#60;/code>)&#10;  and deallocate (&#60;code>put&#60;/code>) elements. The pool&#10;  does not require that deallocations be items which were&#10;  originally allocated. E.g., a program can create two&#10;  pools of the same type and pass items between them.&#10;  This allows, for example, a component to allocate a pool&#10;  of message buffers and freely buffer swap them on&#10;  Receive.receive events.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2008-06-04 03:00:31 $&#10;</long>
      </documentation>
      <parameters>
        <typedef name="t" ref="0x40aed3d8" loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <interfacedef-ref qname="Pool"/>
          <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40aed3d8"/></type-var>
        </typedef>
      </parameters>
      <function command="" provided="0" name="get" ref="0x40ae4070" loc="97:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <documentation loc="91:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <short>&#10; Allocate an element from the pool.</short>
          <long>&#10; Allocate an element from the pool.&#10;&#10; @return 't* ONE_NOK' A pointer if the pool is not empty, NULL if&#10; the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-pointer size="I:2" alignment="I:1">
            <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40aed3d8"/></type-var>
          </type-pointer>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="maxSize" ref="0x40ae62e0" loc="80:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <documentation loc="74:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <short>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).</short>
          <long>&#10; Returns the maximum number of elements in the pool&#10; (the size of a full pool).&#10;&#10; @return Maximum size.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="empty" ref="0x40aed878" loc="61:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <documentation loc="52:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <short>&#10; Returns whether there any elements remaining in the pool.</short>
          <long>&#10; Returns whether there any elements remaining in the pool.&#10; If empty returns TRUE, then &#60;code>get&#60;/code> will return&#10; NULL. If empty returns FALSE, then &#60;code>get&#60;/code> will&#10; return a pointer to an object.&#10;&#10; @return Whether the pool is empty.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="put" ref="0x40ae68e8" loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <documentation loc="82:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <short>&#10; Deallocate an object, putting it back into the pool.</short>
          <long>&#10; Deallocate an object, putting it back into the pool.&#10;&#10; @param 't* ONE newVal'&#10; @return SUCCESS if the entry was put in successfully, FAIL&#10; if the pool is full.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40aed3d8"/></type-var>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="newVal" ref="0x40ae6790" loc="89:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-var size="U:" alignment="U:"><typedef-ref name="t" scoped="" ref="0x40aed3d8"/></type-var>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="size" ref="0x40aedd88" loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
        <documentation loc="63:/root/Projects/tinyos-main-read-only/tos/interfaces/Pool.nc">
          <short>&#10; Returns how many elements are in the pool.</short>
          <long>&#10; Returns how many elements are in the pool. If size&#10; returns 0, empty() will return TRUE. If size returns&#10; a non-zero value, empty() will return FALSE. The&#10; return value of size is always &#38;lte; the return&#10; value of maxSize().&#10;&#10; @return How many elements are in the pool.&#10;</long>
        </documentation>
        <interfacedef-ref qname="Pool"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CompareBit" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
      <documentation loc="35:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
        <short> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table.</short>
        <long> Link estimator asks the routing engine if this entry&#10; should be inserted into the neighbor table if the&#10; white bit on a link is set but there is no room for the link&#10; on the link table. The return value is the &#34;pin bit&#34; - if true&#10; insert into the neighbor table. In the reference implementation&#10; the router will return true if the path through the source&#10; will be better than a path through at least one current neighbor.&#10;@ author Omprakash Gnawali&#10;@ Created: September 16, 2006&#10;@date   $Date: 2010-06-29 22:07:49 $&#10;</long>
      </documentation>
      <function event="" provided="0" name="shouldInsert" ref="0x40c05f10" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
        <interfacedef-ref qname="CompareBit"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40c05740" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="payload" ref="0x40c05bc8" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-void size="I:1" alignment="I:1"></type-void>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40c05da8" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CompareBit.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="CtpRoutingPacket" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
      <documentation loc="33:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <short>&#10;  ADT for CTP routing frames.</short>
        <long>&#10;  ADT for CTP routing frames.&#10;&#10;  @author Philip Levis&#10;  @author Kyle Jamieson&#10;  @date   $Date: 2009-09-21 02:19:42 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="clearOptions" ref="0x40cd7ad0" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd7978" loc="51:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setEtx" ref="0x40cd5c00" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd58b0" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="etx" ref="0x40cd5aa0" loc="57:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="clearOption" ref="0x40cd7390" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd7010" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0x40cd7230" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getEtx" ref="0x40cd5318" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd51c0" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setOption" ref="0x40cd9998" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd9618" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0x40cd9838" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="setParent" ref="0x40cd6ba8" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd6840" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="addr" ref="0x40cd6a48" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getParent" ref="0x40cd6288" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
            <typename><typedef-ref name="am_addr_t" ref="0x40419700"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cd6130" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="getOption" ref="0x40cd9060" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
        <interfacedef-ref qname="CtpRoutingPacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40cdccc0" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="opt" ref="0x40cdcee0" loc="46:/root/Projects/tinyos-main-read-only/tos/lib/net/ctp/CtpRoutingPacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="ctp_options_t" ref="0x40a85738"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialPacketInfo" loc="10:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
      <documentation loc="1:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
        <short>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.</short>
        <long>&#10; Accessor methods used by a serial dispatcher to communicate with various&#10; message_t link formats over a serial port.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="upperLength" ref="0x40dda1c8" loc="31:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="24:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.</short>
          <long>&#10; Get the size of the payload (in bytes) given the size of the datalink&#10; packet (dataLinkLen) embedded in the message_t.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param dataLinkLength The size of the datalink packet.&#10; @return Returns the size of the payload.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40ddbe10" loc="31:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="dataLinkLen" ref="0x40dda068" loc="31:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="offset" ref="0x40ddff18" loc="15:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="11:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the offset into a message_t where the header information begins.</short>
          <long>&#10; Get the offset into a message_t where the header information begins.&#10; @return Returns the offset.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="dataLinkLength" ref="0x40ddb800" loc="23:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
        <documentation loc="16:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
          <short>&#10; Get the size of the datalink packet embedded in the message_t, in bytes.</short>
          <long>&#10; Get the size of the datalink packet embedded in the message_t, in bytes. &#10; This is the sum of the payload (upperLen) and the size of the link header.&#10; @param msg A pointer to the message_t to interrogate. (unused)&#10; @param upperLen The size of the payload.&#10; @return Returns the size of the datalink packet.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialPacketInfo"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="msg" ref="0x40ddb488" loc="23:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-tag size="I:119" alignment="I:1"><nx_struct-ref name="message_t" ref="0x4042cf00"/>
                <typename><typedef-ref name="message_t" ref="0x4042acf0"/></typename>
              </type-tag>
            </type-pointer>
          </variable>
          <variable name="upperLen" ref="0x40ddb6a0" loc="23:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialPacketInfo.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFlush" loc="43:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
        <short>&#10; A basic interface to flush the serial port.</short>
        <long>&#10; A basic interface to flush the serial port.&#10;&#10; @author Ben Greenstein&#10; @author Philip Levis&#10; @date January 23 2006&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="flushDone" ref="0x40dfc1a8" loc="54:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
        <documentation loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Split phase event to indicate that the serial hardware is now idle.</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="flush" ref="0x40dd0d28" loc="49:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
        <documentation loc="45:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFlush.nc">
          <short> &#10; Request that the serial device signal when no more transmissions&#10; are pending (i.e., when the device is idle)&#10;</short>
        </documentation>
        <interfacedef-ref qname="SerialFlush"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SerialFrameComm" loc="47:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <short>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component.</short>
        <long>&#10;&#10; This interface sits between a serial byte encoding component and a&#10; framing/packetizing component. It is to be used with framing protocols&#10; that place delimiters between frames. This interface separates the tasks&#10; of interpreting and coding delimiters and escape bytes from the rest of&#10; the wire protocol.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date   August 7 2005&#10;</long>
      </documentation>
      <function command="" provided="0" name="putDelimiter" ref="0x40dd67f8" loc="56:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent.</short>
          <long>&#10; Used by the upper layer to request that an interframe delimiter&#10; be sent. The lower layer is responsible for the determining the&#10; actual byte(s) that must be sent to delimit the frame.&#10; @return Returns a error_t code that indicates if the lower layer&#10; was able to put an interframe delimiter to serial (SUCCESS) or&#10; not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="resetSend" ref="0x40e01468" loc="72:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with send-side frame&#10; delimiting or escaping be reset. Used to initialize the lower&#10; layer's send path and/or cancel a frame mid-transmission.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="dataReceived" ref="0x40e00588" loc="94:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="87:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection.</short>
          <long>&#10; Signals the upper layer that a byte of data has been received&#10; from the serial connection. It passes this byte as a function&#10; parameter.  &#10; @param data The byte of data that has been received&#10; from the serial connection&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40e00430" loc="94:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="resetReceive" ref="0x40e01990" loc="79:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="74:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset.</short>
          <long>&#10; Requests that any underlying state associated with receive-side&#10; frame or escaping be reset. Used to initialize the lower layer's&#10; receive path and/or cancel a frame mid-reception when sync is lost.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="putData" ref="0x40dd6f28" loc="65:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="58:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.</short>
          <long>&#10;  Used by the upper layer to request that a byte of data be sent&#10;  over serial.&#10;  @param data The byte to be sent&#10;  @return Returns an error_t code that indicates if the lower layer&#10;  has accepted the byte for sending (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40dd6dd0" loc="65:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="putDone" ref="0x40e00a90" loc="100:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="96:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Split-phase event to signal when the lower layer has finished writing&#10; the last request (either putDelimiter or putData) to serial.</short>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="delimiterReceived" ref="0x40e01ef0" loc="85:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
        <documentation loc="81:/root/Projects/tinyos-main-read-only/tos/lib/serial/SerialFrameComm.nc">
          <short>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.</short>
          <long>&#10; Signals the upper layer that an inter-frame delimiter has been &#10; received from the serial connection.&#10;</long>
        </documentation>
        <interfacedef-ref qname="SerialFrameComm"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="SendBytePacket" loc="53:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
        <short>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses.</short>
        <long>&#10; This is an interface that a serial framing protocol provides and a serial&#10; dispatcher uses. The call sequence should be as follows:&#10; The dispatcher should call startSend, specifying the first byte to&#10; send. The framing protocol can then signal as many nextBytes as it&#10; wants/needs, to spool in the bytes. It continues to do so until it receives&#10; a sendComplete call, which will almost certainly happen within a nextByte&#10; signal (i.e., re-entrant to the framing protocol).&#10; This allows the framing protocol to buffer as many bytes as it needs to to meet&#10; timing requirements, jitter, etc. &#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function command="" provided="0" name="completeSend" ref="0x40dd5878" loc="71:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="64:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend.</short>
          <long>&#10; The dispatcher must indicate when the end-of-packet has been reached and does&#10; so by calling completeSend. The function may be called from within the&#10; implementation of a nextByte event.&#10; @return Returns an error_t code indicating whether the framer accepts&#10; this notification (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="nextByte" ref="0x40dd5e40" loc="81:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="73:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; Used by the framer to request the next byte to transmit.</short>
          <long>&#10; Used by the framer to request the next byte to transmit. The&#10; framer may allocate a buffer to pre-spool some or all of a&#10; packet; or it may request and transmit a byte at a time. If there&#10; are no more bytes to send, the dispatcher must call completeSend&#10; before returning from this function.&#10; @return The dispatcher must return the next byte to transmit&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="startSend" ref="0x40dd5268" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="54:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.</short>
          <long>&#10; The dispatcher may initiate a serial transmission by calling this function&#10; and passing the first byte to be transmitted.&#10; @param first_byte The first byte to be transmitted.&#10; @return Returns an error_t code indicating either that the framer&#10; has the resources available to transmit the frame (SUCCESS) or&#10; not (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="first_byte" ref="0x40dd5110" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="sendCompleted" ref="0x40dd3628" loc="91:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
        <documentation loc="83:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
          <short>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf.</short>
          <long>&#10; The framer signals sendCompleted to indicate that it is done transmitting a&#10; packet on the dispatcher's behalf. A non-SUCCESS error_t code indicates that&#10; there was a problem in transmission.&#10; @param error The framer indicates whether it has successfully&#10; accepted the entirety of the packet from the dispatcher (SUCCESS)&#10; or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="SendBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="error" ref="0x40dd34d0" loc="91:/root/Projects/tinyos-main-read-only/tos/lib/serial/SendBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="ReceiveBytePacket" loc="48:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
      <documentation loc="34:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
        <short>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses.</short>
        <long>&#10; This is the data interface that a serial protocol provides and&#10; a serial dispatcher uses. The dispatcher expects the following pattern&#10; of calls: ((startPacket)+ (byteReceived)* (endPacket)+)*&#10; It should ignore any signals that do not follow this pattern.&#10; The interface is used to separate the state machine of the wire protocol&#10; from the complexities of dispatch.&#10;&#10; @author Philip Levis&#10; @author Ben Greenstein&#10; @date August 7 2005&#10;&#10;</long>
      </documentation>
      <function event="" provided="0" name="startPacket" ref="0x40dd77c0" loc="62:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="51:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer to indicate that reception of a frame has begun.</short>
          <long>&#10; Signals the upper layer to indicate that reception of a frame has begun.&#10; Used by the upper layer to prepare for packet reception. If the upper&#10; layer does not want to receive a packet (or isn't ready) it may&#10; return a non-SUCCESS code  such as EBUSY to the lower layer to discard&#10; the frame. The underlying layer may signal endPacket in response to&#10; such a discard request.&#10; @return Returns an error_t code indicating whether the&#10; dispatcher would like to receive a packet (SUCCESS), or not&#10; perhaps because it isn't ready (EBUSY).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="byteReceived" ref="0x40dd1010" loc="69:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="64:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received.</short>
          <long>&#10; Signals the upper layer that a byte of the encapsulated packet has been&#10; received. Passes this byte as a parameter to the function.&#10; @param data A byte of the encapsulated packet that has been received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40dd7e50" loc="69:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="endPacket" ref="0x40dd16a8" loc="80:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
        <documentation loc="70:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
          <short>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received.</short>
          <long>&#10; Signalled to indicate that a packet encapsulated withing a serial&#10; frame has been received. SUCCESS should be passed by the lower layer&#10; following verification that the packet has been received correctly.&#10; A value of error_t indicating an error should be passed when the lower&#10; layer's verification test fails or when the lower layer loses sync.&#10; @param result An error_t code indicating whether the framer has&#10; passed all bytes of an encapsulated packet it receives from&#10; serial to the dispatcher (SUCCESS) or not (FAIL).&#10;</long>
        </documentation>
        <interfacedef-ref qname="ReceiveBytePacket"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="result" ref="0x40dd1550" loc="80:/root/Projects/tinyos-main-read-only/tos/lib/serial/ReceiveBytePacket.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartStream" loc="37:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40e84010" loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="39:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Begin transmission of a UART stream.</short>
          <long>&#10; Begin transmission of a UART stream. If SUCCESS is returned,&#10; &#60;code>sendDone&#60;/code> will be signalled when transmission is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes to send.&#10; @param len Number of bytes to send.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40e87c18" loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40e87e08" loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="receivedByte" ref="0x40e82410" loc="79:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="74:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Signals the receipt of a byte.</short>
          <long>&#10; Signals the receipt of a byte.&#10;&#10; @param byte The byte received.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40e822b8" loc="79:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40e82c18" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="81:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Begin reception of a UART stream.</short>
          <long>&#10; Begin reception of a UART stream. If SUCCESS is returned,&#10; &#60;code>receiveDone&#60;/code> will be signalled when reception is&#10; complete.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for received bytes.&#10; @param len Number of bytes to receive.&#10; @return SUCCESS if request was accepted, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40e828c8" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40e82ab8" loc="90:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="enableReceiveInterrupt" ref="0x40e83850" loc="65:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="59:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Enable the receive byte interrupt.</short>
          <long>&#10; Enable the receive byte interrupt. The &#60;code>receive&#60;/code> event&#10; is signalled each time a byte is received.&#10;&#10; @return SUCCESS if interrupt was enabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="receiveDone" ref="0x40eb3aa8" loc="99:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="92:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of receiving a stream.</short>
          <long>&#10; Signal completion of receiving a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Buffer for bytes received.&#10; @param len Number of bytes received.&#10; @param error SUCCESS if the reception was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40eb3558" loc="99:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40eb3748" loc="99:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40eb3940" loc="99:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="disableReceiveInterrupt" ref="0x40e83dd8" loc="72:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="67:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Disable the receive byte interrupt.</short>
          <long>&#10; Disable the receive byte interrupt.&#10;&#10; @return SUCCESS if interrupt was disabled, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="sendDone" ref="0x40e84e70" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
        <documentation loc="50:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
          <short>&#10; Signal completion of sending a stream.</short>
          <long>&#10; Signal completion of sending a stream.&#10;&#10; @param 'uint8_t* COUNT(len) buf' Bytes sent.&#10; @param len Number of bytes sent.&#10; @param error SUCCESS if the transmission was successful, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartStream"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="buf" ref="0x40e84920" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="len" ref="0x40e84b10" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned short" unsigned="" size="I:2" alignment="I:1">
              <typename><typedef-ref name="uint16_t" ref="0x400381e8"/></typename>
            </type-int>
          </variable>
          <variable name="error" ref="0x40e84d08" loc="57:/root/Projects/tinyos-main-read-only/tos/interfaces/UartStream.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="UartByte" loc="37:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
        <short>&#10; </short>
        <long>&#10; @author Jonathan Hui &#60;jhui@archedrock.com>&#10; @version $Revision: 1.5 $ $Date: 2008-06-04 03:00:35 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="send" ref="0x40ea4e00" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
        <documentation loc="39:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
          <short>&#10; Send a single uart byte.</short>
          <long>&#10; Send a single uart byte. The call blocks until it is ready to&#10; accept another byte for sending.&#10;&#10; @param byte The byte to send.&#10; @return SUCCESS if byte was sent, FAIL otherwise.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40ea4ca8" loc="46:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="receive" ref="0x40ea16b0" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
        <documentation loc="48:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
          <short>&#10; Receive a single uart byte.</short>
          <long>&#10; Receive a single uart byte. The call blocks until a byte is&#10; received.&#10;&#10; @param 'uint8_t* ONE byte' Where to place received byte.&#10; @param timeout How long in byte times to wait.&#10; @return SUCCESS if a byte was received, FAIL if timed out.&#10;</long>
        </documentation>
        <interfacedef-ref qname="UartByte"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="byte" ref="0x40ea1348" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
            <type-pointer size="I:2" alignment="I:1">
              <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
                <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
              </type-int>
            </type-pointer>
          </variable>
          <variable name="timeout" ref="0x40ea1550" loc="56:/root/Projects/tinyos-main-read-only/tos/interfaces/UartByte.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
    </interfacedef>
    <interfacedef qname="HplAtm128Uart" loc="38:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
      <documentation loc="32:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <short>&#10; </short>
        <long>&#10; @author Alec Woo &#60;awoo@archrock.com>&#10; @author Jonathan Hui &#60;jhui@archrock.com>&#10; @version $Revision: 1.4 $ $Date: 2006-12-12 18:23:03 $&#10;</long>
      </documentation>
      <function command="" provided="0" name="isTxEmpty" ref="0x40ec9d70" loc="44:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableRxIntr" ref="0x40ec9530" loc="42:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function event="" provided="0" name="rxDone" ref="0x40ec7390" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40ec7238" loc="49:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function event="" provided="0" name="txDone" ref="0x40ec8a60" loc="47:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="enableTxIntr" ref="0x40eccc78" loc="40:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableTxIntr" ref="0x40ec90f8" loc="41:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="disableRxIntr" ref="0x40ec9970" loc="43:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="error_t" ref="0x40324748"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="isRxEmpty" ref="0x40ec81a8" loc="45:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="bool" ref="0x4031b6e8"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
      <function command="" provided="0" name="tx" ref="0x40ec86b0" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-void size="I:1" alignment="I:1"></type-void>
          <function-parameters>
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </function-parameters>
        </type-function>
        <parameters>
          <variable name="data" ref="0x40ec8558" loc="46:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
            <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
              <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
            </type-int>
          </variable>
        </parameters>
      </function>
      <function command="" provided="0" name="rx" ref="0x40ec8e30" loc="48:/root/Projects/tinyos-main-read-only/tos/chips/atm128/HplAtm128Uart.nc">
        <interfacedef-ref qname="HplAtm128Uart"/>
        <type-function size="I:1" alignment="I:1">
          <type-int cname="unsigned char" unsigned="" size="I:1" alignment="I:1">
            <typename><typedef-ref name="uint8_t" ref="0x40037b68"/></typename>
          </type-int>
          <function-parameters>
          </function-parameters>
        </type-function>
        <parameters>
        </parameters>
      </function>
    </interfacedef>
  </interfacedefs>
  <tags>
  </tags>
  <variables>
  </variables>
  <constants>
  </constants>
  <functions>
  </functions>
  <typedefs>
  </typedefs>
</nesc>
